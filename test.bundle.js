/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	if(typeof window !== 'undefined' && window.initMochaPhantomJS) { window.initMochaPhantomJS(); }
	mocha.setup({"ui":"bdd"});
	__webpack_require__(9)
	__webpack_require__(329);
	if(false) {
		module.hot.accept();
		module.hot.dispose(function() {
			mocha.suite.suites.length = 0;
			var stats = document.getElementById('mocha-stats');
			var report = document.getElementById('mocha-report');
			stats && stats.parentNode.removeChild(stats);
			report && report.parentNode.removeChild(report);
		});
	}

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	if (! document.getElementById("mocha")) { document.write("<div id=\"mocha\"></div>"); }

	__webpack_require__(2);
	__webpack_require__(6);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(3);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(5)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../css-loader/index.js!./mocha.css", function() {
				var newContent = require("!!./../css-loader/index.js!./mocha.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(4)();
	// imports


	// module
	exports.push([module.id, "@charset \"utf-8\";\n\nbody {\n  margin:0;\n}\n\n#mocha {\n  font: 20px/1.5 \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  margin: 60px 50px;\n}\n\n#mocha ul,\n#mocha li {\n  margin: 0;\n  padding: 0;\n}\n\n#mocha ul {\n  list-style: none;\n}\n\n#mocha h1,\n#mocha h2 {\n  margin: 0;\n}\n\n#mocha h1 {\n  margin-top: 15px;\n  font-size: 1em;\n  font-weight: 200;\n}\n\n#mocha h1 a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#mocha h1 a:hover {\n  text-decoration: underline;\n}\n\n#mocha .suite .suite h1 {\n  margin-top: 0;\n  font-size: .8em;\n}\n\n#mocha .hidden {\n  display: none;\n}\n\n#mocha h2 {\n  font-size: 12px;\n  font-weight: normal;\n  cursor: pointer;\n}\n\n#mocha .suite {\n  margin-left: 15px;\n}\n\n#mocha .test {\n  margin-left: 15px;\n  overflow: hidden;\n}\n\n#mocha .test.pending:hover h2::after {\n  content: '(pending)';\n  font-family: arial, sans-serif;\n}\n\n#mocha .test.pass.medium .duration {\n  background: #c09853;\n}\n\n#mocha .test.pass.slow .duration {\n  background: #b94a48;\n}\n\n#mocha .test.pass::before {\n  content: '\\2713';\n  font-size: 12px;\n  display: block;\n  float: left;\n  margin-right: 5px;\n  color: #00d6b2;\n}\n\n#mocha .test.pass .duration {\n  font-size: 9px;\n  margin-left: 5px;\n  padding: 2px 5px;\n  color: #fff;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  -moz-box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  -ms-border-radius: 5px;\n  -o-border-radius: 5px;\n  border-radius: 5px;\n}\n\n#mocha .test.pass.fast .duration {\n  display: none;\n}\n\n#mocha .test.pending {\n  color: #0b97c4;\n}\n\n#mocha .test.pending::before {\n  content: '\\25E6';\n  color: #0b97c4;\n}\n\n#mocha .test.fail {\n  color: #c00;\n}\n\n#mocha .test.fail pre {\n  color: black;\n}\n\n#mocha .test.fail::before {\n  content: '\\2716';\n  font-size: 12px;\n  display: block;\n  float: left;\n  margin-right: 5px;\n  color: #c00;\n}\n\n#mocha .test pre.error {\n  color: #c00;\n  max-height: 300px;\n  overflow: auto;\n}\n\n#mocha .test .html-error {\n  overflow: auto;\n  color: black;\n  line-height: 1.5;\n  display: block;\n  float: left;\n  clear: left;\n  font: 12px/1.5 monaco, monospace;\n  margin: 5px;\n  padding: 15px;\n  border: 1px solid #eee;\n  max-width: 85%; /*(1)*/\n  max-width: -webkit-calc(100% - 42px);\n  max-width: -moz-calc(100% - 42px);\n  max-width: calc(100% - 42px); /*(2)*/\n  max-height: 300px;\n  word-wrap: break-word;\n  border-bottom-color: #ddd;\n  -webkit-box-shadow: 0 1px 3px #eee;\n  -moz-box-shadow: 0 1px 3px #eee;\n  box-shadow: 0 1px 3px #eee;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n}\n\n#mocha .test .html-error pre.error {\n  border: none;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-box-shadow: 0;\n  -moz-box-shadow: 0;\n  box-shadow: 0;\n  padding: 0;\n  margin: 0;\n  margin-top: 18px;\n  max-height: none;\n}\n\n/**\n * (1): approximate for browsers not supporting calc\n * (2): 42 = 2*15 + 2*10 + 2*1 (padding + margin + border)\n *      ^^ seriously\n */\n#mocha .test pre {\n  display: block;\n  float: left;\n  clear: left;\n  font: 12px/1.5 monaco, monospace;\n  margin: 5px;\n  padding: 15px;\n  border: 1px solid #eee;\n  max-width: 85%; /*(1)*/\n  max-width: -webkit-calc(100% - 42px);\n  max-width: -moz-calc(100% - 42px);\n  max-width: calc(100% - 42px); /*(2)*/\n  word-wrap: break-word;\n  border-bottom-color: #ddd;\n  -webkit-box-shadow: 0 1px 3px #eee;\n  -moz-box-shadow: 0 1px 3px #eee;\n  box-shadow: 0 1px 3px #eee;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n}\n\n#mocha .test h2 {\n  position: relative;\n}\n\n#mocha .test a.replay {\n  position: absolute;\n  top: 3px;\n  right: 0;\n  text-decoration: none;\n  vertical-align: middle;\n  display: block;\n  width: 15px;\n  height: 15px;\n  line-height: 15px;\n  text-align: center;\n  background: #eee;\n  font-size: 15px;\n  -webkit-border-radius: 15px;\n  -moz-border-radius: 15px;\n  border-radius: 15px;\n  -webkit-transition:opacity 200ms;\n  -moz-transition:opacity 200ms;\n  -o-transition:opacity 200ms;\n  transition: opacity 200ms;\n  opacity: 0.3;\n  color: #888;\n}\n\n#mocha .test:hover a.replay {\n  opacity: 1;\n}\n\n#mocha-report.pass .test.fail {\n  display: none;\n}\n\n#mocha-report.fail .test.pass {\n  display: none;\n}\n\n#mocha-report.pending .test.pass,\n#mocha-report.pending .test.fail {\n  display: none;\n}\n#mocha-report.pending .test.pass.pending {\n  display: block;\n}\n\n#mocha-error {\n  color: #c00;\n  font-size: 1.5em;\n  font-weight: 100;\n  letter-spacing: 1px;\n}\n\n#mocha-stats {\n  position: fixed;\n  top: 15px;\n  right: 10px;\n  font-size: 12px;\n  margin: 0;\n  color: #888;\n  z-index: 1;\n}\n\n#mocha-stats .progress {\n  float: right;\n  padding-top: 0;\n\n  /**\n   * Set safe initial values, so mochas .progress does not inherit these\n   * properties from Bootstrap .progress (which causes .progress height to\n   * equal line height set in Bootstrap).\n   */\n  height: auto;\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n  background-color: initial;\n}\n\n#mocha-stats em {\n  color: black;\n}\n\n#mocha-stats a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#mocha-stats a:hover {\n  border-bottom: 1px solid #eee;\n}\n\n#mocha-stats li {\n  display: inline-block;\n  margin: 0 5px;\n  list-style: none;\n  padding-top: 11px;\n}\n\n#mocha-stats canvas {\n  width: 40px;\n  height: 40px;\n}\n\n#mocha code .comment { color: #ddd; }\n#mocha code .init { color: #2f6fad; }\n#mocha code .string { color: #5890ad; }\n#mocha code .keyword { color: #8a6343; }\n#mocha code .number { color: #2f6fad; }\n\n@media screen and (max-device-width: 480px) {\n  #mocha {\n    margin: 60px 0px;\n  }\n\n  #mocha #stats {\n    position: absolute;\n  }\n}\n", ""]);

	// exports


/***/ },
/* 4 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(7)(__webpack_require__(8))

/***/ },
/* 7 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(src) {
		if (typeof execScript !== "undefined")
			execScript(src);
		else
			eval.call(null, src);
	}


/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (process,global){\n'use strict';\n\n/* eslint no-unused-vars: off */\n/* eslint-env commonjs */\n\n/**\n * Shim process.stdout.\n */\n\nprocess.stdout = require('browser-stdout')();\n\nvar Mocha = require('./lib/mocha');\n\n/**\n * Create a Mocha instance.\n *\n * @return {undefined}\n */\n\nvar mocha = new Mocha({ reporter: 'html' });\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n\nvar uncaughtExceptionHandlers = [];\n\nvar originalOnerrorHandler = global.onerror;\n\n/**\n * Remove uncaughtException listener.\n * Revert to original onerror handler if previously defined.\n */\n\nprocess.removeListener = function (e, fn) {\n  if (e === 'uncaughtException') {\n    if (originalOnerrorHandler) {\n      global.onerror = originalOnerrorHandler;\n    } else {\n      global.onerror = function () {};\n    }\n    var i = Mocha.utils.indexOf(uncaughtExceptionHandlers, fn);\n    if (i !== -1) {\n      uncaughtExceptionHandlers.splice(i, 1);\n    }\n  }\n};\n\n/**\n * Implements uncaughtException listener.\n */\n\nprocess.on = function (e, fn) {\n  if (e === 'uncaughtException') {\n    global.onerror = function (err, url, line) {\n      fn(new Error(err + ' (' + url + ':' + line + ')'));\n      return !mocha.allowUncaught;\n    };\n    uncaughtExceptionHandlers.push(fn);\n  }\n};\n\n// The BDD UI is registered by default, but no UI will be functional in the\n// browser without an explicit call to the overridden `mocha.ui` (see below).\n// Ensure that this default UI does not expose its methods to the global scope.\nmocha.suite.removeAllListeners('pre-require');\n\nvar immediateQueue = [];\nvar immediateTimeout;\n\nfunction timeslice () {\n  var immediateStart = new Date().getTime();\n  while (immediateQueue.length && (new Date().getTime() - immediateStart) < 100) {\n    immediateQueue.shift()();\n  }\n  if (immediateQueue.length) {\n    immediateTimeout = setTimeout(timeslice, 0);\n  } else {\n    immediateTimeout = null;\n  }\n}\n\n/**\n * High-performance override of Runner.immediately.\n */\n\nMocha.Runner.immediately = function (callback) {\n  immediateQueue.push(callback);\n  if (!immediateTimeout) {\n    immediateTimeout = setTimeout(timeslice, 0);\n  }\n};\n\n/**\n * Function to allow assertion libraries to throw errors directly into mocha.\n * This is useful when running tests in a browser because window.onerror will\n * only receive the 'message' attribute of the Error.\n */\nmocha.throwError = function (err) {\n  Mocha.utils.forEach(uncaughtExceptionHandlers, function (fn) {\n    fn(err);\n  });\n  throw err;\n};\n\n/**\n * Override ui to ensure that the ui functions are initialized.\n * Normally this would happen in Mocha.prototype.loadFiles.\n */\n\nmocha.ui = function (ui) {\n  Mocha.prototype.ui.call(this, ui);\n  this.suite.emit('pre-require', global, null, this);\n  return this;\n};\n\n/**\n * Setup mocha with the given setting options.\n */\n\nmocha.setup = function (opts) {\n  if (typeof opts === 'string') {\n    opts = { ui: opts };\n  }\n  for (var opt in opts) {\n    if (opts.hasOwnProperty(opt)) {\n      this[opt](opts[opt]);\n    }\n  }\n  return this;\n};\n\n/**\n * Run mocha, returning the Runner.\n */\n\nmocha.run = function (fn) {\n  var options = mocha.options;\n  mocha.globals('location');\n\n  var query = Mocha.utils.parseQuery(global.location.search || '');\n  if (query.grep) {\n    mocha.grep(query.grep);\n  }\n  if (query.fgrep) {\n    mocha.fgrep(query.fgrep);\n  }\n  if (query.invert) {\n    mocha.invert();\n  }\n\n  return Mocha.prototype.run.call(mocha, function (err) {\n    // The DOM Document is not available in Web Workers.\n    var document = global.document;\n    if (document && document.getElementById('mocha') && options.noHighlighting !== true) {\n      Mocha.utils.highlightTags('code');\n    }\n    if (fn) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Expose the process shim.\n * https://github.com/mochajs/mocha/pull/916\n */\n\nMocha.process = process;\n\n/**\n * Expose mocha.\n */\n\nglobal.Mocha = Mocha;\nglobal.mocha = mocha;\n\n// this allows test/acceptance/required-tokens.js to pass; thus,\n// you can now do `const describe = require('mocha').describe` in a\n// browser context (assuming browserification).  should fix #880\nmodule.exports = global;\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./lib/mocha\":14,\"_process\":67,\"browser-stdout\":41}],2:[function(require,module,exports){\n'use strict';\n\nfunction noop () {}\n\nmodule.exports = function () {\n  return noop;\n};\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\n/**\n * Module exports.\n */\n\nexports.EventEmitter = EventEmitter;\n\n/**\n * Object#toString reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Check if a value is an array.\n *\n * @api private\n * @param {*} val The value to test.\n * @return {boolean} true if the value is an array, otherwise false.\n */\nfunction isArray (val) {\n  return objToString.call(val) === '[object Array]';\n}\n\n/**\n * Event emitter constructor.\n *\n * @api public\n */\nfunction EventEmitter () {}\n\n/**\n * Add a listener.\n *\n * @api public\n * @param {string} name Event name.\n * @param {Function} fn Event handler.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.on = function (name, fn) {\n  if (!this.$events) {\n    this.$events = {};\n  }\n\n  if (!this.$events[name]) {\n    this.$events[name] = fn;\n  } else if (isArray(this.$events[name])) {\n    this.$events[name].push(fn);\n  } else {\n    this.$events[name] = [this.$events[name], fn];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n/**\n * Adds a volatile listener.\n *\n * @api public\n * @param {string} name Event name.\n * @param {Function} fn Event handler.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.once = function (name, fn) {\n  var self = this;\n\n  function on () {\n    self.removeListener(name, on);\n    fn.apply(this, arguments);\n  }\n\n  on.listener = fn;\n  this.on(name, on);\n\n  return this;\n};\n\n/**\n * Remove a listener.\n *\n * @api public\n * @param {string} name Event name.\n * @param {Function} fn Event handler.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.removeListener = function (name, fn) {\n  if (this.$events && this.$events[name]) {\n    var list = this.$events[name];\n\n    if (isArray(list)) {\n      var pos = -1;\n\n      for (var i = 0, l = list.length; i < l; i++) {\n        if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n          pos = i;\n          break;\n        }\n      }\n\n      if (pos < 0) {\n        return this;\n      }\n\n      list.splice(pos, 1);\n\n      if (!list.length) {\n        delete this.$events[name];\n      }\n    } else if (list === fn || (list.listener && list.listener === fn)) {\n      delete this.$events[name];\n    }\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners for an event.\n *\n * @api public\n * @param {string} name Event name.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.removeAllListeners = function (name) {\n  if (name === undefined) {\n    this.$events = {};\n    return this;\n  }\n\n  if (this.$events && this.$events[name]) {\n    this.$events[name] = null;\n  }\n\n  return this;\n};\n\n/**\n * Get all listeners for a given event.\n *\n * @api public\n * @param {string} name Event name.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.listeners = function (name) {\n  if (!this.$events) {\n    this.$events = {};\n  }\n\n  if (!this.$events[name]) {\n    this.$events[name] = [];\n  }\n\n  if (!isArray(this.$events[name])) {\n    this.$events[name] = [this.$events[name]];\n  }\n\n  return this.$events[name];\n};\n\n/**\n * Emit an event.\n *\n * @api public\n * @param {string} name Event name.\n * @return {boolean} true if at least one handler was invoked, else false.\n */\nEventEmitter.prototype.emit = function (name) {\n  if (!this.$events) {\n    return false;\n  }\n\n  var handler = this.$events[name];\n\n  if (!handler) {\n    return false;\n  }\n\n  var args = Array.prototype.slice.call(arguments, 1);\n\n  if (typeof handler === 'function') {\n    handler.apply(this, args);\n  } else if (isArray(handler)) {\n    var listeners = handler.slice();\n\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i].apply(this, args);\n    }\n  } else {\n    return false;\n  }\n\n  return true;\n};\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n/**\n * Expose `Progress`.\n */\n\nmodule.exports = Progress;\n\n/**\n * Initialize a new `Progress` indicator.\n */\nfunction Progress () {\n  this.percent = 0;\n  this.size(0);\n  this.fontSize(11);\n  this.font('helvetica, arial, sans-serif');\n}\n\n/**\n * Set progress size to `size`.\n *\n * @api public\n * @param {number} size\n * @return {Progress} Progress instance.\n */\nProgress.prototype.size = function (size) {\n  this._size = size;\n  return this;\n};\n\n/**\n * Set text to `text`.\n *\n * @api public\n * @param {string} text\n * @return {Progress} Progress instance.\n */\nProgress.prototype.text = function (text) {\n  this._text = text;\n  return this;\n};\n\n/**\n * Set font size to `size`.\n *\n * @api public\n * @param {number} size\n * @return {Progress} Progress instance.\n */\nProgress.prototype.fontSize = function (size) {\n  this._fontSize = size;\n  return this;\n};\n\n/**\n * Set font to `family`.\n *\n * @param {string} family\n * @return {Progress} Progress instance.\n */\nProgress.prototype.font = function (family) {\n  this._font = family;\n  return this;\n};\n\n/**\n * Update percentage to `n`.\n *\n * @param {number} n\n * @return {Progress} Progress instance.\n */\nProgress.prototype.update = function (n) {\n  this.percent = n;\n  return this;\n};\n\n/**\n * Draw on `ctx`.\n *\n * @param {CanvasRenderingContext2d} ctx\n * @return {Progress} Progress instance.\n */\nProgress.prototype.draw = function (ctx) {\n  try {\n    var percent = Math.min(this.percent, 100);\n    var size = this._size;\n    var half = size / 2;\n    var x = half;\n    var y = half;\n    var rad = half - 1;\n    var fontSize = this._fontSize;\n\n    ctx.font = fontSize + 'px ' + this._font;\n\n    var angle = Math.PI * 2 * (percent / 100);\n    ctx.clearRect(0, 0, size, size);\n\n    // outer circle\n    ctx.strokeStyle = '#9f9f9f';\n    ctx.beginPath();\n    ctx.arc(x, y, rad, 0, angle, false);\n    ctx.stroke();\n\n    // inner circle\n    ctx.strokeStyle = '#eee';\n    ctx.beginPath();\n    ctx.arc(x, y, rad - 1, 0, angle, true);\n    ctx.stroke();\n\n    // text\n    var text = this._text || (percent | 0) + '%';\n    var w = ctx.measureText(text).width;\n\n    ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);\n  } catch (err) {\n    // don't fail if we can't render progress\n  }\n  return this;\n};\n\n},{}],5:[function(require,module,exports){\n(function (global){\n'use strict';\n\nexports.isatty = function isatty () {\n  return true;\n};\n\nexports.getWindowSize = function getWindowSize () {\n  if ('innerHeight' in global) {\n    return [global.innerHeight, global.innerWidth];\n  }\n  // In a Web Worker, the DOM Window is not available.\n  return [640, 480];\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],6:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar JSON = require('json3');\n\n/**\n * Expose `Context`.\n */\n\nmodule.exports = Context;\n\n/**\n * Initialize a new `Context`.\n *\n * @api private\n */\nfunction Context () {}\n\n/**\n * Set or get the context `Runnable` to `runnable`.\n *\n * @api private\n * @param {Runnable} runnable\n * @return {Context}\n */\nContext.prototype.runnable = function (runnable) {\n  if (!arguments.length) {\n    return this._runnable;\n  }\n  this.test = this._runnable = runnable;\n  return this;\n};\n\n/**\n * Set test timeout `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {Context} self\n */\nContext.prototype.timeout = function (ms) {\n  if (!arguments.length) {\n    return this.runnable().timeout();\n  }\n  this.runnable().timeout(ms);\n  return this;\n};\n\n/**\n * Set test timeout `enabled`.\n *\n * @api private\n * @param {boolean} enabled\n * @return {Context} self\n */\nContext.prototype.enableTimeouts = function (enabled) {\n  this.runnable().enableTimeouts(enabled);\n  return this;\n};\n\n/**\n * Set test slowness threshold `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {Context} self\n */\nContext.prototype.slow = function (ms) {\n  this.runnable().slow(ms);\n  return this;\n};\n\n/**\n * Mark a test as skipped.\n *\n * @api private\n * @return {Context} self\n */\nContext.prototype.skip = function () {\n  this.runnable().skip();\n  return this;\n};\n\n/**\n * Allow a number of retries on failed tests\n *\n * @api private\n * @param {number} n\n * @return {Context} self\n */\nContext.prototype.retries = function (n) {\n  if (!arguments.length) {\n    return this.runnable().retries();\n  }\n  this.runnable().retries(n);\n  return this;\n};\n\n/**\n * Inspect the context void of `._runnable`.\n *\n * @api private\n * @return {string}\n */\nContext.prototype.inspect = function () {\n  return JSON.stringify(this, function (key, val) {\n    return key === 'runnable' || key === 'test' ? undefined : val;\n  }, 2);\n};\n\n},{\"json3\":54}],7:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Runnable = require('./runnable');\nvar inherits = require('./utils').inherits;\n\n/**\n * Expose `Hook`.\n */\n\nmodule.exports = Hook;\n\n/**\n * Initialize a new `Hook` with the given `title` and callback `fn`.\n *\n * @param {String} title\n * @param {Function} fn\n * @api private\n */\nfunction Hook (title, fn) {\n  Runnable.call(this, title, fn);\n  this.type = 'hook';\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\ninherits(Hook, Runnable);\n\n/**\n * Get or set the test `err`.\n *\n * @param {Error} err\n * @return {Error}\n * @api public\n */\nHook.prototype.error = function (err) {\n  if (!arguments.length) {\n    err = this._error;\n    this._error = null;\n    return err;\n  }\n\n  this._error = err;\n};\n\n},{\"./runnable\":33,\"./utils\":38}],8:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Test = require('../test');\n\n/**\n * BDD-style interface:\n *\n *      describe('Array', function() {\n *        describe('#indexOf()', function() {\n *          it('should return -1 when not present', function() {\n *            // ...\n *          });\n *\n *          it('should return the index when present', function() {\n *            // ...\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function (suite) {\n  var suites = [suite];\n\n  suite.on('pre-require', function (context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`\n     * and callback `fn` containing nested suites\n     * and/or tests.\n     */\n\n    context.describe = context.context = function (title, fn) {\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Pending describe.\n     */\n\n    context.xdescribe = context.xcontext = context.describe.skip = function (title, fn) {\n      return common.suite.skip({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Exclusive suite.\n     */\n\n    context.describe.only = function (title, fn) {\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.it = context.specify = function (title, fn) {\n      var suite = suites[0];\n      if (suite.isPending()) {\n        fn = null;\n      }\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.it.only = function (title, fn) {\n      return common.test.only(mocha, context.it(title, fn));\n    };\n\n    /**\n     * Pending test case.\n     */\n\n    context.xit = context.xspecify = context.it.skip = function (title) {\n      context.it(title);\n    };\n\n    /**\n     * Number of attempts to retry.\n     */\n    context.it.retries = function (n) {\n      context.retries(n);\n    };\n  });\n};\n\n},{\"../test\":36,\"./common\":9}],9:[function(require,module,exports){\n'use strict';\n\nvar Suite = require('../suite');\n\n/**\n * Functions common to more than one interface.\n *\n * @param {Suite[]} suites\n * @param {Context} context\n * @param {Mocha} mocha\n * @return {Object} An object containing common functions.\n */\nmodule.exports = function (suites, context, mocha) {\n  return {\n    /**\n     * This is only present if flag --delay is passed into Mocha. It triggers\n     * root suite execution.\n     *\n     * @param {Suite} suite The root suite.\n     * @return {Function} A function which runs the root suite\n     */\n    runWithSuite: function runWithSuite (suite) {\n      return function run () {\n        suite.run();\n      };\n    },\n\n    /**\n     * Execute before running tests.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    before: function (name, fn) {\n      suites[0].beforeAll(name, fn);\n    },\n\n    /**\n     * Execute after running tests.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    after: function (name, fn) {\n      suites[0].afterAll(name, fn);\n    },\n\n    /**\n     * Execute before each test case.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    beforeEach: function (name, fn) {\n      suites[0].beforeEach(name, fn);\n    },\n\n    /**\n     * Execute after each test case.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    afterEach: function (name, fn) {\n      suites[0].afterEach(name, fn);\n    },\n\n    suite: {\n      /**\n       * Create an exclusive Suite; convenience function\n       * See docstring for create() below.\n       *\n       * @param {Object} opts\n       * @returns {Suite}\n       */\n      only: function only (opts) {\n        mocha.options.hasOnly = true;\n        opts.isOnly = true;\n        return this.create(opts);\n      },\n\n      /**\n       * Create a Suite, but skip it; convenience function\n       * See docstring for create() below.\n       *\n       * @param {Object} opts\n       * @returns {Suite}\n       */\n      skip: function skip (opts) {\n        opts.pending = true;\n        return this.create(opts);\n      },\n\n      /**\n       * Creates a suite.\n       * @param {Object} opts Options\n       * @param {string} opts.title Title of Suite\n       * @param {Function} [opts.fn] Suite Function (not always applicable)\n       * @param {boolean} [opts.pending] Is Suite pending?\n       * @param {string} [opts.file] Filepath where this Suite resides\n       * @param {boolean} [opts.isOnly] Is Suite exclusive?\n       * @returns {Suite}\n       */\n      create: function create (opts) {\n        var suite = Suite.create(suites[0], opts.title);\n        suite.pending = Boolean(opts.pending);\n        suite.file = opts.file;\n        suites.unshift(suite);\n        if (opts.isOnly) {\n          suite.parent._onlySuites = suite.parent._onlySuites.concat(suite);\n          mocha.options.hasOnly = true;\n        }\n        if (typeof opts.fn === 'function') {\n          opts.fn.call(suite);\n          suites.shift();\n        } else if (typeof opts.fn === 'undefined' && !suite.pending) {\n          throw new Error('Suite \"' + suite.fullTitle() + '\" was defined but no callback was supplied. Supply a callback or explicitly skip the suite.');\n        }\n\n        return suite;\n      }\n    },\n\n    test: {\n\n      /**\n       * Exclusive test-case.\n       *\n       * @param {Object} mocha\n       * @param {Function} test\n       * @returns {*}\n       */\n      only: function (mocha, test) {\n        test.parent._onlyTests = test.parent._onlyTests.concat(test);\n        mocha.options.hasOnly = true;\n        return test;\n      },\n\n      /**\n       * Pending test case.\n       *\n       * @param {string} title\n       */\n      skip: function (title) {\n        context.test(title);\n      },\n\n      /**\n       * Number of retry attempts\n       *\n       * @param {number} n\n       */\n      retries: function (n) {\n        context.retries(n);\n      }\n    }\n  };\n};\n\n},{\"../suite\":35}],10:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite');\nvar Test = require('../test');\n\n/**\n * Exports-style (as Node.js module) interface:\n *\n *     exports.Array = {\n *       '#indexOf()': {\n *         'should return -1 when the value is not present': function() {\n *\n *         },\n *\n *         'should return the correct index when the value is present': function() {\n *\n *         }\n *       }\n *     };\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function (suite) {\n  var suites = [suite];\n\n  suite.on('require', visit);\n\n  function visit (obj, file) {\n    var suite;\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        var fn = obj[key];\n        switch (key) {\n          case 'before':\n            suites[0].beforeAll(fn);\n            break;\n          case 'after':\n            suites[0].afterAll(fn);\n            break;\n          case 'beforeEach':\n            suites[0].beforeEach(fn);\n            break;\n          case 'afterEach':\n            suites[0].afterEach(fn);\n            break;\n          default:\n            var test = new Test(key, fn);\n            test.file = file;\n            suites[0].addTest(test);\n        }\n      } else {\n        suite = Suite.create(suites[0], key);\n        suites.unshift(suite);\n        visit(obj[key], file);\n        suites.shift();\n      }\n    }\n  }\n};\n\n},{\"../suite\":35,\"../test\":36}],11:[function(require,module,exports){\n'use strict';\n\nexports.bdd = require('./bdd');\nexports.tdd = require('./tdd');\nexports.qunit = require('./qunit');\nexports.exports = require('./exports');\n\n},{\"./bdd\":8,\"./exports\":10,\"./qunit\":12,\"./tdd\":13}],12:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Test = require('../test');\n\n/**\n * QUnit-style interface:\n *\n *     suite('Array');\n *\n *     test('#length', function() {\n *       var arr = [1,2,3];\n *       ok(arr.length == 3);\n *     });\n *\n *     test('#indexOf()', function() {\n *       var arr = [1,2,3];\n *       ok(arr.indexOf(1) == 0);\n *       ok(arr.indexOf(2) == 1);\n *       ok(arr.indexOf(3) == 2);\n *     });\n *\n *     suite('String');\n *\n *     test('#length', function() {\n *       ok('foo'.length == 3);\n *     });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function (suite) {\n  var suites = [suite];\n\n  suite.on('pre-require', function (context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`.\n     */\n\n    context.suite = function (title) {\n      if (suites.length > 1) {\n        suites.shift();\n      }\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: false\n      });\n    };\n\n    /**\n     * Exclusive Suite.\n     */\n\n    context.suite.only = function (title) {\n      if (suites.length > 1) {\n        suites.shift();\n      }\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: false\n      });\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.test = function (title, fn) {\n      var test = new Test(title, fn);\n      test.file = file;\n      suites[0].addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function (title, fn) {\n      return common.test.only(mocha, context.test(title, fn));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};\n\n},{\"../test\":36,\"./common\":9}],13:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Test = require('../test');\n\n/**\n * TDD-style interface:\n *\n *      suite('Array', function() {\n *        suite('#indexOf()', function() {\n *          suiteSetup(function() {\n *\n *          });\n *\n *          test('should return -1 when not present', function() {\n *\n *          });\n *\n *          test('should return the index when present', function() {\n *\n *          });\n *\n *          suiteTeardown(function() {\n *\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function (suite) {\n  var suites = [suite];\n\n  suite.on('pre-require', function (context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.setup = common.beforeEach;\n    context.teardown = common.afterEach;\n    context.suiteSetup = common.before;\n    context.suiteTeardown = common.after;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n\n    /**\n     * Describe a \"suite\" with the given `title` and callback `fn` containing\n     * nested suites and/or tests.\n     */\n    context.suite = function (title, fn) {\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Pending suite.\n     */\n    context.suite.skip = function (title, fn) {\n      return common.suite.skip({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n    context.suite.only = function (title, fn) {\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Describe a specification or test-case with the given `title` and\n     * callback `fn` acting as a thunk.\n     */\n    context.test = function (title, fn) {\n      var suite = suites[0];\n      if (suite.isPending()) {\n        fn = null;\n      }\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function (title, fn) {\n      return common.test.only(mocha, context.test(title, fn));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};\n\n},{\"../test\":36,\"./common\":9}],14:[function(require,module,exports){\n(function (process,global,__dirname){\n'use strict';\n\n/*!\n * mocha\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar escapeRe = require('escape-string-regexp');\nvar path = require('path');\nvar reporters = require('./reporters');\nvar utils = require('./utils');\n\n/**\n * Expose `Mocha`.\n */\n\nexports = module.exports = Mocha;\n\n/**\n * To require local UIs and reporters when running in node.\n */\n\nif (!process.browser) {\n  var cwd = process.cwd();\n  module.paths.push(cwd, path.join(cwd, 'node_modules'));\n}\n\n/**\n * Expose internals.\n */\n\nexports.utils = utils;\nexports.interfaces = require('./interfaces');\nexports.reporters = reporters;\nexports.Runnable = require('./runnable');\nexports.Context = require('./context');\nexports.Runner = require('./runner');\nexports.Suite = require('./suite');\nexports.Hook = require('./hook');\nexports.Test = require('./test');\n\n/**\n * Return image `name` path.\n *\n * @api private\n * @param {string} name\n * @return {string}\n */\nfunction image (name) {\n  return path.join(__dirname, '../images', name + '.png');\n}\n\n/**\n * Set up mocha with `options`.\n *\n * Options:\n *\n *   - `ui` name \"bdd\", \"tdd\", \"exports\" etc\n *   - `reporter` reporter instance, defaults to `mocha.reporters.spec`\n *   - `globals` array of accepted globals\n *   - `timeout` timeout in milliseconds\n *   - `retries` number of times to retry failed tests\n *   - `bail` bail on the first test failure\n *   - `slow` milliseconds to wait before considering a test slow\n *   - `ignoreLeaks` ignore global leaks\n *   - `fullTrace` display the full stack-trace on failing\n *   - `grep` string or regexp to filter tests with\n *\n * @param {Object} options\n * @api public\n */\nfunction Mocha (options) {\n  options = options || {};\n  this.files = [];\n  this.options = options;\n  if (options.grep) {\n    this.grep(new RegExp(options.grep));\n  }\n  if (options.fgrep) {\n    this.fgrep(options.fgrep);\n  }\n  this.suite = new exports.Suite('', new exports.Context());\n  this.ui(options.ui);\n  this.bail(options.bail);\n  this.reporter(options.reporter, options.reporterOptions);\n  if (typeof options.timeout !== 'undefined' && options.timeout !== null) {\n    this.timeout(options.timeout);\n  }\n  if (typeof options.retries !== 'undefined' && options.retries !== null) {\n    this.retries(options.retries);\n  }\n  this.useColors(options.useColors);\n  if (options.enableTimeouts !== null) {\n    this.enableTimeouts(options.enableTimeouts);\n  }\n  if (options.slow) {\n    this.slow(options.slow);\n  }\n}\n\n/**\n * Enable or disable bailing on the first failure.\n *\n * @api public\n * @param {boolean} [bail]\n */\nMocha.prototype.bail = function (bail) {\n  if (!arguments.length) {\n    bail = true;\n  }\n  this.suite.bail(bail);\n  return this;\n};\n\n/**\n * Add test `file`.\n *\n * @api public\n * @param {string} file\n */\nMocha.prototype.addFile = function (file) {\n  this.files.push(file);\n  return this;\n};\n\n/**\n * Set reporter to `reporter`, defaults to \"spec\".\n *\n * @param {String|Function} reporter name or constructor\n * @param {Object} reporterOptions optional options\n * @api public\n * @param {string|Function} reporter name or constructor\n * @param {Object} reporterOptions optional options\n */\nMocha.prototype.reporter = function (reporter, reporterOptions) {\n  if (typeof reporter === 'function') {\n    this._reporter = reporter;\n  } else {\n    reporter = reporter || 'spec';\n    var _reporter;\n    // Try to load a built-in reporter.\n    if (reporters[reporter]) {\n      _reporter = reporters[reporter];\n    }\n    // Try to load reporters from process.cwd() and node_modules\n    if (!_reporter) {\n      try {\n        _reporter = require(reporter);\n      } catch (err) {\n        err.message.indexOf('Cannot find module') !== -1\n          ? console.warn('\"' + reporter + '\" reporter not found')\n          : console.warn('\"' + reporter + '\" reporter blew up with error:\\n' + err.stack);\n      }\n    }\n    if (!_reporter && reporter === 'teamcity') {\n      console.warn('The Teamcity reporter was moved to a package named ' +\n        'mocha-teamcity-reporter ' +\n        '(https://npmjs.org/package/mocha-teamcity-reporter).');\n    }\n    if (!_reporter) {\n      throw new Error('invalid reporter \"' + reporter + '\"');\n    }\n    this._reporter = _reporter;\n  }\n  this.options.reporterOptions = reporterOptions;\n  return this;\n};\n\n/**\n * Set test UI `name`, defaults to \"bdd\".\n *\n * @api public\n * @param {string} bdd\n */\nMocha.prototype.ui = function (name) {\n  name = name || 'bdd';\n  this._ui = exports.interfaces[name];\n  if (!this._ui) {\n    try {\n      this._ui = require(name);\n    } catch (err) {\n      throw new Error('invalid interface \"' + name + '\"');\n    }\n  }\n  this._ui = this._ui(this.suite);\n\n  this.suite.on('pre-require', function (context) {\n    exports.afterEach = context.afterEach || context.teardown;\n    exports.after = context.after || context.suiteTeardown;\n    exports.beforeEach = context.beforeEach || context.setup;\n    exports.before = context.before || context.suiteSetup;\n    exports.describe = context.describe || context.suite;\n    exports.it = context.it || context.test;\n    exports.setup = context.setup || context.beforeEach;\n    exports.suiteSetup = context.suiteSetup || context.before;\n    exports.suiteTeardown = context.suiteTeardown || context.after;\n    exports.suite = context.suite || context.describe;\n    exports.teardown = context.teardown || context.afterEach;\n    exports.test = context.test || context.it;\n    exports.run = context.run;\n  });\n\n  return this;\n};\n\n/**\n * Load registered files.\n *\n * @api private\n */\nMocha.prototype.loadFiles = function (fn) {\n  var self = this;\n  var suite = this.suite;\n  this.files.forEach(function (file) {\n    file = path.resolve(file);\n    suite.emit('pre-require', global, file, self);\n    suite.emit('require', require(file), file, self);\n    suite.emit('post-require', global, file, self);\n  });\n  fn && fn();\n};\n\n/**\n * Enable growl support.\n *\n * @api private\n */\nMocha.prototype._growl = function (runner, reporter) {\n  var notify = require('growl');\n\n  runner.on('end', function () {\n    var stats = reporter.stats;\n    if (stats.failures) {\n      var msg = stats.failures + ' of ' + runner.total + ' tests failed';\n      notify(msg, { name: 'mocha', title: 'Failed', image: image('error') });\n    } else {\n      notify(stats.passes + ' tests passed in ' + stats.duration + 'ms', {\n        name: 'mocha',\n        title: 'Passed',\n        image: image('ok')\n      });\n    }\n  });\n};\n\n/**\n * Escape string and add it to grep as a regexp.\n *\n * @api public\n * @param str\n * @returns {Mocha}\n */\nMocha.prototype.fgrep = function (str) {\n  return this.grep(new RegExp(escapeRe(str)));\n};\n\n/**\n * Add regexp to grep, if `re` is a string it is escaped.\n *\n * @param {RegExp|String} re\n * @return {Mocha}\n * @api public\n * @param {RegExp|string} re\n * @return {Mocha}\n */\nMocha.prototype.grep = function (re) {\n  if (utils.isString(re)) {\n    // extract args if it's regex-like, i.e: [string, pattern, flag]\n    var arg = re.match(/^\\/(.*)\\/(g|i|)$|.*/);\n    this.options.grep = new RegExp(arg[1] || arg[0], arg[2]);\n  } else {\n    this.options.grep = re;\n  }\n  return this;\n};\n/**\n * Invert `.grep()` matches.\n *\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.invert = function () {\n  this.options.invert = true;\n  return this;\n};\n\n/**\n * Ignore global leaks.\n *\n * @param {Boolean} ignore\n * @return {Mocha}\n * @api public\n * @param {boolean} ignore\n * @return {Mocha}\n */\nMocha.prototype.ignoreLeaks = function (ignore) {\n  this.options.ignoreLeaks = Boolean(ignore);\n  return this;\n};\n\n/**\n * Enable global leak checking.\n *\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.checkLeaks = function () {\n  this.options.ignoreLeaks = false;\n  return this;\n};\n\n/**\n * Display long stack-trace on failing\n *\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.fullTrace = function () {\n  this.options.fullStackTrace = true;\n  return this;\n};\n\n/**\n * Enable growl support.\n *\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.growl = function () {\n  this.options.growl = true;\n  return this;\n};\n\n/**\n * Ignore `globals` array or string.\n *\n * @param {Array|String} globals\n * @return {Mocha}\n * @api public\n * @param {Array|string} globals\n * @return {Mocha}\n */\nMocha.prototype.globals = function (globals) {\n  this.options.globals = (this.options.globals || []).concat(globals);\n  return this;\n};\n\n/**\n * Emit color output.\n *\n * @param {Boolean} colors\n * @return {Mocha}\n * @api public\n * @param {boolean} colors\n * @return {Mocha}\n */\nMocha.prototype.useColors = function (colors) {\n  if (colors !== undefined) {\n    this.options.useColors = colors;\n  }\n  return this;\n};\n\n/**\n * Use inline diffs rather than +/-.\n *\n * @param {Boolean} inlineDiffs\n * @return {Mocha}\n * @api public\n * @param {boolean} inlineDiffs\n * @return {Mocha}\n */\nMocha.prototype.useInlineDiffs = function (inlineDiffs) {\n  this.options.useInlineDiffs = inlineDiffs !== undefined && inlineDiffs;\n  return this;\n};\n\n/**\n * Set the timeout in milliseconds.\n *\n * @param {Number} timeout\n * @return {Mocha}\n * @api public\n * @param {number} timeout\n * @return {Mocha}\n */\nMocha.prototype.timeout = function (timeout) {\n  this.suite.timeout(timeout);\n  return this;\n};\n\n/**\n * Set the number of times to retry failed tests.\n *\n * @param {Number} retry times\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.retries = function (n) {\n  this.suite.retries(n);\n  return this;\n};\n\n/**\n * Set slowness threshold in milliseconds.\n *\n * @param {Number} slow\n * @return {Mocha}\n * @api public\n * @param {number} slow\n * @return {Mocha}\n */\nMocha.prototype.slow = function (slow) {\n  this.suite.slow(slow);\n  return this;\n};\n\n/**\n * Enable timeouts.\n *\n * @param {Boolean} enabled\n * @return {Mocha}\n * @api public\n * @param {boolean} enabled\n * @return {Mocha}\n */\nMocha.prototype.enableTimeouts = function (enabled) {\n  this.suite.enableTimeouts(arguments.length && enabled !== undefined ? enabled : true);\n  return this;\n};\n\n/**\n * Makes all tests async (accepting a callback)\n *\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.asyncOnly = function () {\n  this.options.asyncOnly = true;\n  return this;\n};\n\n/**\n * Disable syntax highlighting (in browser).\n *\n * @api public\n */\nMocha.prototype.noHighlighting = function () {\n  this.options.noHighlighting = true;\n  return this;\n};\n\n/**\n * Enable uncaught errors to propagate (in browser).\n *\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.allowUncaught = function () {\n  this.options.allowUncaught = true;\n  return this;\n};\n\n/**\n * Delay root suite execution.\n * @returns {Mocha}\n */\nMocha.prototype.delay = function delay () {\n  this.options.delay = true;\n  return this;\n};\n\n/**\n * Run tests and invoke `fn()` when complete.\n *\n * @api public\n * @param {Function} fn\n * @return {Runner}\n */\nMocha.prototype.run = function (fn) {\n  if (this.files.length) {\n    this.loadFiles();\n  }\n  var suite = this.suite;\n  var options = this.options;\n  options.files = this.files;\n  var runner = new exports.Runner(suite, options.delay);\n  var reporter = new this._reporter(runner, options);\n  runner.ignoreLeaks = options.ignoreLeaks !== false;\n  runner.fullStackTrace = options.fullStackTrace;\n  runner.hasOnly = options.hasOnly;\n  runner.asyncOnly = options.asyncOnly;\n  runner.allowUncaught = options.allowUncaught;\n  if (options.grep) {\n    runner.grep(options.grep, options.invert);\n  }\n  if (options.globals) {\n    runner.globals(options.globals);\n  }\n  if (options.growl) {\n    this._growl(runner, reporter);\n  }\n  if (options.useColors !== undefined) {\n    exports.reporters.Base.useColors = options.useColors;\n  }\n  exports.reporters.Base.inlineDiffs = options.useInlineDiffs;\n\n  function done (failures) {\n    if (reporter.done) {\n      reporter.done(failures, fn);\n    } else {\n      fn && fn(failures);\n    }\n  }\n\n  return runner.run(done);\n};\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},\"/lib\")\n},{\"./context\":6,\"./hook\":7,\"./interfaces\":11,\"./reporters\":21,\"./runnable\":33,\"./runner\":34,\"./suite\":35,\"./test\":36,\"./utils\":38,\"_process\":67,\"escape-string-regexp\":47,\"growl\":49,\"path\":42}],15:[function(require,module,exports){\n'use strict';\n\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @api public\n * @param {string|number} val\n * @param {Object} options\n * @return {string|number}\n */\nmodule.exports = function (val, options) {\n  options = options || {};\n  if (typeof val === 'string') {\n    return parse(val);\n  }\n  // https://github.com/mochajs/mocha/pull/1035\n  return options['long'] ? longFormat(val) : shortFormat(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @api private\n * @param {string} str\n * @return {number}\n */\nfunction parse (str) {\n  var match = (/^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i).exec(str);\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 's':\n      return n * s;\n    case 'ms':\n      return n;\n    default:\n      // No default case\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {string}\n */\nfunction shortFormat (ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {string}\n */\nfunction longFormat (ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n *\n * @api private\n * @param {number} ms\n * @param {number} n\n * @param {string} name\n */\nfunction plural (ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\n/**\n * Expose `Pending`.\n */\n\nmodule.exports = Pending;\n\n/**\n * Initialize a new `Pending` error with the given message.\n *\n * @param {string} message\n */\nfunction Pending (message) {\n  this.message = message;\n}\n\n},{}],17:[function(require,module,exports){\n(function (process,global){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar diff = require('diff');\nvar ms = require('../ms');\nvar utils = require('../utils');\nvar supportsColor = process.browser ? null : require('supports-color');\n\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n\n/**\n * Save timer references to avoid Sinon interfering.\n * See: https://github.com/mochajs/mocha/issues/237\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = tty.isatty(1) && tty.isatty(2);\n\n/**\n * Enable coloring by default, except in the browser interface.\n */\n\nexports.useColors = !process.browser && (supportsColor || (process.env.MOCHA_COLORS !== undefined));\n\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n\n/**\n * Default color map.\n */\n\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31\n};\n\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: '✓',\n  err: '✖',\n  dot: '․',\n  comma: ',',\n  bang: '!'\n};\n\n// With node.js on Windows: use symbols available in terminal default fonts\nif (process.platform === 'win32') {\n  exports.symbols.ok = '\\u221A';\n  exports.symbols.err = '\\u00D7';\n  exports.symbols.dot = '.';\n}\n\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @param {string} type\n * @param {string} str\n * @return {string}\n * @api private\n */\nvar color = exports.color = function (type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Expose term window size, with some defaults for when stderr is not a tty.\n */\n\nexports.window = {\n  width: 75\n};\n\nif (isatty) {\n  exports.window.width = process.stdout.getWindowSize\n      ? process.stdout.getWindowSize(1)[0]\n      : tty.getWindowSize()[1];\n}\n\n/**\n * Expose some basic cursor interactions that are common among reporters.\n */\n\nexports.cursor = {\n  hide: function () {\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n\n  show: function () {\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n\n  deleteLine: function () {\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n\n  beginningOfLine: function () {\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n\n  CR: function () {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\n/**\n * Outut the given `failures` as a list.\n *\n * @param {Array} failures\n * @api public\n */\n\nexports.list = function (failures) {\n  console.log();\n  failures.forEach(function (test, i) {\n    // format\n    var fmt = color('error title', '  %s) %s:\\n') +\n      color('error message', '     %s') +\n      color('error stack', '\\n%s\\n');\n\n    // msg\n    var msg;\n    var err = test.err;\n    var message;\n    if (err.message && typeof err.message.toString === 'function') {\n      message = err.message + '';\n    } else if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else {\n      message = '';\n    }\n    var stack = err.stack || message;\n    var index = message ? stack.indexOf(message) : -1;\n    var actual = err.actual;\n    var expected = err.expected;\n    var escape = true;\n\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index);\n      // remove msg from stack\n      stack = stack.slice(index + 1);\n    }\n\n    // uncaught\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    }\n    // explicitly show diff\n    if (err.showDiff !== false && sameType(actual, expected) && expected !== undefined) {\n      escape = false;\n      if (!(utils.isString(actual) && utils.isString(expected))) {\n        err.actual = actual = utils.stringify(actual);\n        err.expected = expected = utils.stringify(expected);\n      }\n\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n\n      if (exports.inlineDiffs) {\n        msg += inlineDiff(err, escape);\n      } else {\n        msg += unifiedDiff(err, escape);\n      }\n    }\n\n    // indent stack trace\n    stack = stack.replace(/^/gm, '  ');\n\n    console.log(fmt, (i + 1), test.fullTitle(), msg, stack);\n  });\n};\n\n/**\n * Initialize a new `Base` reporter.\n *\n * All other reporters generally\n * inherit from this reporter, providing\n * stats such as test duration, number\n * of tests passed / failed etc.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Base (runner) {\n  var stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 };\n  var failures = this.failures = [];\n\n  if (!runner) {\n    return;\n  }\n  this.runner = runner;\n\n  runner.stats = stats;\n\n  runner.on('start', function () {\n    stats.start = new Date();\n  });\n\n  runner.on('suite', function (suite) {\n    stats.suites = stats.suites || 0;\n    suite.root || stats.suites++;\n  });\n\n  runner.on('test end', function () {\n    stats.tests = stats.tests || 0;\n    stats.tests++;\n  });\n\n  runner.on('pass', function (test) {\n    stats.passes = stats.passes || 0;\n\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n\n    stats.passes++;\n  });\n\n  runner.on('fail', function (test, err) {\n    stats.failures = stats.failures || 0;\n    stats.failures++;\n    test.err = err;\n    failures.push(test);\n  });\n\n  runner.on('end', function () {\n    stats.end = new Date();\n    stats.duration = new Date() - stats.start;\n  });\n\n  runner.on('pending', function () {\n    stats.pending++;\n  });\n}\n\n/**\n * Output common epilogue used by many of\n * the bundled reporters.\n *\n * @api public\n */\nBase.prototype.epilogue = function () {\n  var stats = this.stats;\n  var fmt;\n\n  console.log();\n\n  // passes\n  fmt = color('bright pass', ' ') +\n    color('green', ' %d passing') +\n    color('light', ' (%s)');\n\n  console.log(fmt,\n    stats.passes || 0,\n    ms(stats.duration));\n\n  // pending\n  if (stats.pending) {\n    fmt = color('pending', ' ') +\n      color('pending', ' %d pending');\n\n    console.log(fmt, stats.pending);\n  }\n\n  // failures\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n\n    console.log(fmt, stats.failures);\n\n    Base.list(this.failures);\n    console.log();\n  }\n\n  console.log();\n};\n\n/**\n * Pad the given `str` to `len`.\n *\n * @api private\n * @param {string} str\n * @param {string} len\n * @return {string}\n */\nfunction pad (str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n/**\n * Returns an inline diff between 2 strings with coloured ANSI output\n *\n * @api private\n * @param {Error} err with actual/expected\n * @param {boolean} escape\n * @return {string} Diff\n */\nfunction inlineDiff (err, escape) {\n  var msg = errorDiff(err, 'WordsWithSpace', escape);\n\n  // linenos\n  var lines = msg.split('\\n');\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines.map(function (str, i) {\n      return pad(++i, width) + ' |' + ' ' + str;\n    }).join('\\n');\n  }\n\n  // legend\n  msg = '\\n' +\n    color('diff removed', 'actual') +\n    ' ' +\n    color('diff added', 'expected') +\n    '\\n\\n' +\n    msg +\n    '\\n';\n\n  // indent\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n\n/**\n * Returns a unified diff between two strings.\n *\n * @api private\n * @param {Error} err with actual/expected\n * @param {boolean} escape\n * @return {string} The diff.\n */\nfunction unifiedDiff (err, escape) {\n  var indent = '      ';\n  function cleanUp (line) {\n    if (escape) {\n      line = escapeInvisibles(line);\n    }\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n    if (line.match(/@@/)) {\n      return null;\n    }\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n    return indent + line;\n  }\n  function notBlank (line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n  var msg = diff.createPatch('string', err.actual, err.expected);\n  var lines = msg.split('\\n').splice(4);\n  return '\\n      ' +\n    colorLines('diff added', '+ expected') + ' ' +\n    colorLines('diff removed', '- actual') +\n    '\\n\\n' +\n    lines.map(cleanUp).filter(notBlank).join('\\n');\n}\n\n/**\n * Return a character diff for `err`.\n *\n * @api private\n * @param {Error} err\n * @param {string} type\n * @param {boolean} escape\n * @return {string}\n */\nfunction errorDiff (err, type, escape) {\n  var actual = escape ? escapeInvisibles(err.actual) : err.actual;\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;\n  return diff['diff' + type](actual, expected).map(function (str) {\n    if (str.added) {\n      return colorLines('diff added', str.value);\n    }\n    if (str.removed) {\n      return colorLines('diff removed', str.value);\n    }\n    return str.value;\n  }).join('');\n}\n\n/**\n * Returns a string with all invisible characters in plain text\n *\n * @api private\n * @param {string} line\n * @return {string}\n */\nfunction escapeInvisibles (line) {\n  return line.replace(/\\t/g, '<tab>')\n    .replace(/\\r/g, '<CR>')\n    .replace(/\\n/g, '<LF>\\n');\n}\n\n/**\n * Color lines for `str`, using the color `name`.\n *\n * @api private\n * @param {string} name\n * @param {string} str\n * @return {string}\n */\nfunction colorLines (name, str) {\n  return str.split('\\n').map(function (str) {\n    return color(name, str);\n  }).join('\\n');\n}\n\n/**\n * Object#toString reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Check that a / b have the same type.\n *\n * @api private\n * @param {Object} a\n * @param {Object} b\n * @return {boolean}\n */\nfunction sameType (a, b) {\n  return objToString.call(a) === objToString.call(b);\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../ms\":15,\"../utils\":38,\"_process\":67,\"diff\":46,\"supports-color\":42,\"tty\":5}],18:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\n\n/**\n * Expose `Doc`.\n */\n\nexports = module.exports = Doc;\n\n/**\n * Initialize a new `Doc` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\nfunction Doc (runner) {\n  Base.call(this, runner);\n\n  var indents = 2;\n\n  function indent () {\n    return Array(indents).join('  ');\n  }\n\n  runner.on('suite', function (suite) {\n    if (suite.root) {\n      return;\n    }\n    ++indents;\n    console.log('%s<section class=\"suite\">', indent());\n    ++indents;\n    console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));\n    console.log('%s<dl>', indent());\n  });\n\n  runner.on('suite end', function (suite) {\n    if (suite.root) {\n      return;\n    }\n    console.log('%s</dl>', indent());\n    --indents;\n    console.log('%s</section>', indent());\n    --indents;\n  });\n\n  runner.on('pass', function (test) {\n    console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));\n    var code = utils.escape(utils.clean(test.body));\n    console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);\n  });\n\n  runner.on('fail', function (test, err) {\n    console.log('%s  <dt class=\"error\">%s</dt>', indent(), utils.escape(test.title));\n    var code = utils.escape(utils.clean(test.body));\n    console.log('%s  <dd class=\"error\"><pre><code>%s</code></pre></dd>', indent(), code);\n    console.log('%s  <dd class=\"error\">%s</dd>', indent(), utils.escape(err));\n  });\n}\n\n},{\"../utils\":38,\"./base\":17}],19:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar color = Base.color;\n\n/**\n * Expose `Dot`.\n */\n\nexports = module.exports = Dot;\n\n/**\n * Initialize a new `Dot` matrix test reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction Dot (runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var width = Base.window.width * 0.75 | 0;\n  var n = -1;\n\n  runner.on('start', function () {\n    process.stdout.write('\\n');\n  });\n\n  runner.on('pending', function () {\n    if (++n % width === 0) {\n      process.stdout.write('\\n  ');\n    }\n    process.stdout.write(color('pending', Base.symbols.comma));\n  });\n\n  runner.on('pass', function (test) {\n    if (++n % width === 0) {\n      process.stdout.write('\\n  ');\n    }\n    if (test.speed === 'slow') {\n      process.stdout.write(color('bright yellow', Base.symbols.dot));\n    } else {\n      process.stdout.write(color(test.speed, Base.symbols.dot));\n    }\n  });\n\n  runner.on('fail', function () {\n    if (++n % width === 0) {\n      process.stdout.write('\\n  ');\n    }\n    process.stdout.write(color('fail', Base.symbols.bang));\n  });\n\n  runner.on('end', function () {\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Dot, Base);\n\n}).call(this,require('_process'))\n},{\"../utils\":38,\"./base\":17,\"_process\":67}],20:[function(require,module,exports){\n(function (global){\n'use strict';\n\n/* eslint-env browser */\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\nvar Progress = require('../browser/progress');\nvar escapeRe = require('escape-string-regexp');\nvar escape = utils.escape;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Expose `HTML`.\n */\n\nexports = module.exports = HTML;\n\n/**\n * Stats template.\n */\n\nvar statsTemplate = '<ul id=\"mocha-stats\">' +\n  '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>' +\n  '<li class=\"passes\"><a href=\"javascript:void(0);\">passes:</a> <em>0</em></li>' +\n  '<li class=\"failures\"><a href=\"javascript:void(0);\">failures:</a> <em>0</em></li>' +\n  '<li class=\"duration\">duration: <em>0</em>s</li>' +\n  '</ul>';\n\n/**\n * Initialize a new `HTML` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction HTML (runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var stats = this.stats;\n  var stat = fragment(statsTemplate);\n  var items = stat.getElementsByTagName('li');\n  var passes = items[1].getElementsByTagName('em')[0];\n  var passesLink = items[1].getElementsByTagName('a')[0];\n  var failures = items[2].getElementsByTagName('em')[0];\n  var failuresLink = items[2].getElementsByTagName('a')[0];\n  var duration = items[3].getElementsByTagName('em')[0];\n  var canvas = stat.getElementsByTagName('canvas')[0];\n  var report = fragment('<ul id=\"mocha-report\"></ul>');\n  var stack = [report];\n  var progress;\n  var ctx;\n  var root = document.getElementById('mocha');\n\n  if (canvas.getContext) {\n    var ratio = window.devicePixelRatio || 1;\n    canvas.style.width = canvas.width;\n    canvas.style.height = canvas.height;\n    canvas.width *= ratio;\n    canvas.height *= ratio;\n    ctx = canvas.getContext('2d');\n    ctx.scale(ratio, ratio);\n    progress = new Progress();\n  }\n\n  if (!root) {\n    return error('#mocha div missing, add it to your document');\n  }\n\n  // pass toggle\n  on(passesLink, 'click', function (evt) {\n    evt.preventDefault();\n    unhide();\n    var name = (/pass/).test(report.className) ? '' : ' pass';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) {\n      hideSuitesWithout('test pass');\n    }\n  });\n\n  // failure toggle\n  on(failuresLink, 'click', function (evt) {\n    evt.preventDefault();\n    unhide();\n    var name = (/fail/).test(report.className) ? '' : ' fail';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) {\n      hideSuitesWithout('test fail');\n    }\n  });\n\n  root.appendChild(stat);\n  root.appendChild(report);\n\n  if (progress) {\n    progress.size(40);\n  }\n\n  runner.on('suite', function (suite) {\n    if (suite.root) {\n      return;\n    }\n\n    // suite\n    var url = self.suiteURL(suite);\n    var el = fragment('<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>', url, escape(suite.title));\n\n    // container\n    stack[0].appendChild(el);\n    stack.unshift(document.createElement('ul'));\n    el.appendChild(stack[0]);\n  });\n\n  runner.on('suite end', function (suite) {\n    if (suite.root) {\n      updateStats();\n      return;\n    }\n    stack.shift();\n  });\n\n  runner.on('pass', function (test) {\n    var url = self.testURL(test);\n    var markup = '<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> ' +\n      '<a href=\"%s\" class=\"replay\">‣</a></h2></li>';\n    var el = fragment(markup, test.speed, test.title, test.duration, url);\n    self.addCodeToggle(el, test.body);\n    appendToStack(el);\n    updateStats();\n  });\n\n  runner.on('fail', function (test) {\n    var el = fragment('<li class=\"test fail\"><h2>%e <a href=\"%e\" class=\"replay\">‣</a></h2></li>',\n      test.title, self.testURL(test));\n    var stackString; // Note: Includes leading newline\n    var message = test.err.toString();\n\n    // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we\n    // check for the result of the stringifying.\n    if (message === '[object Error]') {\n      message = test.err.message;\n    }\n\n    if (test.err.stack) {\n      var indexOfMessage = test.err.stack.indexOf(test.err.message);\n      if (indexOfMessage === -1) {\n        stackString = test.err.stack;\n      } else {\n        stackString = test.err.stack.substr(test.err.message.length + indexOfMessage);\n      }\n    } else if (test.err.sourceURL && test.err.line !== undefined) {\n      // Safari doesn't give you a stack. Let's at least provide a source line.\n      stackString = '\\n(' + test.err.sourceURL + ':' + test.err.line + ')';\n    }\n\n    stackString = stackString || '';\n\n    if (test.err.htmlMessage && stackString) {\n      el.appendChild(fragment('<div class=\"html-error\">%s\\n<pre class=\"error\">%e</pre></div>',\n        test.err.htmlMessage, stackString));\n    } else if (test.err.htmlMessage) {\n      el.appendChild(fragment('<div class=\"html-error\">%s</div>', test.err.htmlMessage));\n    } else {\n      el.appendChild(fragment('<pre class=\"error\">%e%e</pre>', message, stackString));\n    }\n\n    self.addCodeToggle(el, test.body);\n    appendToStack(el);\n    updateStats();\n  });\n\n  runner.on('pending', function (test) {\n    var el = fragment('<li class=\"test pass pending\"><h2>%e</h2></li>', test.title);\n    appendToStack(el);\n    updateStats();\n  });\n\n  function appendToStack (el) {\n    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.\n    if (stack[0]) {\n      stack[0].appendChild(el);\n    }\n  }\n\n  function updateStats () {\n    // TODO: add to stats\n    var percent = stats.tests / runner.total * 100 | 0;\n    if (progress) {\n      progress.update(percent).draw(ctx);\n    }\n\n    // update stats\n    var ms = new Date() - stats.start;\n    text(passes, stats.passes);\n    text(failures, stats.failures);\n    text(duration, (ms / 1000).toFixed(2));\n  }\n}\n\n/**\n * Makes a URL, preserving querystring (\"search\") parameters.\n *\n * @param {string} s\n * @return {string} A new URL.\n */\nfunction makeUrl (s) {\n  var search = window.location.search;\n\n  // Remove previous grep query parameter if present\n  if (search) {\n    search = search.replace(/[?&]grep=[^&\\s]*/g, '').replace(/^&/, '?');\n  }\n\n  return window.location.pathname + (search ? search + '&' : '?') + 'grep=' + encodeURIComponent(escapeRe(s));\n}\n\n/**\n * Provide suite URL.\n *\n * @param {Object} [suite]\n */\nHTML.prototype.suiteURL = function (suite) {\n  return makeUrl(suite.fullTitle());\n};\n\n/**\n * Provide test URL.\n *\n * @param {Object} [test]\n */\nHTML.prototype.testURL = function (test) {\n  return makeUrl(test.fullTitle());\n};\n\n/**\n * Adds code toggle functionality for the provided test's list element.\n *\n * @param {HTMLLIElement} el\n * @param {string} contents\n */\nHTML.prototype.addCodeToggle = function (el, contents) {\n  var h2 = el.getElementsByTagName('h2')[0];\n\n  on(h2, 'click', function () {\n    pre.style.display = pre.style.display === 'none' ? 'block' : 'none';\n  });\n\n  var pre = fragment('<pre><code>%e</code></pre>', utils.clean(contents));\n  el.appendChild(pre);\n  pre.style.display = 'none';\n};\n\n/**\n * Display error `msg`.\n *\n * @param {string} msg\n */\nfunction error (msg) {\n  document.body.appendChild(fragment('<div id=\"mocha-error\">%s</div>', msg));\n}\n\n/**\n * Return a DOM fragment from `html`.\n *\n * @param {string} html\n */\nfunction fragment (html) {\n  var args = arguments;\n  var div = document.createElement('div');\n  var i = 1;\n\n  div.innerHTML = html.replace(/%([se])/g, function (_, type) {\n    switch (type) {\n      case 's': return String(args[i++]);\n      case 'e': return escape(args[i++]);\n      // no default\n    }\n  });\n\n  return div.firstChild;\n}\n\n/**\n * Check for suites that do not have elements\n * with `classname`, and hide them.\n *\n * @param {text} classname\n */\nfunction hideSuitesWithout (classname) {\n  var suites = document.getElementsByClassName('suite');\n  for (var i = 0; i < suites.length; i++) {\n    var els = suites[i].getElementsByClassName(classname);\n    if (!els.length) {\n      suites[i].className += ' hidden';\n    }\n  }\n}\n\n/**\n * Unhide .hidden suites.\n */\nfunction unhide () {\n  var els = document.getElementsByClassName('suite hidden');\n  for (var i = 0; i < els.length; ++i) {\n    els[i].className = els[i].className.replace('suite hidden', 'suite');\n  }\n}\n\n/**\n * Set an element's text contents.\n *\n * @param {HTMLElement} el\n * @param {string} contents\n */\nfunction text (el, contents) {\n  if (el.textContent) {\n    el.textContent = contents;\n  } else {\n    el.innerText = contents;\n  }\n}\n\n/**\n * Listen on `event` with callback `fn`.\n */\nfunction on (el, event, fn) {\n  if (el.addEventListener) {\n    el.addEventListener(event, fn, false);\n  } else {\n    el.attachEvent('on' + event, fn);\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../browser/progress\":4,\"../utils\":38,\"./base\":17,\"escape-string-regexp\":47}],21:[function(require,module,exports){\n'use strict';\n\n// Alias exports to a their normalized format Mocha#reporter to prevent a need\n// for dynamic (try/catch) requires, which Browserify doesn't handle.\nexports.Base = exports.base = require('./base');\nexports.Dot = exports.dot = require('./dot');\nexports.Doc = exports.doc = require('./doc');\nexports.TAP = exports.tap = require('./tap');\nexports.JSON = exports.json = require('./json');\nexports.HTML = exports.html = require('./html');\nexports.List = exports.list = require('./list');\nexports.Min = exports.min = require('./min');\nexports.Spec = exports.spec = require('./spec');\nexports.Nyan = exports.nyan = require('./nyan');\nexports.XUnit = exports.xunit = require('./xunit');\nexports.Markdown = exports.markdown = require('./markdown');\nexports.Progress = exports.progress = require('./progress');\nexports.Landing = exports.landing = require('./landing');\nexports.JSONStream = exports['json-stream'] = require('./json-stream');\n\n},{\"./base\":17,\"./doc\":18,\"./dot\":19,\"./html\":20,\"./json\":23,\"./json-stream\":22,\"./landing\":24,\"./list\":25,\"./markdown\":26,\"./min\":27,\"./nyan\":28,\"./progress\":29,\"./spec\":30,\"./tap\":31,\"./xunit\":32}],22:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar JSON = require('json3');\n\n/**\n * Expose `List`.\n */\n\nexports = module.exports = List;\n\n/**\n * Initialize a new `List` test reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction List (runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var total = runner.total;\n\n  runner.on('start', function () {\n    console.log(JSON.stringify(['start', { total: total }]));\n  });\n\n  runner.on('pass', function (test) {\n    console.log(JSON.stringify(['pass', clean(test)]));\n  });\n\n  runner.on('fail', function (test, err) {\n    test = clean(test);\n    test.err = err.message;\n    test.stack = err.stack || null;\n    console.log(JSON.stringify(['fail', test]));\n  });\n\n  runner.on('end', function () {\n    process.stdout.write(JSON.stringify(['end', self.stats]));\n  });\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @api private\n * @param {Object} test\n * @return {Object}\n */\nfunction clean (test) {\n  return {\n    title: test.title,\n    fullTitle: test.fullTitle(),\n    duration: test.duration,\n    currentRetry: test.currentRetry()\n  };\n}\n\n}).call(this,require('_process'))\n},{\"./base\":17,\"_process\":67,\"json3\":54}],23:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\n/**\n * Expose `JSON`.\n */\n\nexports = module.exports = JSONReporter;\n\n/**\n * Initialize a new `JSON` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction JSONReporter (runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var tests = [];\n  var pending = [];\n  var failures = [];\n  var passes = [];\n\n  runner.on('test end', function (test) {\n    tests.push(test);\n  });\n\n  runner.on('pass', function (test) {\n    passes.push(test);\n  });\n\n  runner.on('fail', function (test) {\n    failures.push(test);\n  });\n\n  runner.on('pending', function (test) {\n    pending.push(test);\n  });\n\n  runner.on('end', function () {\n    var obj = {\n      stats: self.stats,\n      tests: tests.map(clean),\n      pending: pending.map(clean),\n      failures: failures.map(clean),\n      passes: passes.map(clean)\n    };\n\n    runner.testResults = obj;\n\n    process.stdout.write(JSON.stringify(obj, null, 2));\n  });\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @api private\n * @param {Object} test\n * @return {Object}\n */\nfunction clean (test) {\n  return {\n    title: test.title,\n    fullTitle: test.fullTitle(),\n    duration: test.duration,\n    currentRetry: test.currentRetry(),\n    err: errorJSON(test.err || {})\n  };\n}\n\n/**\n * Transform `error` into a JSON object.\n *\n * @api private\n * @param {Error} err\n * @return {Object}\n */\nfunction errorJSON (err) {\n  var res = {};\n  Object.getOwnPropertyNames(err).forEach(function (key) {\n    res[key] = err[key];\n  }, err);\n  return res;\n}\n\n}).call(this,require('_process'))\n},{\"./base\":17,\"_process\":67}],24:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar cursor = Base.cursor;\nvar color = Base.color;\n\n/**\n * Expose `Landing`.\n */\n\nexports = module.exports = Landing;\n\n/**\n * Airplane color.\n */\n\nBase.colors.plane = 0;\n\n/**\n * Airplane crash color.\n */\n\nBase.colors['plane crash'] = 31;\n\n/**\n * Runway color.\n */\n\nBase.colors.runway = 90;\n\n/**\n * Initialize a new `Landing` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction Landing (runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var width = Base.window.width * 0.75 | 0;\n  var total = runner.total;\n  var stream = process.stdout;\n  var plane = color('plane', '✈');\n  var crashed = -1;\n  var n = 0;\n\n  function runway () {\n    var buf = Array(width).join('-');\n    return '  ' + color('runway', buf);\n  }\n\n  runner.on('start', function () {\n    stream.write('\\n\\n\\n  ');\n    cursor.hide();\n  });\n\n  runner.on('test end', function (test) {\n    // check if the plane crashed\n    var col = crashed === -1 ? width * ++n / total | 0 : crashed;\n\n    // show the crash\n    if (test.state === 'failed') {\n      plane = color('plane crash', '✈');\n      crashed = col;\n    }\n\n    // render landing strip\n    stream.write('\\u001b[' + (width + 1) + 'D\\u001b[2A');\n    stream.write(runway());\n    stream.write('\\n  ');\n    stream.write(color('runway', Array(col).join('⋅')));\n    stream.write(plane);\n    stream.write(color('runway', Array(width - col).join('⋅') + '\\n'));\n    stream.write(runway());\n    stream.write('\\u001b[0m');\n  });\n\n  runner.on('end', function () {\n    cursor.show();\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Landing, Base);\n\n}).call(this,require('_process'))\n},{\"../utils\":38,\"./base\":17,\"_process\":67}],25:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar color = Base.color;\nvar cursor = Base.cursor;\n\n/**\n * Expose `List`.\n */\n\nexports = module.exports = List;\n\n/**\n * Initialize a new `List` test reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction List (runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var n = 0;\n\n  runner.on('start', function () {\n    console.log();\n  });\n\n  runner.on('test', function (test) {\n    process.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));\n  });\n\n  runner.on('pending', function (test) {\n    var fmt = color('checkmark', '  -') +\n      color('pending', ' %s');\n    console.log(fmt, test.fullTitle());\n  });\n\n  runner.on('pass', function (test) {\n    var fmt = color('checkmark', '  ' + Base.symbols.ok) +\n      color('pass', ' %s: ') +\n      color(test.speed, '%dms');\n    cursor.CR();\n    console.log(fmt, test.fullTitle(), test.duration);\n  });\n\n  runner.on('fail', function (test) {\n    cursor.CR();\n    console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());\n  });\n\n  runner.on('end', self.epilogue.bind(self));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(List, Base);\n\n}).call(this,require('_process'))\n},{\"../utils\":38,\"./base\":17,\"_process\":67}],26:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\n\n/**\n * Constants\n */\n\nvar SUITE_PREFIX = '$';\n\n/**\n * Expose `Markdown`.\n */\n\nexports = module.exports = Markdown;\n\n/**\n * Initialize a new `Markdown` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction Markdown (runner) {\n  Base.call(this, runner);\n\n  var level = 0;\n  var buf = '';\n\n  function title (str) {\n    return Array(level).join('#') + ' ' + str;\n  }\n\n  function mapTOC (suite, obj) {\n    var ret = obj;\n    var key = SUITE_PREFIX + suite.title;\n\n    obj = obj[key] = obj[key] || { suite: suite };\n    suite.suites.forEach(function (suite) {\n      mapTOC(suite, obj);\n    });\n\n    return ret;\n  }\n\n  function stringifyTOC (obj, level) {\n    ++level;\n    var buf = '';\n    var link;\n    for (var key in obj) {\n      if (key === 'suite') {\n        continue;\n      }\n      if (key !== SUITE_PREFIX) {\n        link = ' - [' + key.substring(1) + ']';\n        link += '(#' + utils.slug(obj[key].suite.fullTitle()) + ')\\n';\n        buf += Array(level).join('  ') + link;\n      }\n      buf += stringifyTOC(obj[key], level);\n    }\n    return buf;\n  }\n\n  function generateTOC (suite) {\n    var obj = mapTOC(suite, {});\n    return stringifyTOC(obj, 0);\n  }\n\n  generateTOC(runner.suite);\n\n  runner.on('suite', function (suite) {\n    ++level;\n    var slug = utils.slug(suite.fullTitle());\n    buf += '<a name=\"' + slug + '\"></a>' + '\\n';\n    buf += title(suite.title) + '\\n';\n  });\n\n  runner.on('suite end', function () {\n    --level;\n  });\n\n  runner.on('pass', function (test) {\n    var code = utils.clean(test.body);\n    buf += test.title + '.\\n';\n    buf += '\\n```js\\n';\n    buf += code + '\\n';\n    buf += '```\\n\\n';\n  });\n\n  runner.on('end', function () {\n    process.stdout.write('# TOC\\n');\n    process.stdout.write(generateTOC(runner.suite));\n    process.stdout.write(buf);\n  });\n}\n\n}).call(this,require('_process'))\n},{\"../utils\":38,\"./base\":17,\"_process\":67}],27:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\n\n/**\n * Expose `Min`.\n */\n\nexports = module.exports = Min;\n\n/**\n * Initialize a new `Min` minimal test reporter (best used with --watch).\n *\n * @api public\n * @param {Runner} runner\n */\nfunction Min (runner) {\n  Base.call(this, runner);\n\n  runner.on('start', function () {\n    // clear screen\n    process.stdout.write('\\u001b[2J');\n    // set cursor position\n    process.stdout.write('\\u001b[1;3H');\n  });\n\n  runner.on('end', this.epilogue.bind(this));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Min, Base);\n\n}).call(this,require('_process'))\n},{\"../utils\":38,\"./base\":17,\"_process\":67}],28:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\n\n/**\n * Expose `Dot`.\n */\n\nexports = module.exports = NyanCat;\n\n/**\n * Initialize a new `Dot` matrix test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction NyanCat (runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var width = Base.window.width * 0.75 | 0;\n  var nyanCatWidth = this.nyanCatWidth = 11;\n\n  this.colorIndex = 0;\n  this.numberOfLines = 4;\n  this.rainbowColors = self.generateColors();\n  this.scoreboardWidth = 5;\n  this.tick = 0;\n  this.trajectories = [[], [], [], []];\n  this.trajectoryWidthMax = (width - nyanCatWidth);\n\n  runner.on('start', function () {\n    Base.cursor.hide();\n    self.draw();\n  });\n\n  runner.on('pending', function () {\n    self.draw();\n  });\n\n  runner.on('pass', function () {\n    self.draw();\n  });\n\n  runner.on('fail', function () {\n    self.draw();\n  });\n\n  runner.on('end', function () {\n    Base.cursor.show();\n    for (var i = 0; i < self.numberOfLines; i++) {\n      write('\\n');\n    }\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(NyanCat, Base);\n\n/**\n * Draw the nyan cat\n *\n * @api private\n */\n\nNyanCat.prototype.draw = function () {\n  this.appendRainbow();\n  this.drawScoreboard();\n  this.drawRainbow();\n  this.drawNyanCat();\n  this.tick = !this.tick;\n};\n\n/**\n * Draw the \"scoreboard\" showing the number\n * of passes, failures and pending tests.\n *\n * @api private\n */\n\nNyanCat.prototype.drawScoreboard = function () {\n  var stats = this.stats;\n\n  function draw (type, n) {\n    write(' ');\n    write(Base.color(type, n));\n    write('\\n');\n  }\n\n  draw('green', stats.passes);\n  draw('fail', stats.failures);\n  draw('pending', stats.pending);\n  write('\\n');\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Append the rainbow.\n *\n * @api private\n */\n\nNyanCat.prototype.appendRainbow = function () {\n  var segment = this.tick ? '_' : '-';\n  var rainbowified = this.rainbowify(segment);\n\n  for (var index = 0; index < this.numberOfLines; index++) {\n    var trajectory = this.trajectories[index];\n    if (trajectory.length >= this.trajectoryWidthMax) {\n      trajectory.shift();\n    }\n    trajectory.push(rainbowified);\n  }\n};\n\n/**\n * Draw the rainbow.\n *\n * @api private\n */\n\nNyanCat.prototype.drawRainbow = function () {\n  var self = this;\n\n  this.trajectories.forEach(function (line) {\n    write('\\u001b[' + self.scoreboardWidth + 'C');\n    write(line.join(''));\n    write('\\n');\n  });\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Draw the nyan cat\n *\n * @api private\n */\nNyanCat.prototype.drawNyanCat = function () {\n  var self = this;\n  var startWidth = this.scoreboardWidth + this.trajectories[0].length;\n  var dist = '\\u001b[' + startWidth + 'C';\n  var padding = '';\n\n  write(dist);\n  write('_,------,');\n  write('\\n');\n\n  write(dist);\n  padding = self.tick ? '  ' : '   ';\n  write('_|' + padding + '/\\\\_/\\\\ ');\n  write('\\n');\n\n  write(dist);\n  padding = self.tick ? '_' : '__';\n  var tail = self.tick ? '~' : '^';\n  write(tail + '|' + padding + this.face() + ' ');\n  write('\\n');\n\n  write(dist);\n  padding = self.tick ? ' ' : '  ';\n  write(padding + '\"\"  \"\" ');\n  write('\\n');\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Draw nyan cat face.\n *\n * @api private\n * @return {string}\n */\n\nNyanCat.prototype.face = function () {\n  var stats = this.stats;\n  if (stats.failures) {\n    return '( x .x)';\n  } else if (stats.pending) {\n    return '( o .o)';\n  } else if (stats.passes) {\n    return '( ^ .^)';\n  }\n  return '( - .-)';\n};\n\n/**\n * Move cursor up `n`.\n *\n * @api private\n * @param {number} n\n */\n\nNyanCat.prototype.cursorUp = function (n) {\n  write('\\u001b[' + n + 'A');\n};\n\n/**\n * Move cursor down `n`.\n *\n * @api private\n * @param {number} n\n */\n\nNyanCat.prototype.cursorDown = function (n) {\n  write('\\u001b[' + n + 'B');\n};\n\n/**\n * Generate rainbow colors.\n *\n * @api private\n * @return {Array}\n */\nNyanCat.prototype.generateColors = function () {\n  var colors = [];\n\n  for (var i = 0; i < (6 * 7); i++) {\n    var pi3 = Math.floor(Math.PI / 3);\n    var n = (i * (1.0 / 6));\n    var r = Math.floor(3 * Math.sin(n) + 3);\n    var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);\n    var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);\n    colors.push(36 * r + 6 * g + b + 16);\n  }\n\n  return colors;\n};\n\n/**\n * Apply rainbow to the given `str`.\n *\n * @api private\n * @param {string} str\n * @return {string}\n */\nNyanCat.prototype.rainbowify = function (str) {\n  if (!Base.useColors) {\n    return str;\n  }\n  var color = this.rainbowColors[this.colorIndex % this.rainbowColors.length];\n  this.colorIndex += 1;\n  return '\\u001b[38;5;' + color + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Stdout helper.\n *\n * @param {string} string A message to write to stdout.\n */\nfunction write (string) {\n  process.stdout.write(string);\n}\n\n}).call(this,require('_process'))\n},{\"../utils\":38,\"./base\":17,\"_process\":67}],29:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar color = Base.color;\nvar cursor = Base.cursor;\n\n/**\n * Expose `Progress`.\n */\n\nexports = module.exports = Progress;\n\n/**\n * General progress bar color.\n */\n\nBase.colors.progress = 90;\n\n/**\n * Initialize a new `Progress` bar test reporter.\n *\n * @api public\n * @param {Runner} runner\n * @param {Object} options\n */\nfunction Progress (runner, options) {\n  Base.call(this, runner);\n\n  var self = this;\n  var width = Base.window.width * 0.50 | 0;\n  var total = runner.total;\n  var complete = 0;\n  var lastN = -1;\n\n  // default chars\n  options = options || {};\n  options.open = options.open || '[';\n  options.complete = options.complete || '▬';\n  options.incomplete = options.incomplete || Base.symbols.dot;\n  options.close = options.close || ']';\n  options.verbose = false;\n\n  // tests started\n  runner.on('start', function () {\n    console.log();\n    cursor.hide();\n  });\n\n  // tests complete\n  runner.on('test end', function () {\n    complete++;\n\n    var percent = complete / total;\n    var n = width * percent | 0;\n    var i = width - n;\n\n    if (n === lastN && !options.verbose) {\n      // Don't re-render the line if it hasn't changed\n      return;\n    }\n    lastN = n;\n\n    cursor.CR();\n    process.stdout.write('\\u001b[J');\n    process.stdout.write(color('progress', '  ' + options.open));\n    process.stdout.write(Array(n).join(options.complete));\n    process.stdout.write(Array(i).join(options.incomplete));\n    process.stdout.write(color('progress', options.close));\n    if (options.verbose) {\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));\n    }\n  });\n\n  // tests are complete, output some stats\n  // and the failures if any\n  runner.on('end', function () {\n    cursor.show();\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Progress, Base);\n\n}).call(this,require('_process'))\n},{\"../utils\":38,\"./base\":17,\"_process\":67}],30:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar color = Base.color;\n\n/**\n * Expose `Spec`.\n */\n\nexports = module.exports = Spec;\n\n/**\n * Initialize a new `Spec` test reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction Spec (runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var indents = 0;\n  var n = 0;\n\n  function indent () {\n    return Array(indents).join('  ');\n  }\n\n  runner.on('start', function () {\n    console.log();\n  });\n\n  runner.on('suite', function (suite) {\n    ++indents;\n    console.log(color('suite', '%s%s'), indent(), suite.title);\n  });\n\n  runner.on('suite end', function () {\n    --indents;\n    if (indents === 1) {\n      console.log();\n    }\n  });\n\n  runner.on('pending', function (test) {\n    var fmt = indent() + color('pending', '  - %s');\n    console.log(fmt, test.title);\n  });\n\n  runner.on('pass', function (test) {\n    var fmt;\n    if (test.speed === 'fast') {\n      fmt = indent() +\n        color('checkmark', '  ' + Base.symbols.ok) +\n        color('pass', ' %s');\n      console.log(fmt, test.title);\n    } else {\n      fmt = indent() +\n        color('checkmark', '  ' + Base.symbols.ok) +\n        color('pass', ' %s') +\n        color(test.speed, ' (%dms)');\n      console.log(fmt, test.title, test.duration);\n    }\n  });\n\n  runner.on('fail', function (test) {\n    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);\n  });\n\n  runner.on('end', self.epilogue.bind(self));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Spec, Base);\n\n},{\"../utils\":38,\"./base\":17}],31:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\n/**\n * Expose `TAP`.\n */\n\nexports = module.exports = TAP;\n\n/**\n * Initialize a new `TAP` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction TAP (runner) {\n  Base.call(this, runner);\n\n  var n = 1;\n  var passes = 0;\n  var failures = 0;\n\n  runner.on('start', function () {\n    var total = runner.grepTotal(runner.suite);\n    console.log('%d..%d', 1, total);\n  });\n\n  runner.on('test end', function () {\n    ++n;\n  });\n\n  runner.on('pending', function (test) {\n    console.log('ok %d %s # SKIP -', n, title(test));\n  });\n\n  runner.on('pass', function (test) {\n    passes++;\n    console.log('ok %d %s', n, title(test));\n  });\n\n  runner.on('fail', function (test, err) {\n    failures++;\n    console.log('not ok %d %s', n, title(test));\n    if (err.stack) {\n      console.log(err.stack.replace(/^/gm, '  '));\n    }\n  });\n\n  runner.on('end', function () {\n    console.log('# tests ' + (passes + failures));\n    console.log('# pass ' + passes);\n    console.log('# fail ' + failures);\n  });\n}\n\n/**\n * Return a TAP-safe title of `test`\n *\n * @api private\n * @param {Object} test\n * @return {String}\n */\nfunction title (test) {\n  return test.fullTitle().replace(/#/g, '');\n}\n\n},{\"./base\":17}],32:[function(require,module,exports){\n(function (process,global){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\nvar inherits = utils.inherits;\nvar fs = require('fs');\nvar escape = utils.escape;\nvar mkdirp = require('mkdirp');\nvar path = require('path');\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Expose `XUnit`.\n */\n\nexports = module.exports = XUnit;\n\n/**\n * Initialize a new `XUnit` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction XUnit (runner, options) {\n  Base.call(this, runner);\n\n  var stats = this.stats;\n  var tests = [];\n  var self = this;\n\n  if (options && options.reporterOptions && options.reporterOptions.output) {\n    if (!fs.createWriteStream) {\n      throw new Error('file output not supported in browser');\n    }\n    mkdirp.sync(path.dirname(options.reporterOptions.output));\n    self.fileStream = fs.createWriteStream(options.reporterOptions.output);\n  }\n\n  runner.on('pending', function (test) {\n    tests.push(test);\n  });\n\n  runner.on('pass', function (test) {\n    tests.push(test);\n  });\n\n  runner.on('fail', function (test) {\n    tests.push(test);\n  });\n\n  runner.on('end', function () {\n    self.write(tag('testsuite', {\n      name: 'Mocha Tests',\n      tests: stats.tests,\n      failures: stats.failures,\n      errors: stats.failures,\n      skipped: stats.tests - stats.failures - stats.passes,\n      timestamp: (new Date()).toUTCString(),\n      time: (stats.duration / 1000) || 0\n    }, false));\n\n    tests.forEach(function (t) {\n      self.test(t);\n    });\n\n    self.write('</testsuite>');\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(XUnit, Base);\n\n/**\n * Override done to close the stream (if it's a file).\n *\n * @param failures\n * @param {Function} fn\n */\nXUnit.prototype.done = function (failures, fn) {\n  if (this.fileStream) {\n    this.fileStream.end(function () {\n      fn(failures);\n    });\n  } else {\n    fn(failures);\n  }\n};\n\n/**\n * Write out the given line.\n *\n * @param {string} line\n */\nXUnit.prototype.write = function (line) {\n  if (this.fileStream) {\n    this.fileStream.write(line + '\\n');\n  } else if (typeof process === 'object' && process.stdout) {\n    process.stdout.write(line + '\\n');\n  } else {\n    console.log(line);\n  }\n};\n\n/**\n * Output tag for the given `test.`\n *\n * @param {Test} test\n */\nXUnit.prototype.test = function (test) {\n  var attrs = {\n    classname: test.parent.fullTitle(),\n    name: test.title,\n    time: (test.duration / 1000) || 0\n  };\n\n  if (test.state === 'failed') {\n    var err = test.err;\n    this.write(tag('testcase', attrs, false, tag('failure', {}, false, escape(err.message) + '\\n' + escape(err.stack))));\n  } else if (test.isPending()) {\n    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));\n  } else {\n    this.write(tag('testcase', attrs, true));\n  }\n};\n\n/**\n * HTML tag helper.\n *\n * @param name\n * @param attrs\n * @param close\n * @param content\n * @return {string}\n */\nfunction tag (name, attrs, close, content) {\n  var end = close ? '/>' : '>';\n  var pairs = [];\n  var tag;\n\n  for (var key in attrs) {\n    if (Object.prototype.hasOwnProperty.call(attrs, key)) {\n      pairs.push(key + '=\"' + escape(attrs[key]) + '\"');\n    }\n  }\n\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;\n  if (content) {\n    tag += content + '</' + name + end;\n  }\n  return tag;\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../utils\":38,\"./base\":17,\"_process\":67,\"fs\":42,\"mkdirp\":64,\"path\":42}],33:[function(require,module,exports){\n(function (global){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar JSON = require('json3');\nvar Pending = require('./pending');\nvar debug = require('debug')('mocha:runnable');\nvar milliseconds = require('./ms');\nvar utils = require('./utils');\nvar create = require('lodash.create');\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Object#toString().\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Expose `Runnable`.\n */\n\nmodule.exports = Runnable;\n\n/**\n * Initialize a new `Runnable` with the given `title` and callback `fn`.\n *\n * @param {String} title\n * @param {Function} fn\n * @api private\n * @param {string} title\n * @param {Function} fn\n */\nfunction Runnable (title, fn) {\n  this.title = title;\n  this.fn = fn;\n  this.body = (fn || '').toString();\n  this.async = fn && fn.length;\n  this.sync = !this.async;\n  this._timeout = 2000;\n  this._slow = 75;\n  this._enableTimeouts = true;\n  this.timedOut = false;\n  this._trace = new Error('done() called multiple times');\n  this._retries = -1;\n  this._currentRetry = 0;\n  this.pending = false;\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\nRunnable.prototype = create(EventEmitter.prototype, {\n  constructor: Runnable\n});\n\n/**\n * Set & get timeout `ms`.\n *\n * @api private\n * @param {number|string} ms\n * @return {Runnable|number} ms or Runnable instance.\n */\nRunnable.prototype.timeout = function (ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  // see #1652 for reasoning\n  if (ms === 0 || ms > Math.pow(2, 31)) {\n    this._enableTimeouts = false;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('timeout %d', ms);\n  this._timeout = ms;\n  if (this.timer) {\n    this.resetTimeout();\n  }\n  return this;\n};\n\n/**\n * Set & get slow `ms`.\n *\n * @api private\n * @param {number|string} ms\n * @return {Runnable|number} ms or Runnable instance.\n */\nRunnable.prototype.slow = function (ms) {\n  if (typeof ms === 'undefined') {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('timeout %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Set and get whether timeout is `enabled`.\n *\n * @api private\n * @param {boolean} enabled\n * @return {Runnable|boolean} enabled or Runnable instance.\n */\nRunnable.prototype.enableTimeouts = function (enabled) {\n  if (!arguments.length) {\n    return this._enableTimeouts;\n  }\n  debug('enableTimeouts %s', enabled);\n  this._enableTimeouts = enabled;\n  return this;\n};\n\n/**\n * Halt and mark as pending.\n *\n * @api public\n */\nRunnable.prototype.skip = function () {\n  throw new Pending('sync skip');\n};\n\n/**\n * Check if this runnable or its parent suite is marked as pending.\n *\n * @api private\n */\nRunnable.prototype.isPending = function () {\n  return this.pending || (this.parent && this.parent.isPending());\n};\n\n/**\n * Set number of retries.\n *\n * @api private\n */\nRunnable.prototype.retries = function (n) {\n  if (!arguments.length) {\n    return this._retries;\n  }\n  this._retries = n;\n};\n\n/**\n * Get current retry\n *\n * @api private\n */\nRunnable.prototype.currentRetry = function (n) {\n  if (!arguments.length) {\n    return this._currentRetry;\n  }\n  this._currentRetry = n;\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @api public\n * @return {string}\n */\nRunnable.prototype.fullTitle = function () {\n  return this.parent.fullTitle() + ' ' + this.title;\n};\n\n/**\n * Clear the timeout.\n *\n * @api private\n */\nRunnable.prototype.clearTimeout = function () {\n  clearTimeout(this.timer);\n};\n\n/**\n * Inspect the runnable void of private properties.\n *\n * @api private\n * @return {string}\n */\nRunnable.prototype.inspect = function () {\n  return JSON.stringify(this, function (key, val) {\n    if (key[0] === '_') {\n      return;\n    }\n    if (key === 'parent') {\n      return '#<Suite>';\n    }\n    if (key === 'ctx') {\n      return '#<Context>';\n    }\n    return val;\n  }, 2);\n};\n\n/**\n * Reset the timeout.\n *\n * @api private\n */\nRunnable.prototype.resetTimeout = function () {\n  var self = this;\n  var ms = this.timeout() || 1e9;\n\n  if (!this._enableTimeouts) {\n    return;\n  }\n  this.clearTimeout();\n  this.timer = setTimeout(function () {\n    if (!self._enableTimeouts) {\n      return;\n    }\n    self.callback(new Error('Timeout of ' + ms +\n      'ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.'));\n    self.timedOut = true;\n  }, ms);\n};\n\n/**\n * Whitelist a list of globals for this test run.\n *\n * @api private\n * @param {string[]} globals\n */\nRunnable.prototype.globals = function (globals) {\n  if (!arguments.length) {\n    return this._allowedGlobals;\n  }\n  this._allowedGlobals = globals;\n};\n\n/**\n * Run the test and invoke `fn(err)`.\n *\n * @param {Function} fn\n * @api private\n */\nRunnable.prototype.run = function (fn) {\n  var self = this;\n  var start = new Date();\n  var ctx = this.ctx;\n  var finished;\n  var emitted;\n\n  // Sometimes the ctx exists, but it is not runnable\n  if (ctx && ctx.runnable) {\n    ctx.runnable(this);\n  }\n\n  // called multiple times\n  function multiple (err) {\n    if (emitted) {\n      return;\n    }\n    emitted = true;\n    self.emit('error', err || new Error('done() called multiple times; stacktrace may be inaccurate'));\n  }\n\n  // finished\n  function done (err) {\n    var ms = self.timeout();\n    if (self.timedOut) {\n      return;\n    }\n    if (finished) {\n      return multiple(err || self._trace);\n    }\n\n    self.clearTimeout();\n    self.duration = new Date() - start;\n    finished = true;\n    if (!err && self.duration > ms && self._enableTimeouts) {\n      err = new Error('Timeout of ' + ms +\n      'ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.');\n    }\n    fn(err);\n  }\n\n  // for .resetTimeout()\n  this.callback = done;\n\n  // explicit async with `done` argument\n  if (this.async) {\n    this.resetTimeout();\n\n    // allows skip() to be used in an explicit async context\n    this.skip = function asyncSkip () {\n      done(new Pending('async skip call'));\n      // halt execution.  the Runnable will be marked pending\n      // by the previous call, and the uncaught handler will ignore\n      // the failure.\n      throw new Pending('async skip; aborting execution');\n    };\n\n    if (this.allowUncaught) {\n      return callFnAsync(this.fn);\n    }\n    try {\n      callFnAsync(this.fn);\n    } catch (err) {\n      emitted = true;\n      done(utils.getError(err));\n    }\n    return;\n  }\n\n  if (this.allowUncaught) {\n    callFn(this.fn);\n    done();\n    return;\n  }\n\n  // sync or promise-returning\n  try {\n    if (this.isPending()) {\n      done();\n    } else {\n      callFn(this.fn);\n    }\n  } catch (err) {\n    emitted = true;\n    done(utils.getError(err));\n  }\n\n  function callFn (fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result\n        .then(function () {\n          done();\n          // Return null so libraries like bluebird do not warn about\n          // subsequently constructed Promises.\n          return null;\n        },\n        function (reason) {\n          done(reason || new Error('Promise rejected with no or falsy reason'));\n        });\n    } else {\n      if (self.asyncOnly) {\n        return done(new Error('--async-only option in use without declaring `done()` or returning a promise'));\n      }\n\n      done();\n    }\n  }\n\n  function callFnAsync (fn) {\n    var result = fn.call(ctx, function (err) {\n      if (err instanceof Error || toString.call(err) === '[object Error]') {\n        return done(err);\n      }\n      if (err) {\n        if (Object.prototype.toString.call(err) === '[object Object]') {\n          return done(new Error('done() invoked with non-Error: ' +\n            JSON.stringify(err)));\n        }\n        return done(new Error('done() invoked with non-Error: ' + err));\n      }\n      if (result && utils.isPromise(result)) {\n        return done(new Error('Resolution method is overspecified. Specify a callback *or* return a Promise; not both.'));\n      }\n\n      done();\n    });\n  }\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ms\":15,\"./pending\":16,\"./utils\":38,\"debug\":2,\"events\":3,\"json3\":54,\"lodash.create\":60}],34:[function(require,module,exports){\n(function (process,global){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar Pending = require('./pending');\nvar utils = require('./utils');\nvar inherits = utils.inherits;\nvar debug = require('debug')('mocha:runner');\nvar Runnable = require('./runnable');\nvar filter = utils.filter;\nvar indexOf = utils.indexOf;\nvar some = utils.some;\nvar keys = utils.keys;\nvar stackFilter = utils.stackTraceFilter();\nvar stringify = utils.stringify;\nvar type = utils.type;\nvar undefinedError = utils.undefinedError;\nvar isArray = utils.isArray;\n\n/**\n * Non-enumerable globals.\n */\n\nvar globals = [\n  'setTimeout',\n  'clearTimeout',\n  'setInterval',\n  'clearInterval',\n  'XMLHttpRequest',\n  'Date',\n  'setImmediate',\n  'clearImmediate'\n];\n\n/**\n * Expose `Runner`.\n */\n\nmodule.exports = Runner;\n\n/**\n * Initialize a `Runner` for the given `suite`.\n *\n * Events:\n *\n *   - `start`  execution started\n *   - `end`  execution complete\n *   - `suite`  (suite) test suite execution started\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\n *   - `test`  (test) test execution started\n *   - `test end`  (test) test completed\n *   - `hook`  (hook) hook execution started\n *   - `hook end`  (hook) hook complete\n *   - `pass`  (test) test passed\n *   - `fail`  (test, err) test failed\n *   - `pending`  (test) test pending\n *\n * @api public\n * @param {Suite} suite Root suite\n * @param {boolean} [delay] Whether or not to delay execution of root suite\n * until ready.\n */\nfunction Runner (suite, delay) {\n  var self = this;\n  this._globals = [];\n  this._abort = false;\n  this._delay = delay;\n  this.suite = suite;\n  this.started = false;\n  this.total = suite.total();\n  this.failures = 0;\n  this.on('test end', function (test) {\n    self.checkGlobals(test);\n  });\n  this.on('hook end', function (hook) {\n    self.checkGlobals(hook);\n  });\n  this._defaultGrep = /.*/;\n  this.grep(this._defaultGrep);\n  this.globals(this.globalProps().concat(extraGlobals()));\n}\n\n/**\n * Wrapper for setImmediate, process.nextTick, or browser polyfill.\n *\n * @param {Function} fn\n * @api private\n */\nRunner.immediately = global.setImmediate || process.nextTick;\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\ninherits(Runner, EventEmitter);\n\n/**\n * Run tests with full titles matching `re`. Updates runner.total\n * with number of tests matched.\n *\n * @param {RegExp} re\n * @param {Boolean} invert\n * @return {Runner} for chaining\n * @api public\n * @param {RegExp} re\n * @param {boolean} invert\n * @return {Runner} Runner instance.\n */\nRunner.prototype.grep = function (re, invert) {\n  debug('grep %s', re);\n  this._grep = re;\n  this._invert = invert;\n  this.total = this.grepTotal(this.suite);\n  return this;\n};\n\n/**\n * Returns the number of tests matching the grep search for the\n * given suite.\n *\n * @param {Suite} suite\n * @return {Number}\n * @api public\n * @param {Suite} suite\n * @return {number}\n */\nRunner.prototype.grepTotal = function (suite) {\n  var self = this;\n  var total = 0;\n\n  suite.eachTest(function (test) {\n    var match = self._grep.test(test.fullTitle());\n    if (self._invert) {\n      match = !match;\n    }\n    if (match) {\n      total++;\n    }\n  });\n\n  return total;\n};\n\n/**\n * Return a list of global properties.\n *\n * @return {Array}\n * @api private\n */\nRunner.prototype.globalProps = function () {\n  var props = keys(global);\n\n  // non-enumerables\n  for (var i = 0; i < globals.length; ++i) {\n    if (~indexOf(props, globals[i])) {\n      continue;\n    }\n    props.push(globals[i]);\n  }\n\n  return props;\n};\n\n/**\n * Allow the given `arr` of globals.\n *\n * @param {Array} arr\n * @return {Runner} for chaining\n * @api public\n * @param {Array} arr\n * @return {Runner} Runner instance.\n */\nRunner.prototype.globals = function (arr) {\n  if (!arguments.length) {\n    return this._globals;\n  }\n  debug('globals %j', arr);\n  this._globals = this._globals.concat(arr);\n  return this;\n};\n\n/**\n * Check for global variable leaks.\n *\n * @api private\n */\nRunner.prototype.checkGlobals = function (test) {\n  if (this.ignoreLeaks) {\n    return;\n  }\n  var ok = this._globals;\n\n  var globals = this.globalProps();\n  var leaks;\n\n  if (test) {\n    ok = ok.concat(test._allowedGlobals || []);\n  }\n\n  if (this.prevGlobalsLength === globals.length) {\n    return;\n  }\n  this.prevGlobalsLength = globals.length;\n\n  leaks = filterLeaks(ok, globals);\n  this._globals = this._globals.concat(leaks);\n\n  if (leaks.length > 1) {\n    this.fail(test, new Error('global leaks detected: ' + leaks.join(', ') + ''));\n  } else if (leaks.length) {\n    this.fail(test, new Error('global leak detected: ' + leaks[0]));\n  }\n};\n\n/**\n * Fail the given `test`.\n *\n * @api private\n * @param {Test} test\n * @param {Error} err\n */\nRunner.prototype.fail = function (test, err) {\n  if (test.isPending()) {\n    return;\n  }\n\n  ++this.failures;\n  test.state = 'failed';\n\n  if (!(err instanceof Error || err && typeof err.message === 'string')) {\n    err = new Error('the ' + type(err) + ' ' + stringify(err) + ' was thrown, throw an Error :)');\n  }\n\n  try {\n    err.stack = (this.fullStackTrace || !err.stack)\n      ? err.stack\n      : stackFilter(err.stack);\n  } catch (ignored) {\n    // some environments do not take kindly to monkeying with the stack\n  }\n\n  this.emit('fail', test, err);\n};\n\n/**\n * Fail the given `hook` with `err`.\n *\n * Hook failures work in the following pattern:\n * - If bail, then exit\n * - Failed `before` hook skips all tests in a suite and subsuites,\n *   but jumps to corresponding `after` hook\n * - Failed `before each` hook skips remaining tests in a\n *   suite and jumps to corresponding `after each` hook,\n *   which is run only once\n * - Failed `after` hook does not alter\n *   execution order\n * - Failed `after each` hook skips remaining tests in a\n *   suite and subsuites, but executes other `after each`\n *   hooks\n *\n * @api private\n * @param {Hook} hook\n * @param {Error} err\n */\nRunner.prototype.failHook = function (hook, err) {\n  if (hook.ctx && hook.ctx.currentTest) {\n    hook.originalTitle = hook.originalTitle || hook.title;\n    hook.title = hook.originalTitle + ' for \"' + hook.ctx.currentTest.title + '\"';\n  }\n\n  this.fail(hook, err);\n  if (this.suite.bail()) {\n    this.emit('end');\n  }\n};\n\n/**\n * Run hook `name` callbacks and then invoke `fn()`.\n *\n * @api private\n * @param {string} name\n * @param {Function} fn\n */\n\nRunner.prototype.hook = function (name, fn) {\n  var suite = this.suite;\n  var hooks = suite['_' + name];\n  var self = this;\n\n  function next (i) {\n    var hook = hooks[i];\n    if (!hook) {\n      return fn();\n    }\n    self.currentRunnable = hook;\n\n    hook.ctx.currentTest = self.test;\n\n    self.emit('hook', hook);\n\n    if (!hook.listeners('error').length) {\n      hook.on('error', function (err) {\n        self.failHook(hook, err);\n      });\n    }\n\n    hook.run(function (err) {\n      var testError = hook.error();\n      if (testError) {\n        self.fail(self.test, testError);\n      }\n      if (err) {\n        if (err instanceof Pending) {\n          if (name === 'beforeEach' || name === 'afterEach') {\n            self.test.pending = true;\n          } else {\n            utils.forEach(suite.tests, function (test) {\n              test.pending = true;\n            });\n            // a pending hook won't be executed twice.\n            hook.pending = true;\n          }\n        } else {\n          self.failHook(hook, err);\n\n          // stop executing hooks, notify callee of hook err\n          return fn(err);\n        }\n      }\n      self.emit('hook end', hook);\n      delete hook.ctx.currentTest;\n      next(++i);\n    });\n  }\n\n  Runner.immediately(function () {\n    next(0);\n  });\n};\n\n/**\n * Run hook `name` for the given array of `suites`\n * in order, and callback `fn(err, errSuite)`.\n *\n * @api private\n * @param {string} name\n * @param {Array} suites\n * @param {Function} fn\n */\nRunner.prototype.hooks = function (name, suites, fn) {\n  var self = this;\n  var orig = this.suite;\n\n  function next (suite) {\n    self.suite = suite;\n\n    if (!suite) {\n      self.suite = orig;\n      return fn();\n    }\n\n    self.hook(name, function (err) {\n      if (err) {\n        var errSuite = self.suite;\n        self.suite = orig;\n        return fn(err, errSuite);\n      }\n\n      next(suites.pop());\n    });\n  }\n\n  next(suites.pop());\n};\n\n/**\n * Run hooks from the top level down.\n *\n * @param {String} name\n * @param {Function} fn\n * @api private\n */\nRunner.prototype.hookUp = function (name, fn) {\n  var suites = [this.suite].concat(this.parents()).reverse();\n  this.hooks(name, suites, fn);\n};\n\n/**\n * Run hooks from the bottom up.\n *\n * @param {String} name\n * @param {Function} fn\n * @api private\n */\nRunner.prototype.hookDown = function (name, fn) {\n  var suites = [this.suite].concat(this.parents());\n  this.hooks(name, suites, fn);\n};\n\n/**\n * Return an array of parent Suites from\n * closest to furthest.\n *\n * @return {Array}\n * @api private\n */\nRunner.prototype.parents = function () {\n  var suite = this.suite;\n  var suites = [];\n  while (suite.parent) {\n    suite = suite.parent;\n    suites.push(suite);\n  }\n  return suites;\n};\n\n/**\n * Run the current test and callback `fn(err)`.\n *\n * @param {Function} fn\n * @api private\n */\nRunner.prototype.runTest = function (fn) {\n  var self = this;\n  var test = this.test;\n\n  if (!test) {\n    return;\n  }\n  if (this.asyncOnly) {\n    test.asyncOnly = true;\n  }\n\n  if (this.allowUncaught) {\n    test.allowUncaught = true;\n    return test.run(fn);\n  }\n  try {\n    test.on('error', function (err) {\n      self.fail(test, err);\n    });\n    test.run(fn);\n  } catch (err) {\n    fn(err);\n  }\n};\n\n/**\n * Run tests in the given `suite` and invoke the callback `fn()` when complete.\n *\n * @api private\n * @param {Suite} suite\n * @param {Function} fn\n */\nRunner.prototype.runTests = function (suite, fn) {\n  var self = this;\n  var tests = suite.tests.slice();\n  var test;\n\n  function hookErr (_, errSuite, after) {\n    // before/after Each hook for errSuite failed:\n    var orig = self.suite;\n\n    // for failed 'after each' hook start from errSuite parent,\n    // otherwise start from errSuite itself\n    self.suite = after ? errSuite.parent : errSuite;\n\n    if (self.suite) {\n      // call hookUp afterEach\n      self.hookUp('afterEach', function (err2, errSuite2) {\n        self.suite = orig;\n        // some hooks may fail even now\n        if (err2) {\n          return hookErr(err2, errSuite2, true);\n        }\n        // report error suite\n        fn(errSuite);\n      });\n    } else {\n      // there is no need calling other 'after each' hooks\n      self.suite = orig;\n      fn(errSuite);\n    }\n  }\n\n  function next (err, errSuite) {\n    // if we bail after first err\n    if (self.failures && suite._bail) {\n      return fn();\n    }\n\n    if (self._abort) {\n      return fn();\n    }\n\n    if (err) {\n      return hookErr(err, errSuite, true);\n    }\n\n    // next test\n    test = tests.shift();\n\n    // all done\n    if (!test) {\n      return fn();\n    }\n\n    // grep\n    var match = self._grep.test(test.fullTitle());\n    if (self._invert) {\n      match = !match;\n    }\n    if (!match) {\n      // Run immediately only if we have defined a grep. When we\n      // define a grep — It can cause maximum callstack error if\n      // the grep is doing a large recursive loop by neglecting\n      // all tests. The run immediately function also comes with\n      // a performance cost. So we don't want to run immediately\n      // if we run the whole test suite, because running the whole\n      // test suite don't do any immediate recursive loops. Thus,\n      // allowing a JS runtime to breathe.\n      if (self._grep !== self._defaultGrep) {\n        Runner.immediately(next);\n      } else {\n        next();\n      }\n      return;\n    }\n\n    if (test.isPending()) {\n      self.emit('pending', test);\n      self.emit('test end', test);\n      return next();\n    }\n\n    // execute test and hook(s)\n    self.emit('test', self.test = test);\n    self.hookDown('beforeEach', function (err, errSuite) {\n      if (test.isPending()) {\n        self.emit('pending', test);\n        self.emit('test end', test);\n        return next();\n      }\n      if (err) {\n        return hookErr(err, errSuite, false);\n      }\n      self.currentRunnable = self.test;\n      self.runTest(function (err) {\n        test = self.test;\n        if (err) {\n          var retry = test.currentRetry();\n          if (err instanceof Pending) {\n            test.pending = true;\n            self.emit('pending', test);\n          } else if (retry < test.retries()) {\n            var clonedTest = test.clone();\n            clonedTest.currentRetry(retry + 1);\n            tests.unshift(clonedTest);\n\n            // Early return + hook trigger so that it doesn't\n            // increment the count wrong\n            return self.hookUp('afterEach', next);\n          } else {\n            self.fail(test, err);\n          }\n          self.emit('test end', test);\n\n          if (err instanceof Pending) {\n            return next();\n          }\n\n          return self.hookUp('afterEach', next);\n        }\n\n        test.state = 'passed';\n        self.emit('pass', test);\n        self.emit('test end', test);\n        self.hookUp('afterEach', next);\n      });\n    });\n  }\n\n  this.next = next;\n  this.hookErr = hookErr;\n  next();\n};\n\n/**\n * Run the given `suite` and invoke the callback `fn()` when complete.\n *\n * @api private\n * @param {Suite} suite\n * @param {Function} fn\n */\nRunner.prototype.runSuite = function (suite, fn) {\n  var i = 0;\n  var self = this;\n  var total = this.grepTotal(suite);\n  var afterAllHookCalled = false;\n\n  debug('run suite %s', suite.fullTitle());\n\n  if (!total || (self.failures && suite._bail)) {\n    return fn();\n  }\n\n  this.emit('suite', this.suite = suite);\n\n  function next (errSuite) {\n    if (errSuite) {\n      // current suite failed on a hook from errSuite\n      if (errSuite === suite) {\n        // if errSuite is current suite\n        // continue to the next sibling suite\n        return done();\n      }\n      // errSuite is among the parents of current suite\n      // stop execution of errSuite and all sub-suites\n      return done(errSuite);\n    }\n\n    if (self._abort) {\n      return done();\n    }\n\n    var curr = suite.suites[i++];\n    if (!curr) {\n      return done();\n    }\n\n    // Avoid grep neglecting large number of tests causing a\n    // huge recursive loop and thus a maximum call stack error.\n    // See comment in `this.runTests()` for more information.\n    if (self._grep !== self._defaultGrep) {\n      Runner.immediately(function () {\n        self.runSuite(curr, next);\n      });\n    } else {\n      self.runSuite(curr, next);\n    }\n  }\n\n  function done (errSuite) {\n    self.suite = suite;\n    self.nextSuite = next;\n\n    if (afterAllHookCalled) {\n      fn(errSuite);\n    } else {\n      // mark that the afterAll block has been called once\n      // and so can be skipped if there is an error in it.\n      afterAllHookCalled = true;\n\n      // remove reference to test\n      delete self.test;\n\n      self.hook('afterAll', function () {\n        self.emit('suite end', suite);\n        fn(errSuite);\n      });\n    }\n  }\n\n  this.nextSuite = next;\n\n  this.hook('beforeAll', function (err) {\n    if (err) {\n      return done();\n    }\n    self.runTests(suite, next);\n  });\n};\n\n/**\n * Handle uncaught exceptions.\n *\n * @param {Error} err\n * @api private\n */\nRunner.prototype.uncaught = function (err) {\n  if (err) {\n    debug('uncaught exception %s', err !== function () {\n      return this;\n    }.call(err) ? err : (err.message || err));\n  } else {\n    debug('uncaught undefined exception');\n    err = undefinedError();\n  }\n  err.uncaught = true;\n\n  var runnable = this.currentRunnable;\n\n  if (!runnable) {\n    runnable = new Runnable('Uncaught error outside test suite');\n    runnable.parent = this.suite;\n\n    if (this.started) {\n      this.fail(runnable, err);\n    } else {\n      // Can't recover from this failure\n      this.emit('start');\n      this.fail(runnable, err);\n      this.emit('end');\n    }\n\n    return;\n  }\n\n  runnable.clearTimeout();\n\n  // Ignore errors if complete or pending\n  if (runnable.state || runnable.isPending()) {\n    return;\n  }\n  this.fail(runnable, err);\n\n  // recover from test\n  if (runnable.type === 'test') {\n    this.emit('test end', runnable);\n    this.hookUp('afterEach', this.next);\n    return;\n  }\n\n // recover from hooks\n  if (runnable.type === 'hook') {\n    var errSuite = this.suite;\n    // if hook failure is in afterEach block\n    if (runnable.fullTitle().indexOf('after each') > -1) {\n      return this.hookErr(err, errSuite, true);\n    }\n    // if hook failure is in beforeEach block\n    if (runnable.fullTitle().indexOf('before each') > -1) {\n      return this.hookErr(err, errSuite, false);\n    }\n    // if hook failure is in after or before blocks\n    return this.nextSuite(errSuite);\n  }\n\n  // bail\n  this.emit('end');\n};\n\n/**\n * Cleans up the references to all the deferred functions\n * (before/after/beforeEach/afterEach) and tests of a Suite.\n * These must be deleted otherwise a memory leak can happen,\n * as those functions may reference variables from closures,\n * thus those variables can never be garbage collected as long\n * as the deferred functions exist.\n *\n * @param {Suite} suite\n */\nfunction cleanSuiteReferences (suite) {\n  function cleanArrReferences (arr) {\n    for (var i = 0; i < arr.length; i++) {\n      delete arr[i].fn;\n    }\n  }\n\n  if (isArray(suite._beforeAll)) {\n    cleanArrReferences(suite._beforeAll);\n  }\n\n  if (isArray(suite._beforeEach)) {\n    cleanArrReferences(suite._beforeEach);\n  }\n\n  if (isArray(suite._afterAll)) {\n    cleanArrReferences(suite._afterAll);\n  }\n\n  if (isArray(suite._afterEach)) {\n    cleanArrReferences(suite._afterEach);\n  }\n\n  for (var i = 0; i < suite.tests.length; i++) {\n    delete suite.tests[i].fn;\n  }\n}\n\n/**\n * Run the root suite and invoke `fn(failures)`\n * on completion.\n *\n * @param {Function} fn\n * @return {Runner} for chaining\n * @api public\n * @param {Function} fn\n * @return {Runner} Runner instance.\n */\nRunner.prototype.run = function (fn) {\n  var self = this;\n  var rootSuite = this.suite;\n\n  // If there is an `only` filter\n  if (this.hasOnly) {\n    filterOnly(rootSuite);\n  }\n\n  fn = fn || function () {};\n\n  function uncaught (err) {\n    self.uncaught(err);\n  }\n\n  function start () {\n    self.started = true;\n    self.emit('start');\n    self.runSuite(rootSuite, function () {\n      debug('finished running');\n      self.emit('end');\n    });\n  }\n\n  debug('start');\n\n  // references cleanup to avoid memory leaks\n  this.on('suite end', cleanSuiteReferences);\n\n  // callback\n  this.on('end', function () {\n    debug('end');\n    process.removeListener('uncaughtException', uncaught);\n    fn(self.failures);\n  });\n\n  // uncaught exception\n  process.on('uncaughtException', uncaught);\n\n  if (this._delay) {\n    // for reporters, I guess.\n    // might be nice to debounce some dots while we wait.\n    this.emit('waiting', rootSuite);\n    rootSuite.once('run', start);\n  } else {\n    start();\n  }\n\n  return this;\n};\n\n/**\n * Cleanly abort execution.\n *\n * @api public\n * @return {Runner} Runner instance.\n */\nRunner.prototype.abort = function () {\n  debug('aborting');\n  this._abort = true;\n\n  return this;\n};\n\n/**\n * Filter suites based on `isOnly` logic.\n *\n * @param {Array} suite\n * @returns {Boolean}\n * @api private\n */\nfunction filterOnly (suite) {\n  if (suite._onlyTests.length) {\n    // If the suite contains `only` tests, run those and ignore any nested suites.\n    suite.tests = suite._onlyTests;\n    suite.suites = [];\n  } else {\n    // Otherwise, do not run any of the tests in this suite.\n    suite.tests = [];\n    utils.forEach(suite._onlySuites, function (onlySuite) {\n      // If there are other `only` tests/suites nested in the current `only` suite, then filter that `only` suite.\n      // Otherwise, all of the tests on this `only` suite should be run, so don't filter it.\n      if (hasOnly(onlySuite)) {\n        filterOnly(onlySuite);\n      }\n    });\n    // Run the `only` suites, as well as any other suites that have `only` tests/suites as descendants.\n    suite.suites = filter(suite.suites, function (childSuite) {\n      return indexOf(suite._onlySuites, childSuite) !== -1 || filterOnly(childSuite);\n    });\n  }\n  // Keep the suite only if there is something to run\n  return suite.tests.length || suite.suites.length;\n}\n\n/**\n * Determines whether a suite has an `only` test or suite as a descendant.\n *\n * @param {Array} suite\n * @returns {Boolean}\n * @api private\n */\nfunction hasOnly (suite) {\n  return suite._onlyTests.length || suite._onlySuites.length || some(suite.suites, hasOnly);\n}\n\n/**\n * Filter leaks with the given globals flagged as `ok`.\n *\n * @api private\n * @param {Array} ok\n * @param {Array} globals\n * @return {Array}\n */\nfunction filterLeaks (ok, globals) {\n  return filter(globals, function (key) {\n    // Firefox and Chrome exposes iframes as index inside the window object\n    if (/^\\d+/.test(key)) {\n      return false;\n    }\n\n    // in firefox\n    // if runner runs in an iframe, this iframe's window.getInterface method\n    // not init at first it is assigned in some seconds\n    if (global.navigator && (/^getInterface/).test(key)) {\n      return false;\n    }\n\n    // an iframe could be approached by window[iframeIndex]\n    // in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak\n    if (global.navigator && (/^\\d+/).test(key)) {\n      return false;\n    }\n\n    // Opera and IE expose global variables for HTML element IDs (issue #243)\n    if (/^mocha-/.test(key)) {\n      return false;\n    }\n\n    var matched = filter(ok, function (ok) {\n      if (~ok.indexOf('*')) {\n        return key.indexOf(ok.split('*')[0]) === 0;\n      }\n      return key === ok;\n    });\n    return !matched.length && (!global.navigator || key !== 'onerror');\n  });\n}\n\n/**\n * Array of globals dependent on the environment.\n *\n * @return {Array}\n * @api private\n */\nfunction extraGlobals () {\n  if (typeof process === 'object' && typeof process.version === 'string') {\n    var parts = process.version.split('.');\n    var nodeVersion = utils.reduce(parts, function (a, v) {\n      return a << 8 | v;\n    });\n\n    // 'errno' was renamed to process._errno in v0.9.11.\n\n    if (nodeVersion < 0x00090B) {\n      return ['errno'];\n    }\n  }\n\n  return [];\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./pending\":16,\"./runnable\":33,\"./utils\":38,\"_process\":67,\"debug\":2,\"events\":3}],35:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar Hook = require('./hook');\nvar utils = require('./utils');\nvar inherits = utils.inherits;\nvar debug = require('debug')('mocha:suite');\nvar milliseconds = require('./ms');\n\n/**\n * Expose `Suite`.\n */\n\nexports = module.exports = Suite;\n\n/**\n * Create a new `Suite` with the given `title` and parent `Suite`. When a suite\n * with the same title is already present, that suite is returned to provide\n * nicer reporter and more flexible meta-testing.\n *\n * @api public\n * @param {Suite} parent\n * @param {string} title\n * @return {Suite}\n */\nexports.create = function (parent, title) {\n  var suite = new Suite(title, parent.ctx);\n  suite.parent = parent;\n  title = suite.fullTitle();\n  parent.addSuite(suite);\n  return suite;\n};\n\n/**\n * Initialize a new `Suite` with the given `title` and `ctx`.\n *\n * @api private\n * @param {string} title\n * @param {Context} parentContext\n */\nfunction Suite (title, parentContext) {\n  if (!utils.isString(title)) {\n    throw new Error('Suite `title` should be a \"string\" but \"' + typeof title + '\" was given instead.');\n  }\n  this.title = title;\n  function Context () {}\n  Context.prototype = parentContext;\n  this.ctx = new Context();\n  this.suites = [];\n  this.tests = [];\n  this.pending = false;\n  this._beforeEach = [];\n  this._beforeAll = [];\n  this._afterEach = [];\n  this._afterAll = [];\n  this.root = !title;\n  this._timeout = 2000;\n  this._enableTimeouts = true;\n  this._slow = 75;\n  this._bail = false;\n  this._retries = -1;\n  this._onlyTests = [];\n  this._onlySuites = [];\n  this.delayed = false;\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\ninherits(Suite, EventEmitter);\n\n/**\n * Return a clone of this `Suite`.\n *\n * @api private\n * @return {Suite}\n */\nSuite.prototype.clone = function () {\n  var suite = new Suite(this.title);\n  debug('clone');\n  suite.ctx = this.ctx;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.enableTimeouts(this.enableTimeouts());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  return suite;\n};\n\n/**\n * Set timeout `ms` or short-hand such as \"2s\".\n *\n * @api private\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.timeout = function (ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  if (ms.toString() === '0') {\n    this._enableTimeouts = false;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('timeout %d', ms);\n  this._timeout = parseInt(ms, 10);\n  return this;\n};\n\n/**\n * Set number of times to retry a failed test.\n *\n * @api private\n * @param {number|string} n\n * @return {Suite|number} for chaining\n */\nSuite.prototype.retries = function (n) {\n  if (!arguments.length) {\n    return this._retries;\n  }\n  debug('retries %d', n);\n  this._retries = parseInt(n, 10) || 0;\n  return this;\n};\n\n/**\n  * Set timeout to `enabled`.\n  *\n  * @api private\n  * @param {boolean} enabled\n  * @return {Suite|boolean} self or enabled\n  */\nSuite.prototype.enableTimeouts = function (enabled) {\n  if (!arguments.length) {\n    return this._enableTimeouts;\n  }\n  debug('enableTimeouts %s', enabled);\n  this._enableTimeouts = enabled;\n  return this;\n};\n\n/**\n * Set slow `ms` or short-hand such as \"2s\".\n *\n * @api private\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.slow = function (ms) {\n  if (!arguments.length) {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Sets whether to bail after first error.\n *\n * @api private\n * @param {boolean} bail\n * @return {Suite|number} for chaining\n */\nSuite.prototype.bail = function (bail) {\n  if (!arguments.length) {\n    return this._bail;\n  }\n  debug('bail %s', bail);\n  this._bail = bail;\n  return this;\n};\n\n/**\n * Check if this suite or its parent suite is marked as pending.\n *\n * @api private\n */\nSuite.prototype.isPending = function () {\n  return this.pending || (this.parent && this.parent.isPending());\n};\n\n/**\n * Run `fn(test[, done])` before running tests.\n *\n * @api private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeAll = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before all\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._beforeAll.push(hook);\n  this.emit('beforeAll', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after running tests.\n *\n * @api private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterAll = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after all\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._afterAll.push(hook);\n  this.emit('afterAll', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before each test case.\n *\n * @api private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeEach = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before each\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._beforeEach.push(hook);\n  this.emit('beforeEach', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after each test case.\n *\n * @api private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterEach = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after each\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._afterEach.push(hook);\n  this.emit('afterEach', hook);\n  return this;\n};\n\n/**\n * Add a test `suite`.\n *\n * @api private\n * @param {Suite} suite\n * @return {Suite} for chaining\n */\nSuite.prototype.addSuite = function (suite) {\n  suite.parent = this;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.enableTimeouts(this.enableTimeouts());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  this.suites.push(suite);\n  this.emit('suite', suite);\n  return this;\n};\n\n/**\n * Add a `test` to this suite.\n *\n * @api private\n * @param {Test} test\n * @return {Suite} for chaining\n */\nSuite.prototype.addTest = function (test) {\n  test.parent = this;\n  test.timeout(this.timeout());\n  test.retries(this.retries());\n  test.enableTimeouts(this.enableTimeouts());\n  test.slow(this.slow());\n  test.ctx = this.ctx;\n  this.tests.push(test);\n  this.emit('test', test);\n  return this;\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @api public\n * @return {string}\n */\nSuite.prototype.fullTitle = function () {\n  if (this.parent) {\n    var full = this.parent.fullTitle();\n    if (full) {\n      return full + ' ' + this.title;\n    }\n  }\n  return this.title;\n};\n\n/**\n * Return the total number of tests.\n *\n * @api public\n * @return {number}\n */\nSuite.prototype.total = function () {\n  return utils.reduce(this.suites, function (sum, suite) {\n    return sum + suite.total();\n  }, 0) + this.tests.length;\n};\n\n/**\n * Iterates through each suite recursively to find all tests. Applies a\n * function in the format `fn(test)`.\n *\n * @api private\n * @param {Function} fn\n * @return {Suite}\n */\nSuite.prototype.eachTest = function (fn) {\n  utils.forEach(this.tests, fn);\n  utils.forEach(this.suites, function (suite) {\n    suite.eachTest(fn);\n  });\n  return this;\n};\n\n/**\n * This will run the root suite if we happen to be running in delayed mode.\n */\nSuite.prototype.run = function run () {\n  if (this.root) {\n    this.emit('run');\n  }\n};\n\n},{\"./hook\":7,\"./ms\":15,\"./utils\":38,\"debug\":2,\"events\":3}],36:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Runnable = require('./runnable');\nvar create = require('lodash.create');\nvar isString = require('./utils').isString;\n\n/**\n * Expose `Test`.\n */\n\nmodule.exports = Test;\n\n/**\n * Initialize a new `Test` with the given `title` and callback `fn`.\n *\n * @api private\n * @param {String} title\n * @param {Function} fn\n */\nfunction Test (title, fn) {\n  if (!isString(title)) {\n    throw new Error('Test `title` should be a \"string\" but \"' + typeof title + '\" was given instead.');\n  }\n  Runnable.call(this, title, fn);\n  this.pending = !fn;\n  this.type = 'test';\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\nTest.prototype = create(Runnable.prototype, {\n  constructor: Test\n});\n\nTest.prototype.clone = function () {\n  var test = new Test(this.title, this.fn);\n  test.timeout(this.timeout());\n  test.slow(this.slow());\n  test.enableTimeouts(this.enableTimeouts());\n  test.retries(this.retries());\n  test.currentRetry(this.currentRetry());\n  test.globals(this.globals());\n  test.parent = this.parent;\n  test.file = this.file;\n  test.ctx = this.ctx;\n  return test;\n};\n\n},{\"./runnable\":33,\"./utils\":38,\"lodash.create\":60}],37:[function(require,module,exports){\n'use strict';\n\n/**\n * Pad a `number` with a ten's place zero.\n *\n * @param {number} number\n * @return {string}\n */\nfunction pad(number) {\n  var n = number.toString();\n  return n.length === 1 ? '0' + n : n;\n}\n\n/**\n * Turn a `date` into an ISO string.\n *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n *\n * @param {Date} date\n * @return {string}\n */\nfunction toISOString(date) {\n  return date.getUTCFullYear()\n    + '-' + pad(date.getUTCMonth() + 1)\n    + '-' + pad(date.getUTCDate())\n    + 'T' + pad(date.getUTCHours())\n    + ':' + pad(date.getUTCMinutes())\n    + ':' + pad(date.getUTCSeconds())\n    + '.' + String((date.getUTCMilliseconds()/1000).toFixed(3)).slice(2, 5)\n    + 'Z';\n}\n\n/*\n * Exports.\n */\n\nmodule.exports = toISOString;\n\n},{}],38:[function(require,module,exports){\n(function (process,Buffer){\n'use strict';\n\n/* eslint-env browser */\n\n/**\n * Module dependencies.\n */\n\nvar JSON = require('json3');\nvar basename = require('path').basename;\nvar debug = require('debug')('mocha:watch');\nvar exists = require('fs').existsSync || require('path').existsSync;\nvar glob = require('glob');\nvar path = require('path');\nvar join = path.join;\nvar readdirSync = require('fs').readdirSync;\nvar statSync = require('fs').statSync;\nvar watchFile = require('fs').watchFile;\nvar lstatSync = require('fs').lstatSync;\nvar toISOString = require('./to-iso-string');\n\n/**\n * Ignored directories.\n */\n\nvar ignore = ['node_modules', '.git'];\n\nexports.inherits = require('util').inherits;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @api private\n * @param  {string} html\n * @return {string}\n */\nexports.escape = function (html) {\n  return String(html)\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n\n/**\n * Array#forEach (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} scope\n */\nexports.forEach = function (arr, fn, scope) {\n  for (var i = 0, l = arr.length; i < l; i++) {\n    fn.call(scope, arr[i], i);\n  }\n};\n\n/**\n * Test if the given obj is type of string.\n *\n * @api private\n * @param {Object} obj\n * @return {boolean}\n */\nexports.isString = function (obj) {\n  return typeof obj === 'string';\n};\n\n/**\n * Array#map (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} scope\n * @return {Array}\n */\nexports.map = function (arr, fn, scope) {\n  var result = [];\n  for (var i = 0, l = arr.length; i < l; i++) {\n    result.push(fn.call(scope, arr[i], i, arr));\n  }\n  return result;\n};\n\n/**\n * Array#indexOf (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Object} obj to find index of\n * @param {number} start\n * @return {number}\n */\nvar indexOf = exports.indexOf = function (arr, obj, start) {\n  for (var i = start || 0, l = arr.length; i < l; i++) {\n    if (arr[i] === obj) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Array#reduce (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} val Initial value.\n * @return {*}\n */\nvar reduce = exports.reduce = function (arr, fn, val) {\n  var rval = val;\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    rval = fn(rval, arr[i], i, arr);\n  }\n\n  return rval;\n};\n\n/**\n * Array#filter (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @return {Array}\n */\nexports.filter = function (arr, fn) {\n  var ret = [];\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    var val = arr[i];\n    if (fn(val, i, arr)) {\n      ret.push(val);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Array#some (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @return {Array}\n */\nexports.some = function (arr, fn) {\n  for (var i = 0, l = arr.length; i < l; i++) {\n    if (fn(arr[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Object.keys (<=IE8)\n *\n * @api private\n * @param {Object} obj\n * @return {Array} keys\n */\nexports.keys = typeof Object.keys === 'function' ? Object.keys : function (obj) {\n  var keys = [];\n  var has = Object.prototype.hasOwnProperty; // for `window` on <=IE8\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n};\n\n/**\n * Watch the given `files` for changes\n * and invoke `fn(file)` on modification.\n *\n * @api private\n * @param {Array} files\n * @param {Function} fn\n */\nexports.watch = function (files, fn) {\n  var options = { interval: 100 };\n  files.forEach(function (file) {\n    debug('file %s', file);\n    watchFile(file, options, function (curr, prev) {\n      if (prev.mtime < curr.mtime) {\n        fn(file);\n      }\n    });\n  });\n};\n\n/**\n * Array.isArray (<=IE8)\n *\n * @api private\n * @param {Object} obj\n * @return {Boolean}\n */\nvar isArray = typeof Array.isArray === 'function' ? Array.isArray : function (obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nexports.isArray = isArray;\n\n/**\n * Buffer.prototype.toJSON polyfill.\n *\n * @type {Function}\n */\nif (typeof Buffer !== 'undefined' && Buffer.prototype) {\n  Buffer.prototype.toJSON = Buffer.prototype.toJSON || function () {\n    return Array.prototype.slice.call(this, 0);\n  };\n}\n\n/**\n * Ignored files.\n *\n * @api private\n * @param {string} path\n * @return {boolean}\n */\nfunction ignored (path) {\n  return !~ignore.indexOf(path);\n}\n\n/**\n * Lookup files in the given `dir`.\n *\n * @api private\n * @param {string} dir\n * @param {string[]} [ext=['.js']]\n * @param {Array} [ret=[]]\n * @return {Array}\n */\nexports.files = function (dir, ext, ret) {\n  ret = ret || [];\n  ext = ext || ['js'];\n\n  var re = new RegExp('\\\\.(' + ext.join('|') + ')$');\n\n  readdirSync(dir)\n    .filter(ignored)\n    .forEach(function (path) {\n      path = join(dir, path);\n      if (lstatSync(path).isDirectory()) {\n        exports.files(path, ext, ret);\n      } else if (path.match(re)) {\n        ret.push(path);\n      }\n    });\n\n  return ret;\n};\n\n/**\n * Compute a slug from the given `str`.\n *\n * @api private\n * @param {string} str\n * @return {string}\n */\nexports.slug = function (str) {\n  return str\n    .toLowerCase()\n    .replace(/ +/g, '-')\n    .replace(/[^-\\w]/g, '');\n};\n\n/**\n * Strip the function definition from `str`, and re-indent for pre whitespace.\n *\n * @param {string} str\n * @return {string}\n */\nexports.clean = function (str) {\n  str = str\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/^\\uFEFF/, '')\n    // (traditional)->  space/name     parameters    body     (lambda)-> parameters       body   multi-statement/single          keep body content\n    .replace(/^function(?:\\s*|\\s+[^(]*)\\([^)]*\\)\\s*\\{((?:.|\\n)*?)\\s*\\}$|^\\([^)]*\\)\\s*=>\\s*(?:\\{((?:.|\\n)*?)\\s*\\}|((?:.|\\n)*))$/, '$1$2$3');\n\n  var spaces = str.match(/^\\n?( *)/)[1].length;\n  var tabs = str.match(/^\\n?(\\t*)/)[1].length;\n  var re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs || spaces) + '}', 'gm');\n\n  str = str.replace(re, '');\n\n  return exports.trim(str);\n};\n\n/**\n * Trim the given `str`.\n *\n * @api private\n * @param {string} str\n * @return {string}\n */\nexports.trim = function (str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n * Parse the given `qs`.\n *\n * @api private\n * @param {string} qs\n * @return {Object}\n */\nexports.parseQuery = function (qs) {\n  return reduce(qs.replace('?', '').split('&'), function (obj, pair) {\n    var i = pair.indexOf('=');\n    var key = pair.slice(0, i);\n    var val = pair.slice(++i);\n\n    obj[key] = decodeURIComponent(val);\n    return obj;\n  }, {});\n};\n\n/**\n * Highlight the given string of `js`.\n *\n * @api private\n * @param {string} js\n * @return {string}\n */\nfunction highlight (js) {\n  return js\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/\\bnew[ \\t]+(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')\n    .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>');\n}\n\n/**\n * Highlight the contents of tag `name`.\n *\n * @api private\n * @param {string} name\n */\nexports.highlightTags = function (name) {\n  var code = document.getElementById('mocha').getElementsByTagName(name);\n  for (var i = 0, len = code.length; i < len; ++i) {\n    code[i].innerHTML = highlight(code[i].innerHTML);\n  }\n};\n\n/**\n * If a value could have properties, and has none, this function is called,\n * which returns a string representation of the empty value.\n *\n * Functions w/ no properties return `'[Function]'`\n * Arrays w/ length === 0 return `'[]'`\n * Objects w/ no properties return `'{}'`\n * All else: return result of `value.toString()`\n *\n * @api private\n * @param {*} value The value to inspect.\n * @param {string} typeHint The type of the value\n * @returns {string}\n */\nfunction emptyRepresentation (value, typeHint) {\n  switch (typeHint) {\n    case 'function':\n      return '[Function]';\n    case 'object':\n      return '{}';\n    case 'array':\n      return '[]';\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Takes some variable and asks `Object.prototype.toString()` what it thinks it\n * is.\n *\n * @api private\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n * @param {*} value The value to test.\n * @returns {string} Computed type\n * @example\n * type({}) // 'object'\n * type([]) // 'array'\n * type(1) // 'number'\n * type(false) // 'boolean'\n * type(Infinity) // 'number'\n * type(null) // 'null'\n * type(new Date()) // 'date'\n * type(/foo/) // 'regexp'\n * type('type') // 'string'\n * type(global) // 'global'\n * type(new String('foo') // 'object'\n */\nvar type = exports.type = function type (value) {\n  if (value === undefined) {\n    return 'undefined';\n  } else if (value === null) {\n    return 'null';\n  } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n    return 'buffer';\n  }\n  return Object.prototype.toString.call(value)\n    .replace(/^\\[.+\\s(.+?)\\]$/, '$1')\n    .toLowerCase();\n};\n\n/**\n * Stringify `value`. Different behavior depending on type of value:\n *\n * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.\n * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.\n * - If `value` is an *empty* object, function, or array, return result of function\n *   {@link emptyRepresentation}.\n * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of\n *   JSON.stringify().\n *\n * @api private\n * @see exports.type\n * @param {*} value\n * @return {string}\n */\nexports.stringify = function (value) {\n  var typeHint = type(value);\n\n  if (!~indexOf(['object', 'array', 'function'], typeHint)) {\n    if (typeHint === 'buffer') {\n      var json = value.toJSON();\n      // Based on the toJSON result\n      return jsonStringify(json.data && json.type ? json.data : json, 2)\n        .replace(/,(\\n|$)/g, '$1');\n    }\n\n    // IE7/IE8 has a bizarre String constructor; needs to be coerced\n    // into an array and back to obj.\n    if (typeHint === 'string' && typeof value === 'object') {\n      value = reduce(value.split(''), function (acc, char, idx) {\n        acc[idx] = char;\n        return acc;\n      }, {});\n      typeHint = 'object';\n    } else {\n      return jsonStringify(value);\n    }\n  }\n\n  for (var prop in value) {\n    if (Object.prototype.hasOwnProperty.call(value, prop)) {\n      return jsonStringify(exports.canonicalize(value, null, typeHint), 2).replace(/,(\\n|$)/g, '$1');\n    }\n  }\n\n  return emptyRepresentation(value, typeHint);\n};\n\n/**\n * like JSON.stringify but more sense.\n *\n * @api private\n * @param {Object}  object\n * @param {number=} spaces\n * @param {number=} depth\n * @returns {*}\n */\nfunction jsonStringify (object, spaces, depth) {\n  if (typeof spaces === 'undefined') {\n    // primitive types\n    return _stringify(object);\n  }\n\n  depth = depth || 1;\n  var space = spaces * depth;\n  var str = isArray(object) ? '[' : '{';\n  var end = isArray(object) ? ']' : '}';\n  var length = typeof object.length === 'number' ? object.length : exports.keys(object).length;\n  // `.repeat()` polyfill\n  function repeat (s, n) {\n    return new Array(n).join(s);\n  }\n\n  function _stringify (val) {\n    switch (type(val)) {\n      case 'null':\n      case 'undefined':\n        val = '[' + val + ']';\n        break;\n      case 'array':\n      case 'object':\n        val = jsonStringify(val, spaces, depth + 1);\n        break;\n      case 'boolean':\n      case 'regexp':\n      case 'symbol':\n      case 'number':\n        val = val === 0 && (1 / val) === -Infinity // `-0`\n          ? '-0'\n          : val.toString();\n        break;\n      case 'date':\n        var sDate;\n        if (isNaN(val.getTime())) { // Invalid date\n          sDate = val.toString();\n        } else {\n          sDate = val.toISOString ? val.toISOString() : toISOString(val);\n        }\n        val = '[Date: ' + sDate + ']';\n        break;\n      case 'buffer':\n        var json = val.toJSON();\n        // Based on the toJSON result\n        json = json.data && json.type ? json.data : json;\n        val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';\n        break;\n      default:\n        val = (val === '[Function]' || val === '[Circular]')\n          ? val\n          : JSON.stringify(val); // string\n    }\n    return val;\n  }\n\n  for (var i in object) {\n    if (!Object.prototype.hasOwnProperty.call(object, i)) {\n      continue; // not my business\n    }\n    --length;\n    str += '\\n ' + repeat(' ', space) +\n      (isArray(object) ? '' : '\"' + i + '\": ') + // key\n      _stringify(object[i]) +                    // value\n      (length ? ',' : '');                       // comma\n  }\n\n  return str +\n    // [], {}\n    (str.length !== 1 ? '\\n' + repeat(' ', --space) + end : end);\n}\n\n/**\n * Test if a value is a buffer.\n *\n * @api private\n * @param {*} value The value to test.\n * @return {boolean} True if `value` is a buffer, otherwise false\n */\nexports.isBuffer = function (value) {\n  return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);\n};\n\n/**\n * Return a new Thing that has the keys in sorted order. Recursive.\n *\n * If the Thing...\n * - has already been seen, return string `'[Circular]'`\n * - is `undefined`, return string `'[undefined]'`\n * - is `null`, return value `null`\n * - is some other primitive, return the value\n * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method\n * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.\n * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`\n *\n * @api private\n * @see {@link exports.stringify}\n * @param {*} value Thing to inspect.  May or may not have properties.\n * @param {Array} [stack=[]] Stack of seen values\n * @param {string} [typeHint] Type hint\n * @return {(Object|Array|Function|string|undefined)}\n */\nexports.canonicalize = function canonicalize (value, stack, typeHint) {\n  var canonicalizedObj;\n  /* eslint-disable no-unused-vars */\n  var prop;\n  /* eslint-enable no-unused-vars */\n  typeHint = typeHint || type(value);\n  function withStack (value, fn) {\n    stack.push(value);\n    fn();\n    stack.pop();\n  }\n\n  stack = stack || [];\n\n  if (indexOf(stack, value) !== -1) {\n    return '[Circular]';\n  }\n\n  switch (typeHint) {\n    case 'undefined':\n    case 'buffer':\n    case 'null':\n      canonicalizedObj = value;\n      break;\n    case 'array':\n      withStack(value, function () {\n        canonicalizedObj = exports.map(value, function (item) {\n          return exports.canonicalize(item, stack);\n        });\n      });\n      break;\n    case 'function':\n      /* eslint-disable guard-for-in */\n      for (prop in value) {\n        canonicalizedObj = {};\n        break;\n      }\n      /* eslint-enable guard-for-in */\n      if (!canonicalizedObj) {\n        canonicalizedObj = emptyRepresentation(value, typeHint);\n        break;\n      }\n    /* falls through */\n    case 'object':\n      canonicalizedObj = canonicalizedObj || {};\n      withStack(value, function () {\n        exports.forEach(exports.keys(value).sort(), function (key) {\n          canonicalizedObj[key] = exports.canonicalize(value[key], stack);\n        });\n      });\n      break;\n    case 'date':\n    case 'number':\n    case 'regexp':\n    case 'boolean':\n    case 'symbol':\n      canonicalizedObj = value;\n      break;\n    default:\n      canonicalizedObj = value + '';\n  }\n\n  return canonicalizedObj;\n};\n\n/**\n * Lookup file names at the given `path`.\n *\n * @api public\n * @param {string} path Base path to start searching from.\n * @param {string[]} extensions File extensions to look for.\n * @param {boolean} recursive Whether or not to recurse into subdirectories.\n * @return {string[]} An array of paths.\n */\nexports.lookupFiles = function lookupFiles (path, extensions, recursive) {\n  var files = [];\n  var re = new RegExp('\\\\.(' + extensions.join('|') + ')$');\n\n  if (!exists(path)) {\n    if (exists(path + '.js')) {\n      path += '.js';\n    } else {\n      files = glob.sync(path);\n      if (!files.length) {\n        throw new Error(\"cannot resolve path (or pattern) '\" + path + \"'\");\n      }\n      return files;\n    }\n  }\n\n  try {\n    var stat = statSync(path);\n    if (stat.isFile()) {\n      return path;\n    }\n  } catch (err) {\n    // ignore error\n    return;\n  }\n\n  readdirSync(path).forEach(function (file) {\n    file = join(path, file);\n    try {\n      var stat = statSync(file);\n      if (stat.isDirectory()) {\n        if (recursive) {\n          files = files.concat(lookupFiles(file, extensions, recursive));\n        }\n        return;\n      }\n    } catch (err) {\n      // ignore error\n      return;\n    }\n    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') {\n      return;\n    }\n    files.push(file);\n  });\n\n  return files;\n};\n\n/**\n * Generate an undefined error with a message warning the user.\n *\n * @return {Error}\n */\n\nexports.undefinedError = function () {\n  return new Error('Caught undefined error, did you throw without specifying what?');\n};\n\n/**\n * Generate an undefined error if `err` is not defined.\n *\n * @param {Error} err\n * @return {Error}\n */\n\nexports.getError = function (err) {\n  return err || exports.undefinedError();\n};\n\n/**\n * @summary\n * This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)\n * @description\n * When invoking this function you get a filter function that get the Error.stack as an input,\n * and return a prettify output.\n * (i.e: strip Mocha and internal node functions from stack trace).\n * @returns {Function}\n */\nexports.stackTraceFilter = function () {\n  // TODO: Replace with `process.browser`\n  var is = typeof document === 'undefined' ? { node: true } : { browser: true };\n  var slash = path.sep;\n  var cwd;\n  if (is.node) {\n    cwd = process.cwd() + slash;\n  } else {\n    cwd = (typeof location === 'undefined' ? window.location : location).href.replace(/\\/[^\\/]*$/, '/');\n    slash = '/';\n  }\n\n  function isMochaInternal (line) {\n    return (~line.indexOf('node_modules' + slash + 'mocha' + slash)) ||\n      (~line.indexOf('node_modules' + slash + 'mocha.js')) ||\n      (~line.indexOf('bower_components' + slash + 'mocha.js')) ||\n      (~line.indexOf(slash + 'mocha.js'));\n  }\n\n  function isNodeInternal (line) {\n    return (~line.indexOf('(timers.js:')) ||\n      (~line.indexOf('(events.js:')) ||\n      (~line.indexOf('(node.js:')) ||\n      (~line.indexOf('(module.js:')) ||\n      (~line.indexOf('GeneratorFunctionPrototype.next (native)')) ||\n      false;\n  }\n\n  return function (stack) {\n    stack = stack.split('\\n');\n\n    stack = reduce(stack, function (list, line) {\n      if (isMochaInternal(line)) {\n        return list;\n      }\n\n      if (is.node && isNodeInternal(line)) {\n        return list;\n      }\n\n      // Clean up cwd(absolute)\n      if (/\\(?.+:\\d+:\\d+\\)?$/.test(line)) {\n        line = line.replace(cwd, '');\n      }\n\n      list.push(line);\n      return list;\n    }, []);\n\n    return stack.join('\\n');\n  };\n};\n\n/**\n * Crude, but effective.\n * @api\n * @param {*} value\n * @returns {boolean} Whether or not `value` is a Promise\n */\nexports.isPromise = function isPromise (value) {\n  return typeof value === 'object' && typeof value.then === 'function';\n};\n\n/**\n * It's a noop.\n * @api\n */\nexports.noop = function () {};\n\n}).call(this,require('_process'),require(\"buffer\").Buffer)\n},{\"./to-iso-string\":37,\"_process\":67,\"buffer\":44,\"debug\":2,\"fs\":42,\"glob\":42,\"json3\":54,\"path\":42,\"util\":84}],39:[function(require,module,exports){\n'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n},{}],40:[function(require,module,exports){\n\n},{}],41:[function(require,module,exports){\n(function (process){\nvar WritableStream = require('stream').Writable\nvar inherits = require('util').inherits\n\nmodule.exports = BrowserStdout\n\n\ninherits(BrowserStdout, WritableStream)\n\nfunction BrowserStdout(opts) {\n  if (!(this instanceof BrowserStdout)) return new BrowserStdout(opts)\n\n  opts = opts || {}\n  WritableStream.call(this, opts)\n  this.label = (opts.label !== undefined) ? opts.label : 'stdout'\n}\n\nBrowserStdout.prototype._write = function(chunks, encoding, cb) {\n  var output = chunks.toString ? chunks.toString() : chunks\n  if (this.label === false) {\n    console.log(output)\n  } else {\n    console.log(this.label+':', output)\n  }\n  process.nextTick(cb)\n}\n\n}).call(this,require('_process'))\n},{\"_process\":67,\"stream\":79,\"util\":84}],42:[function(require,module,exports){\narguments[4][40][0].apply(exports,arguments)\n},{\"dup\":40}],43:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar buffer = require('buffer');\nvar Buffer = buffer.Buffer;\nvar SlowBuffer = buffer.SlowBuffer;\nvar MAX_LEN = buffer.kMaxLength || 2147483647;\nexports.alloc = function alloc(size, fill, encoding) {\n  if (typeof Buffer.alloc === 'function') {\n    return Buffer.alloc(size, fill, encoding);\n  }\n  if (typeof encoding === 'number') {\n    throw new TypeError('encoding must not be number');\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size > MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  var enc = encoding;\n  var _fill = fill;\n  if (_fill === undefined) {\n    enc = undefined;\n    _fill = 0;\n  }\n  var buf = new Buffer(size);\n  if (typeof _fill === 'string') {\n    var fillBuf = new Buffer(_fill, enc);\n    var flen = fillBuf.length;\n    var i = -1;\n    while (++i < size) {\n      buf[i] = fillBuf[i % flen];\n    }\n  } else {\n    buf.fill(_fill);\n  }\n  return buf;\n}\nexports.allocUnsafe = function allocUnsafe(size) {\n  if (typeof Buffer.allocUnsafe === 'function') {\n    return Buffer.allocUnsafe(size);\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size > MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  return new Buffer(size);\n}\nexports.from = function from(value, encodingOrOffset, length) {\n  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {\n    return Buffer.from(value, encodingOrOffset, length);\n  }\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n  if (typeof value === 'string') {\n    return new Buffer(value, encodingOrOffset);\n  }\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    var offset = encodingOrOffset;\n    if (arguments.length === 1) {\n      return new Buffer(value);\n    }\n    if (typeof offset === 'undefined') {\n      offset = 0;\n    }\n    var len = length;\n    if (typeof len === 'undefined') {\n      len = value.byteLength - offset;\n    }\n    if (offset >= value.byteLength) {\n      throw new RangeError('\\'offset\\' is out of bounds');\n    }\n    if (len > value.byteLength - offset) {\n      throw new RangeError('\\'length\\' is out of bounds');\n    }\n    return new Buffer(value.slice(offset, offset + len));\n  }\n  if (Buffer.isBuffer(value)) {\n    var out = new Buffer(value.length);\n    value.copy(out, 0, 0, value.length);\n    return out;\n  }\n  if (value) {\n    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {\n      return new Buffer(value);\n    }\n    if (value.type === 'Buffer' && Array.isArray(value.data)) {\n      return new Buffer(value.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');\n}\nexports.allocUnsafeSlow = function allocUnsafeSlow(size) {\n  if (typeof Buffer.allocUnsafeSlow === 'function') {\n    return Buffer.allocUnsafeSlow(size);\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size >= MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  return new SlowBuffer(size);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"buffer\":44}],44:[function(require,module,exports){\n(function (global){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"base64-js\":39,\"ieee754\":50,\"isarray\":53}],45:[function(require,module,exports){\n(function (Buffer){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n}).call(this,{\"isBuffer\":require(\"../../is-buffer/index.js\")})\n},{\"../../is-buffer/index.js\":52}],46:[function(require,module,exports){\n/* See LICENSE file for terms of use */\n\n/*\n * Text diff implementation.\n *\n * This library supports the following APIS:\n * JsDiff.diffChars: Character by character diff\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace\n * JsDiff.diffLines: Line based diff\n *\n * JsDiff.diffCss: Diff targeted at CSS content\n *\n * These methods are based on the implementation proposed in\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927\n */\n(function(global, undefined) {\n  var objectPrototypeToString = Object.prototype.toString;\n\n  /*istanbul ignore next*/\n  function map(arr, mapper, that) {\n    if (Array.prototype.map) {\n      return Array.prototype.map.call(arr, mapper, that);\n    }\n\n    var other = new Array(arr.length);\n\n    for (var i = 0, n = arr.length; i < n; i++) {\n      other[i] = mapper.call(that, arr[i], i, arr);\n    }\n    return other;\n  }\n  function clonePath(path) {\n    return { newPos: path.newPos, components: path.components.slice(0) };\n  }\n  function removeEmpty(array) {\n    var ret = [];\n    for (var i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n    return ret;\n  }\n  function escapeHTML(s) {\n    var n = s;\n    n = n.replace(/&/g, '&amp;');\n    n = n.replace(/</g, '&lt;');\n    n = n.replace(/>/g, '&gt;');\n    n = n.replace(/\"/g, '&quot;');\n\n    return n;\n  }\n\n  // This function handles the presence of circular references by bailing out when encountering an\n  // object that is already on the \"stack\" of items being processed.\n  function canonicalize(obj, stack, replacementStack) {\n    stack = stack || [];\n    replacementStack = replacementStack || [];\n\n    var i;\n\n    for (i = 0; i < stack.length; i += 1) {\n      if (stack[i] === obj) {\n        return replacementStack[i];\n      }\n    }\n\n    var canonicalizedObj;\n\n    if ('[object Array]' === objectPrototypeToString.call(obj)) {\n      stack.push(obj);\n      canonicalizedObj = new Array(obj.length);\n      replacementStack.push(canonicalizedObj);\n      for (i = 0; i < obj.length; i += 1) {\n        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack);\n      }\n      stack.pop();\n      replacementStack.pop();\n    } else if (typeof obj === 'object' && obj !== null) {\n      stack.push(obj);\n      canonicalizedObj = {};\n      replacementStack.push(canonicalizedObj);\n      var sortedKeys = [],\n          key;\n      for (key in obj) {\n        sortedKeys.push(key);\n      }\n      sortedKeys.sort();\n      for (i = 0; i < sortedKeys.length; i += 1) {\n        key = sortedKeys[i];\n        canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack);\n      }\n      stack.pop();\n      replacementStack.pop();\n    } else {\n      canonicalizedObj = obj;\n    }\n    return canonicalizedObj;\n  }\n\n  function buildValues(components, newString, oldString, useLongestToken) {\n    var componentPos = 0,\n        componentLen = components.length,\n        newPos = 0,\n        oldPos = 0;\n\n    for (; componentPos < componentLen; componentPos++) {\n      var component = components[componentPos];\n      if (!component.removed) {\n        if (!component.added && useLongestToken) {\n          var value = newString.slice(newPos, newPos + component.count);\n          value = map(value, function(value, i) {\n            var oldValue = oldString[oldPos + i];\n            return oldValue.length > value.length ? oldValue : value;\n          });\n\n          component.value = value.join('');\n        } else {\n          component.value = newString.slice(newPos, newPos + component.count).join('');\n        }\n        newPos += component.count;\n\n        // Common case\n        if (!component.added) {\n          oldPos += component.count;\n        }\n      } else {\n        component.value = oldString.slice(oldPos, oldPos + component.count).join('');\n        oldPos += component.count;\n\n        // Reverse add and remove so removes are output first to match common convention\n        // The diffing algorithm is tied to add then remove output and this is the simplest\n        // route to get the desired output with minimal overhead.\n        if (componentPos && components[componentPos - 1].added) {\n          var tmp = components[componentPos - 1];\n          components[componentPos - 1] = components[componentPos];\n          components[componentPos] = tmp;\n        }\n      }\n    }\n\n    return components;\n  }\n\n  function Diff(ignoreWhitespace) {\n    this.ignoreWhitespace = ignoreWhitespace;\n  }\n  Diff.prototype = {\n    diff: function(oldString, newString, callback) {\n      var self = this;\n\n      function done(value) {\n        if (callback) {\n          setTimeout(function() { callback(undefined, value); }, 0);\n          return true;\n        } else {\n          return value;\n        }\n      }\n\n      // Handle the identity case (this is due to unrolling editLength == 0\n      if (newString === oldString) {\n        return done([{ value: newString }]);\n      }\n      if (!newString) {\n        return done([{ value: oldString, removed: true }]);\n      }\n      if (!oldString) {\n        return done([{ value: newString, added: true }]);\n      }\n\n      newString = this.tokenize(newString);\n      oldString = this.tokenize(oldString);\n\n      var newLen = newString.length, oldLen = oldString.length;\n      var editLength = 1;\n      var maxEditLength = newLen + oldLen;\n      var bestPath = [{ newPos: -1, components: [] }];\n\n      // Seed editLength = 0, i.e. the content starts with the same values\n      var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n      if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n        // Identity per the equality and tokenizer\n        return done([{value: newString.join('')}]);\n      }\n\n      // Main worker method. checks all permutations of a given edit length for acceptance.\n      function execEditLength() {\n        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n          var basePath;\n          var addPath = bestPath[diagonalPath - 1],\n              removePath = bestPath[diagonalPath + 1],\n              oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n          if (addPath) {\n            // No one else is going to attempt to use this value, clear it\n            bestPath[diagonalPath - 1] = undefined;\n          }\n\n          var canAdd = addPath && addPath.newPos + 1 < newLen,\n              canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\n          if (!canAdd && !canRemove) {\n            // If this path is a terminal then prune\n            bestPath[diagonalPath] = undefined;\n            continue;\n          }\n\n          // Select the diagonal that we want to branch from. We select the prior\n          // path whose position in the new string is the farthest from the origin\n          // and does not pass the bounds of the diff graph\n          if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {\n            basePath = clonePath(removePath);\n            self.pushComponent(basePath.components, undefined, true);\n          } else {\n            basePath = addPath;   // No need to clone, we've pulled it from the list\n            basePath.newPos++;\n            self.pushComponent(basePath.components, true, undefined);\n          }\n\n          oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);\n\n          // If we have hit the end of both strings, then we are done\n          if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n            return done(buildValues(basePath.components, newString, oldString, self.useLongestToken));\n          } else {\n            // Otherwise track this path as a potential candidate and continue.\n            bestPath[diagonalPath] = basePath;\n          }\n        }\n\n        editLength++;\n      }\n\n      // Performs the length of edit iteration. Is a bit fugly as this has to support the\n      // sync and async mode which is never fun. Loops over execEditLength until a value\n      // is produced.\n      if (callback) {\n        (function exec() {\n          setTimeout(function() {\n            // This should not happen, but we want to be safe.\n            /*istanbul ignore next */\n            if (editLength > maxEditLength) {\n              return callback();\n            }\n\n            if (!execEditLength()) {\n              exec();\n            }\n          }, 0);\n        }());\n      } else {\n        while (editLength <= maxEditLength) {\n          var ret = execEditLength();\n          if (ret) {\n            return ret;\n          }\n        }\n      }\n    },\n\n    pushComponent: function(components, added, removed) {\n      var last = components[components.length - 1];\n      if (last && last.added === added && last.removed === removed) {\n        // We need to clone here as the component clone operation is just\n        // as shallow array clone\n        components[components.length - 1] = {count: last.count + 1, added: added, removed: removed };\n      } else {\n        components.push({count: 1, added: added, removed: removed });\n      }\n    },\n    extractCommon: function(basePath, newString, oldString, diagonalPath) {\n      var newLen = newString.length,\n          oldLen = oldString.length,\n          newPos = basePath.newPos,\n          oldPos = newPos - diagonalPath,\n\n          commonCount = 0;\n      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n        newPos++;\n        oldPos++;\n        commonCount++;\n      }\n\n      if (commonCount) {\n        basePath.components.push({count: commonCount});\n      }\n\n      basePath.newPos = newPos;\n      return oldPos;\n    },\n\n    equals: function(left, right) {\n      var reWhitespace = /\\S/;\n      return left === right || (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right));\n    },\n    tokenize: function(value) {\n      return value.split('');\n    }\n  };\n\n  var CharDiff = new Diff();\n\n  var WordDiff = new Diff(true);\n  var WordWithSpaceDiff = new Diff();\n  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/(\\s+|\\b)/));\n  };\n\n  var CssDiff = new Diff(true);\n  CssDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/([{}:;,]|\\s+)/));\n  };\n\n  var LineDiff = new Diff();\n\n  var TrimmedLineDiff = new Diff();\n  TrimmedLineDiff.ignoreTrim = true;\n\n  LineDiff.tokenize = TrimmedLineDiff.tokenize = function(value) {\n    var retLines = [],\n        lines = value.split(/^/m);\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i],\n          lastLine = lines[i - 1],\n          lastLineLastChar = lastLine && lastLine[lastLine.length - 1];\n\n      // Merge lines that may contain windows new lines\n      if (line === '\\n' && lastLineLastChar === '\\r') {\n          retLines[retLines.length - 1] = retLines[retLines.length - 1].slice(0, -1) + '\\r\\n';\n      } else {\n        if (this.ignoreTrim) {\n          line = line.trim();\n          // add a newline unless this is the last line.\n          if (i < lines.length - 1) {\n            line += '\\n';\n          }\n        }\n        retLines.push(line);\n      }\n    }\n\n    return retLines;\n  };\n\n  var PatchDiff = new Diff();\n  PatchDiff.tokenize = function(value) {\n    var ret = [],\n        linesAndNewlines = value.split(/(\\n|\\r\\n)/);\n\n    // Ignore the final empty token that occurs if the string ends with a new line\n    if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n      linesAndNewlines.pop();\n    }\n\n    // Merge the content and line separators into single tokens\n    for (var i = 0; i < linesAndNewlines.length; i++) {\n      var line = linesAndNewlines[i];\n\n      if (i % 2) {\n        ret[ret.length - 1] += line;\n      } else {\n        ret.push(line);\n      }\n    }\n    return ret;\n  };\n\n  var SentenceDiff = new Diff();\n  SentenceDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/(\\S.+?[.!?])(?=\\s+|$)/));\n  };\n\n  var JsonDiff = new Diff();\n  // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n  // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\n  JsonDiff.useLongestToken = true;\n  JsonDiff.tokenize = LineDiff.tokenize;\n  JsonDiff.equals = function(left, right) {\n    return LineDiff.equals(left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\n  };\n\n  var JsDiff = {\n    Diff: Diff,\n\n    diffChars: function(oldStr, newStr, callback) { return CharDiff.diff(oldStr, newStr, callback); },\n    diffWords: function(oldStr, newStr, callback) { return WordDiff.diff(oldStr, newStr, callback); },\n    diffWordsWithSpace: function(oldStr, newStr, callback) { return WordWithSpaceDiff.diff(oldStr, newStr, callback); },\n    diffLines: function(oldStr, newStr, callback) { return LineDiff.diff(oldStr, newStr, callback); },\n    diffTrimmedLines: function(oldStr, newStr, callback) { return TrimmedLineDiff.diff(oldStr, newStr, callback); },\n\n    diffSentences: function(oldStr, newStr, callback) { return SentenceDiff.diff(oldStr, newStr, callback); },\n\n    diffCss: function(oldStr, newStr, callback) { return CssDiff.diff(oldStr, newStr, callback); },\n    diffJson: function(oldObj, newObj, callback) {\n      return JsonDiff.diff(\n        typeof oldObj === 'string' ? oldObj : JSON.stringify(canonicalize(oldObj), undefined, '  '),\n        typeof newObj === 'string' ? newObj : JSON.stringify(canonicalize(newObj), undefined, '  '),\n        callback\n      );\n    },\n\n    createTwoFilesPatch: function(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader) {\n      var ret = [];\n\n      if (oldFileName == newFileName) {\n        ret.push('Index: ' + oldFileName);\n      }\n      ret.push('===================================================================');\n      ret.push('--- ' + oldFileName + (typeof oldHeader === 'undefined' ? '' : '\\t' + oldHeader));\n      ret.push('+++ ' + newFileName + (typeof newHeader === 'undefined' ? '' : '\\t' + newHeader));\n\n      var diff = PatchDiff.diff(oldStr, newStr);\n      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier\n\n      // Formats a given set of lines for printing as context lines in a patch\n      function contextLines(lines) {\n        return map(lines, function(entry) { return ' ' + entry; });\n      }\n\n      // Outputs the no newline at end of file warning if needed\n      function eofNL(curRange, i, current) {\n        var last = diff[diff.length - 2],\n            isLast = i === diff.length - 2,\n            isLastOfType = i === diff.length - 3 && current.added !== last.added;\n\n        // Figure out if this is the last line for the given file and missing NL\n        if (!(/\\n$/.test(current.value)) && (isLast || isLastOfType)) {\n          curRange.push('\\\\ No newline at end of file');\n        }\n      }\n\n      var oldRangeStart = 0, newRangeStart = 0, curRange = [],\n          oldLine = 1, newLine = 1;\n      for (var i = 0; i < diff.length; i++) {\n        var current = diff[i],\n            lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n        current.lines = lines;\n\n        if (current.added || current.removed) {\n          // If we have previous context, start with that\n          if (!oldRangeStart) {\n            var prev = diff[i - 1];\n            oldRangeStart = oldLine;\n            newRangeStart = newLine;\n\n            if (prev) {\n              curRange = contextLines(prev.lines.slice(-4));\n              oldRangeStart -= curRange.length;\n              newRangeStart -= curRange.length;\n            }\n          }\n\n          // Output our changes\n          curRange.push.apply(curRange, map(lines, function(entry) {\n            return (current.added ? '+' : '-') + entry;\n          }));\n          eofNL(curRange, i, current);\n\n          // Track the updated file position\n          if (current.added) {\n            newLine += lines.length;\n          } else {\n            oldLine += lines.length;\n          }\n        } else {\n          // Identical context lines. Track line changes\n          if (oldRangeStart) {\n            // Close out any changes that have been output (or join overlapping)\n            if (lines.length <= 8 && i < diff.length - 2) {\n              // Overlapping\n              curRange.push.apply(curRange, contextLines(lines));\n            } else {\n              // end the range and output\n              var contextSize = Math.min(lines.length, 4);\n              ret.push(\n                  '@@ -' + oldRangeStart + ',' + (oldLine - oldRangeStart + contextSize)\n                  + ' +' + newRangeStart + ',' + (newLine - newRangeStart + contextSize)\n                  + ' @@');\n              ret.push.apply(ret, curRange);\n              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));\n              if (lines.length <= 4) {\n                eofNL(ret, i, current);\n              }\n\n              oldRangeStart = 0;\n              newRangeStart = 0;\n              curRange = [];\n            }\n          }\n          oldLine += lines.length;\n          newLine += lines.length;\n        }\n      }\n\n      return ret.join('\\n') + '\\n';\n    },\n\n    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {\n      return JsDiff.createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader);\n    },\n\n    applyPatch: function(oldStr, uniDiff) {\n      var diffstr = uniDiff.split('\\n'),\n          hunks = [],\n          i = 0,\n          remEOFNL = false,\n          addEOFNL = false;\n\n      // Skip to the first change hunk\n      while (i < diffstr.length && !(/^@@/.test(diffstr[i]))) {\n        i++;\n      }\n\n      // Parse the unified diff\n      for (; i < diffstr.length; i++) {\n        if (diffstr[i][0] === '@') {\n          var chnukHeader = diffstr[i].split(/@@ -(\\d+),(\\d+) \\+(\\d+),(\\d+) @@/);\n          hunks.unshift({\n            start: chnukHeader[3],\n            oldlength: +chnukHeader[2],\n            removed: [],\n            newlength: chnukHeader[4],\n            added: []\n          });\n        } else if (diffstr[i][0] === '+') {\n          hunks[0].added.push(diffstr[i].substr(1));\n        } else if (diffstr[i][0] === '-') {\n          hunks[0].removed.push(diffstr[i].substr(1));\n        } else if (diffstr[i][0] === ' ') {\n          hunks[0].added.push(diffstr[i].substr(1));\n          hunks[0].removed.push(diffstr[i].substr(1));\n        } else if (diffstr[i][0] === '\\\\') {\n          if (diffstr[i - 1][0] === '+') {\n            remEOFNL = true;\n          } else if (diffstr[i - 1][0] === '-') {\n            addEOFNL = true;\n          }\n        }\n      }\n\n      // Apply the diff to the input\n      var lines = oldStr.split('\\n');\n      for (i = hunks.length - 1; i >= 0; i--) {\n        var hunk = hunks[i];\n        // Sanity check the input string. Bail if we don't match.\n        for (var j = 0; j < hunk.oldlength; j++) {\n          if (lines[hunk.start - 1 + j] !== hunk.removed[j]) {\n            return false;\n          }\n        }\n        Array.prototype.splice.apply(lines, [hunk.start - 1, hunk.oldlength].concat(hunk.added));\n      }\n\n      // Handle EOFNL insertion/removal\n      if (remEOFNL) {\n        while (!lines[lines.length - 1]) {\n          lines.pop();\n        }\n      } else if (addEOFNL) {\n        lines.push('');\n      }\n      return lines.join('\\n');\n    },\n\n    convertChangesToXML: function(changes) {\n      var ret = [];\n      for (var i = 0; i < changes.length; i++) {\n        var change = changes[i];\n        if (change.added) {\n          ret.push('<ins>');\n        } else if (change.removed) {\n          ret.push('<del>');\n        }\n\n        ret.push(escapeHTML(change.value));\n\n        if (change.added) {\n          ret.push('</ins>');\n        } else if (change.removed) {\n          ret.push('</del>');\n        }\n      }\n      return ret.join('');\n    },\n\n    // See: http://code.google.com/p/google-diff-match-patch/wiki/API\n    convertChangesToDMP: function(changes) {\n      var ret = [],\n          change,\n          operation;\n      for (var i = 0; i < changes.length; i++) {\n        change = changes[i];\n        if (change.added) {\n          operation = 1;\n        } else if (change.removed) {\n          operation = -1;\n        } else {\n          operation = 0;\n        }\n\n        ret.push([operation, change.value]);\n      }\n      return ret;\n    },\n\n    canonicalize: canonicalize\n  };\n\n  /*istanbul ignore next */\n  /*global module */\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = JsDiff;\n  } else if (false) {\n    /*global define */\n    define([], function() { return JsDiff; });\n  } else if (typeof global.JsDiff === 'undefined') {\n    global.JsDiff = JsDiff;\n  }\n}(this));\n\n},{}],47:[function(require,module,exports){\n'use strict';\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn str.replace(matchOperatorsRe, '\\\\$&');\n};\n\n},{}],48:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],49:[function(require,module,exports){\n(function (process){\n// Growl - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)\n\n/**\n * Module dependencies.\n */\n\nvar exec = require('child_process').exec\n  , fs = require('fs')\n  , path = require('path')\n  , exists = fs.existsSync || path.existsSync\n  , os = require('os')\n  , quote = JSON.stringify\n  , cmd;\n\nfunction which(name) {\n  var paths = process.env.PATH.split(':');\n  var loc;\n\n  for (var i = 0, len = paths.length; i < len; ++i) {\n    loc = path.join(paths[i], name);\n    if (exists(loc)) return loc;\n  }\n}\n\nswitch(os.type()) {\n  case 'Darwin':\n    if (which('terminal-notifier')) {\n      cmd = {\n          type: \"Darwin-NotificationCenter\"\n        , pkg: \"terminal-notifier\"\n        , msg: '-message'\n        , title: '-title'\n        , subtitle: '-subtitle'\n        , icon: '-appIcon'\n        , sound:  '-sound'\n        , url: '-open'\n        , priority: {\n              cmd: '-execute'\n            , range: []\n          }\n      };\n    } else {\n      cmd = {\n          type: \"Darwin-Growl\"\n        , pkg: \"growlnotify\"\n        , msg: '-m'\n        , sticky: '--sticky'\n        , priority: {\n              cmd: '--priority'\n            , range: [\n                -2\n              , -1\n              , 0\n              , 1\n              , 2\n              , \"Very Low\"\n              , \"Moderate\"\n              , \"Normal\"\n              , \"High\"\n              , \"Emergency\"\n            ]\n          }\n      };\n    }\n    break;\n  case 'Linux':\n    if (which('growl')) {\n      cmd = {\n          type: \"Linux-Growl\"\n        , pkg: \"growl\"\n        , msg: '-m'\n        , title: '-title'\n        , subtitle: '-subtitle'\n        , host: {\n            cmd: '-H'\n          , hostname: '192.168.33.1'\n        }\n      };\n    } else {\n      cmd = {\n          type: \"Linux\"\n        , pkg: \"notify-send\"\n        , msg: ''\n        , sticky: '-t 0'\n        , icon: '-i'\n        , priority: {\n            cmd: '-u'\n          , range: [\n              \"low\"\n            , \"normal\"\n            , \"critical\"\n          ]\n        }\n      };\n    }\n    break;\n  case 'Windows_NT':\n    cmd = {\n        type: \"Windows\"\n      , pkg: \"growlnotify\"\n      , msg: ''\n      , sticky: '/s:true'\n      , title: '/t:'\n      , icon: '/i:'\n      , url: '/cu:'\n      , priority: {\n            cmd: '/p:'\n          , range: [\n              -2\n            , -1\n            , 0\n            , 1\n            , 2\n          ]\n        }\n    };\n    break;\n}\n\n/**\n * Expose `growl`.\n */\n\nexports = module.exports = growl;\n\n/**\n * Node-growl version.\n */\n\nexports.version = '1.4.1'\n\n/**\n * Send growl notification _msg_ with _options_.\n *\n * Options:\n *\n *  - title   Notification title\n *  - sticky  Make the notification stick (defaults to false)\n *  - priority  Specify an int or named key (default is 0)\n *  - name    Application name (defaults to growlnotify)\n *  - sound   Sound efect ( in OSx defined in preferences -> sound -> effects) * works only in OSX > 10.8x\n *  - image\n *    - path to an icon sets --iconpath\n *    - path to an image sets --image\n *    - capitalized word sets --appIcon\n *    - filename uses extname as --icon\n *    - otherwise treated as --icon\n *\n * Examples:\n *\n *   growl('New email')\n *   growl('5 new emails', { title: 'Thunderbird' })\n *   growl('5 new emails', { title: 'Thunderbird', sound: 'Purr' })\n *   growl('Email sent', function(){\n *     // ... notification sent\n *   })\n *\n * @param {string} msg\n * @param {object} options\n * @param {function} fn\n * @api public\n */\n\nfunction growl(msg, options, fn) {\n  var image\n    , args\n    , options = options || {}\n    , fn = fn || function(){};\n\n  if (options.exec) {\n    cmd = {\n        type: \"Custom\"\n      , pkg: options.exec\n      , range: []\n    };\n  }\n\n  // noop\n  if (!cmd) return fn(new Error('growl not supported on this platform'));\n  args = [cmd.pkg];\n\n  // image\n  if (image = options.image) {\n    switch(cmd.type) {\n      case 'Darwin-Growl':\n        var flag, ext = path.extname(image).substr(1)\n        flag = flag || ext == 'icns' && 'iconpath'\n        flag = flag || /^[A-Z]/.test(image) && 'appIcon'\n        flag = flag || /^png|gif|jpe?g$/.test(ext) && 'image'\n        flag = flag || ext && (image = ext) && 'icon'\n        flag = flag || 'icon'\n        args.push('--' + flag, quote(image))\n        break;\n      case 'Darwin-NotificationCenter':\n        args.push(cmd.icon, quote(image));\n        break;\n      case 'Linux':\n        args.push(cmd.icon, quote(image));\n        // libnotify defaults to sticky, set a hint for transient notifications\n        if (!options.sticky) args.push('--hint=int:transient:1');\n        break;\n      case 'Windows':\n        args.push(cmd.icon + quote(image));\n        break;\n    }\n  }\n\n  // sticky\n  if (options.sticky) args.push(cmd.sticky);\n\n  // priority\n  if (options.priority) {\n    var priority = options.priority + '';\n    var checkindexOf = cmd.priority.range.indexOf(priority);\n    if (~cmd.priority.range.indexOf(priority)) {\n      args.push(cmd.priority, options.priority);\n    }\n  }\n\n  //sound\n  if(options.sound && cmd.type === 'Darwin-NotificationCenter'){\n    args.push(cmd.sound, options.sound)\n  }\n\n  // name\n  if (options.name && cmd.type === \"Darwin-Growl\") {\n    args.push('--name', options.name);\n  }\n\n  switch(cmd.type) {\n    case 'Darwin-Growl':\n      args.push(cmd.msg);\n      args.push(quote(msg).replace(/\\\\n/g, '\\n'));\n      if (options.title) args.push(quote(options.title));\n      break;\n    case 'Darwin-NotificationCenter':\n      args.push(cmd.msg);\n      var stringifiedMsg = quote(msg);\n      var escapedMsg = stringifiedMsg.replace(/\\\\n/g, '\\n');\n      args.push(escapedMsg);\n      if (options.title) {\n        args.push(cmd.title);\n        args.push(quote(options.title));\n      }\n      if (options.subtitle) {\n        args.push(cmd.subtitle);\n        args.push(quote(options.subtitle));\n      }\n      if (options.url) {\n        args.push(cmd.url);\n        args.push(quote(options.url));\n      }\n      break;\n    case 'Linux-Growl':\n      args.push(cmd.msg);\n      args.push(quote(msg).replace(/\\\\n/g, '\\n'));\n      if (options.title) args.push(quote(options.title));\n      if (cmd.host) {\n        args.push(cmd.host.cmd, cmd.host.hostname)\n      }\n      break;\n    case 'Linux':\n      if (options.title) {\n        args.push(quote(options.title));\n        args.push(cmd.msg);\n        args.push(quote(msg).replace(/\\\\n/g, '\\n'));\n      } else {\n        args.push(quote(msg).replace(/\\\\n/g, '\\n'));\n      }\n      break;\n    case 'Windows':\n      args.push(quote(msg).replace(/\\\\n/g, '\\n'));\n      if (options.title) args.push(cmd.title + quote(options.title));\n      if (options.url) args.push(cmd.url + quote(options.url));\n      break;\n    case 'Custom':\n      args[0] = (function(origCommand) {\n        var message = options.title\n          ? options.title + ': ' + msg\n          : msg;\n        var command = origCommand.replace(/(^|[^%])%s/g, '$1' + quote(message));\n        if (command === origCommand) args.push(quote(message));\n        return command;\n      })(args[0]);\n      break;\n  }\n\n  // execute\n  exec(args.join(' '), fn);\n};\n\n}).call(this,require('_process'))\n},{\"_process\":67,\"child_process\":42,\"fs\":42,\"os\":65,\"path\":42}],50:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],51:[function(require,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],52:[function(require,module,exports){\n/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n\n},{}],53:[function(require,module,exports){\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n},{}],54:[function(require,module,exports){\n(function (global){\n/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */\n;(function () {\n  // Detect the `define` function exposed by asynchronous module loaders. The\n  // strict `define` check is necessary for compatibility with `r.js`.\n  var isLoader = false;\n\n  // A set of types used to distinguish objects from primitives.\n  var objectTypes = {\n    \"function\": true,\n    \"object\": true\n  };\n\n  // Detect the `exports` object exposed by CommonJS implementations.\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  // Use the `global` object exposed by Node (including Browserify via\n  // `insert-module-globals`), Narwhal, and Ringo as the default context,\n  // and the `window` object in browsers. Rhino exports a `global` function\n  // instead.\n  var root = objectTypes[typeof window] && window || this,\n      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == \"object\" && global;\n\n  if (freeGlobal && (freeGlobal[\"global\"] === freeGlobal || freeGlobal[\"window\"] === freeGlobal || freeGlobal[\"self\"] === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Public: Initializes JSON 3 using the given `context` object, attaching the\n  // `stringify` and `parse` functions to the specified `exports` object.\n  function runInContext(context, exports) {\n    context || (context = root[\"Object\"]());\n    exports || (exports = root[\"Object\"]());\n\n    // Native constructor aliases.\n    var Number = context[\"Number\"] || root[\"Number\"],\n        String = context[\"String\"] || root[\"String\"],\n        Object = context[\"Object\"] || root[\"Object\"],\n        Date = context[\"Date\"] || root[\"Date\"],\n        SyntaxError = context[\"SyntaxError\"] || root[\"SyntaxError\"],\n        TypeError = context[\"TypeError\"] || root[\"TypeError\"],\n        Math = context[\"Math\"] || root[\"Math\"],\n        nativeJSON = context[\"JSON\"] || root[\"JSON\"];\n\n    // Delegate to the native `stringify` and `parse` implementations.\n    if (typeof nativeJSON == \"object\" && nativeJSON) {\n      exports.stringify = nativeJSON.stringify;\n      exports.parse = nativeJSON.parse;\n    }\n\n    // Convenience aliases.\n    var objectProto = Object.prototype,\n        getClass = objectProto.toString,\n        isProperty, forEach, undef;\n\n    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\n    var isExtended = new Date(-3509827334573292);\n    try {\n      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\n      // results for certain dates in Opera >= 10.53.\n      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&\n        // Safari < 2.0.2 stores the internal millisecond time value correctly,\n        // but clips the values returned by the date methods to the range of\n        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).\n        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\n    } catch (exception) {}\n\n    // Internal: Determines whether the native `JSON.stringify` and `parse`\n    // implementations are spec-compliant. Based on work by Ken Snyder.\n    function has(name) {\n      if (has[name] !== undef) {\n        // Return cached feature test result.\n        return has[name];\n      }\n      var isSupported;\n      if (name == \"bug-string-char-index\") {\n        // IE <= 7 doesn't support accessing string characters using square\n        // bracket notation. IE 8 only supports this for primitives.\n        isSupported = \"a\"[0] != \"a\";\n      } else if (name == \"json\") {\n        // Indicates whether both `JSON.stringify` and `JSON.parse` are\n        // supported.\n        isSupported = has(\"json-stringify\") && has(\"json-parse\");\n      } else {\n        var value, serialized = '{\"a\":[1,true,false,null,\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\"]}';\n        // Test `JSON.stringify`.\n        if (name == \"json-stringify\") {\n          var stringify = exports.stringify, stringifySupported = typeof stringify == \"function\" && isExtended;\n          if (stringifySupported) {\n            // A test function object with a custom `toJSON` method.\n            (value = function () {\n              return 1;\n            }).toJSON = value;\n            try {\n              stringifySupported =\n                // Firefox 3.1b1 and b2 serialize string, number, and boolean\n                // primitives as object literals.\n                stringify(0) === \"0\" &&\n                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\n                // literals.\n                stringify(new Number()) === \"0\" &&\n                stringify(new String()) == '\"\"' &&\n                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\n                // does not define a canonical JSON representation (this applies to\n                // objects with `toJSON` properties as well, *unless* they are nested\n                // within an object or array).\n                stringify(getClass) === undef &&\n                // IE 8 serializes `undefined` as `\"undefined\"`. Safari <= 5.1.7 and\n                // FF 3.1b3 pass this test.\n                stringify(undef) === undef &&\n                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\n                // respectively, if the value is omitted entirely.\n                stringify() === undef &&\n                // FF 3.1b1, 2 throw an error if the given value is not a number,\n                // string, array, object, Boolean, or `null` literal. This applies to\n                // objects with custom `toJSON` methods as well, unless they are nested\n                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\n                // methods entirely.\n                stringify(value) === \"1\" &&\n                stringify([value]) == \"[1]\" &&\n                // Prototype <= 1.6.1 serializes `[undefined]` as `\"[]\"` instead of\n                // `\"[null]\"`.\n                stringify([undef]) == \"[null]\" &&\n                // YUI 3.0.0b1 fails to serialize `null` literals.\n                stringify(null) == \"null\" &&\n                // FF 3.1b1, 2 halts serialization if an array contains a function:\n                // `[1, true, getClass, 1]` serializes as \"[1,true,],\". FF 3.1b3\n                // elides non-JSON values from objects and arrays, unless they\n                // define custom `toJSON` methods.\n                stringify([undef, getClass, null]) == \"[null,null,null]\" &&\n                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\n                // where character escape codes are expected (e.g., `\\b` => `\\u0008`).\n                stringify({ \"a\": [value, true, false, null, \"\\x00\\b\\n\\f\\r\\t\"] }) == serialized &&\n                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\n                stringify(null, value) === \"1\" &&\n                stringify([1, 2], null, 1) == \"[\\n 1,\\n 2\\n]\" &&\n                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\n                // serialize extended years.\n                stringify(new Date(-8.64e15)) == '\"-271821-04-20T00:00:00.000Z\"' &&\n                // The milliseconds are optional in ES 5, but required in 5.1.\n                stringify(new Date(8.64e15)) == '\"+275760-09-13T00:00:00.000Z\"' &&\n                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\n                // four-digit years instead of six-digit years. Credits: @Yaffle.\n                stringify(new Date(-621987552e5)) == '\"-000001-01-01T00:00:00.000Z\"' &&\n                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\n                // values less than 1000. Credits: @Yaffle.\n                stringify(new Date(-1)) == '\"1969-12-31T23:59:59.999Z\"';\n            } catch (exception) {\n              stringifySupported = false;\n            }\n          }\n          isSupported = stringifySupported;\n        }\n        // Test `JSON.parse`.\n        if (name == \"json-parse\") {\n          var parse = exports.parse;\n          if (typeof parse == \"function\") {\n            try {\n              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\n              // Conforming implementations should also coerce the initial argument to\n              // a string prior to parsing.\n              if (parse(\"0\") === 0 && !parse(false)) {\n                // Simple parsing test.\n                value = parse(serialized);\n                var parseSupported = value[\"a\"].length == 5 && value[\"a\"][0] === 1;\n                if (parseSupported) {\n                  try {\n                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\n                    parseSupported = !parse('\"\\t\"');\n                  } catch (exception) {}\n                  if (parseSupported) {\n                    try {\n                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading\n                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\n                      // certain octal literals.\n                      parseSupported = parse(\"01\") !== 1;\n                    } catch (exception) {}\n                  }\n                  if (parseSupported) {\n                    try {\n                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\n                      // points. These environments, along with FF 3.1b1 and 2,\n                      // also allow trailing commas in JSON objects and arrays.\n                      parseSupported = parse(\"1.\") !== 1;\n                    } catch (exception) {}\n                  }\n                }\n              }\n            } catch (exception) {\n              parseSupported = false;\n            }\n          }\n          isSupported = parseSupported;\n        }\n      }\n      return has[name] = !!isSupported;\n    }\n\n    if (!has(\"json\")) {\n      // Common `[[Class]]` name aliases.\n      var functionClass = \"[object Function]\",\n          dateClass = \"[object Date]\",\n          numberClass = \"[object Number]\",\n          stringClass = \"[object String]\",\n          arrayClass = \"[object Array]\",\n          booleanClass = \"[object Boolean]\";\n\n      // Detect incomplete support for accessing string characters by index.\n      var charIndexBuggy = has(\"bug-string-char-index\");\n\n      // Define additional utility methods if the `Date` methods are buggy.\n      if (!isExtended) {\n        var floor = Math.floor;\n        // A mapping between the months of the year and the number of days between\n        // January 1st and the first of the respective month.\n        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n        // Internal: Calculates the number of days between the Unix epoch and the\n        // first day of the given month.\n        var getDay = function (year, month) {\n          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\n        };\n      }\n\n      // Internal: Determines if a property is a direct property of the given\n      // object. Delegates to the native `Object#hasOwnProperty` method.\n      if (!(isProperty = objectProto.hasOwnProperty)) {\n        isProperty = function (property) {\n          var members = {}, constructor;\n          if ((members.__proto__ = null, members.__proto__ = {\n            // The *proto* property cannot be set multiple times in recent\n            // versions of Firefox and SeaMonkey.\n            \"toString\": 1\n          }, members).toString != getClass) {\n            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but\n            // supports the mutable *proto* property.\n            isProperty = function (property) {\n              // Capture and break the object's prototype chain (see section 8.6.2\n              // of the ES 5.1 spec). The parenthesized expression prevents an\n              // unsafe transformation by the Closure Compiler.\n              var original = this.__proto__, result = property in (this.__proto__ = null, this);\n              // Restore the original prototype chain.\n              this.__proto__ = original;\n              return result;\n            };\n          } else {\n            // Capture a reference to the top-level `Object` constructor.\n            constructor = members.constructor;\n            // Use the `constructor` property to simulate `Object#hasOwnProperty` in\n            // other environments.\n            isProperty = function (property) {\n              var parent = (this.constructor || constructor).prototype;\n              return property in this && !(property in parent && this[property] === parent[property]);\n            };\n          }\n          members = null;\n          return isProperty.call(this, property);\n        };\n      }\n\n      // Internal: Normalizes the `for...in` iteration algorithm across\n      // environments. Each enumerated key is yielded to a `callback` function.\n      forEach = function (object, callback) {\n        var size = 0, Properties, members, property;\n\n        // Tests for bugs in the current environment's `for...in` algorithm. The\n        // `valueOf` property inherits the non-enumerable flag from\n        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\n        (Properties = function () {\n          this.valueOf = 0;\n        }).prototype.valueOf = 0;\n\n        // Iterate over a new instance of the `Properties` class.\n        members = new Properties();\n        for (property in members) {\n          // Ignore all properties inherited from `Object.prototype`.\n          if (isProperty.call(members, property)) {\n            size++;\n          }\n        }\n        Properties = members = null;\n\n        // Normalize the iteration algorithm.\n        if (!size) {\n          // A list of non-enumerable properties inherited from `Object.prototype`.\n          members = [\"valueOf\", \"toString\", \"toLocaleString\", \"propertyIsEnumerable\", \"isPrototypeOf\", \"hasOwnProperty\", \"constructor\"];\n          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\n          // properties.\n          forEach = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass, property, length;\n            var hasProperty = !isFunction && typeof object.constructor != \"function\" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;\n            for (property in object) {\n              // Gecko <= 1.0 enumerates the `prototype` property of functions under\n              // certain conditions; IE does not.\n              if (!(isFunction && property == \"prototype\") && hasProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n            // Manually invoke the callback for each non-enumerable property.\n            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));\n          };\n        } else if (size == 2) {\n          // Safari <= 2.0.4 enumerates shadowed properties twice.\n          forEach = function (object, callback) {\n            // Create a set of iterated properties.\n            var members = {}, isFunction = getClass.call(object) == functionClass, property;\n            for (property in object) {\n              // Store each property name to prevent double enumeration. The\n              // `prototype` property of functions is not enumerated due to cross-\n              // environment inconsistencies.\n              if (!(isFunction && property == \"prototype\") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n          };\n        } else {\n          // No bugs detected; use the standard `for...in` algorithm.\n          forEach = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass, property, isConstructor;\n            for (property in object) {\n              if (!(isFunction && property == \"prototype\") && isProperty.call(object, property) && !(isConstructor = property === \"constructor\")) {\n                callback(property);\n              }\n            }\n            // Manually invoke the callback for the `constructor` property due to\n            // cross-environment inconsistencies.\n            if (isConstructor || isProperty.call(object, (property = \"constructor\"))) {\n              callback(property);\n            }\n          };\n        }\n        return forEach(object, callback);\n      };\n\n      // Public: Serializes a JavaScript `value` as a JSON string. The optional\n      // `filter` argument may specify either a function that alters how object and\n      // array members are serialized, or an array of strings and numbers that\n      // indicates which properties should be serialized. The optional `width`\n      // argument may be either a string or number that specifies the indentation\n      // level of the output.\n      if (!has(\"json-stringify\")) {\n        // Internal: A map of control characters and their escaped equivalents.\n        var Escapes = {\n          92: \"\\\\\\\\\",\n          34: '\\\\\"',\n          8: \"\\\\b\",\n          12: \"\\\\f\",\n          10: \"\\\\n\",\n          13: \"\\\\r\",\n          9: \"\\\\t\"\n        };\n\n        // Internal: Converts `value` into a zero-padded string such that its\n        // length is at least equal to `width`. The `width` must be <= 6.\n        var leadingZeroes = \"000000\";\n        var toPaddedString = function (width, value) {\n          // The `|| 0` expression is necessary to work around a bug in\n          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \"0\"`.\n          return (leadingZeroes + (value || 0)).slice(-width);\n        };\n\n        // Internal: Double-quotes a string `value`, replacing all ASCII control\n        // characters (characters with code unit values between 0 and 31) with\n        // their escaped equivalents. This is an implementation of the\n        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\n        var unicodePrefix = \"\\\\u00\";\n        var quote = function (value) {\n          var result = '\"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;\n          var symbols = useCharIndex && (charIndexBuggy ? value.split(\"\") : value);\n          for (; index < length; index++) {\n            var charCode = value.charCodeAt(index);\n            // If the character is a control character, append its Unicode or\n            // shorthand escape sequence; otherwise, append the character as-is.\n            switch (charCode) {\n              case 8: case 9: case 10: case 12: case 13: case 34: case 92:\n                result += Escapes[charCode];\n                break;\n              default:\n                if (charCode < 32) {\n                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));\n                  break;\n                }\n                result += useCharIndex ? symbols[index] : value.charAt(index);\n            }\n          }\n          return result + '\"';\n        };\n\n        // Internal: Recursively serializes an object. Implements the\n        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\n        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {\n          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;\n          try {\n            // Necessary for host object support.\n            value = object[property];\n          } catch (exception) {}\n          if (typeof value == \"object\" && value) {\n            className = getClass.call(value);\n            if (className == dateClass && !isProperty.call(value, \"toJSON\")) {\n              if (value > -1 / 0 && value < 1 / 0) {\n                // Dates are serialized according to the `Date#toJSON` method\n                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\n                // for the ISO 8601 date time string format.\n                if (getDay) {\n                  // Manually compute the year, month, date, hours, minutes,\n                  // seconds, and milliseconds if the `getUTC*` methods are\n                  // buggy. Adapted from @Yaffle's `date-shim` project.\n                  date = floor(value / 864e5);\n                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);\n                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);\n                  date = 1 + date - getDay(year, month);\n                  // The `time` value specifies the time within the day (see ES\n                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\n                  // to compute `A modulo B`, as the `%` operator does not\n                  // correspond to the `modulo` operation for negative numbers.\n                  time = (value % 864e5 + 864e5) % 864e5;\n                  // The hours, minutes, seconds, and milliseconds are obtained by\n                  // decomposing the time within the day. See section 15.9.1.10.\n                  hours = floor(time / 36e5) % 24;\n                  minutes = floor(time / 6e4) % 60;\n                  seconds = floor(time / 1e3) % 60;\n                  milliseconds = time % 1e3;\n                } else {\n                  year = value.getUTCFullYear();\n                  month = value.getUTCMonth();\n                  date = value.getUTCDate();\n                  hours = value.getUTCHours();\n                  minutes = value.getUTCMinutes();\n                  seconds = value.getUTCSeconds();\n                  milliseconds = value.getUTCMilliseconds();\n                }\n                // Serialize extended years correctly.\n                value = (year <= 0 || year >= 1e4 ? (year < 0 ? \"-\" : \"+\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +\n                  \"-\" + toPaddedString(2, month + 1) + \"-\" + toPaddedString(2, date) +\n                  // Months, dates, hours, minutes, and seconds should have two\n                  // digits; milliseconds should have three.\n                  \"T\" + toPaddedString(2, hours) + \":\" + toPaddedString(2, minutes) + \":\" + toPaddedString(2, seconds) +\n                  // Milliseconds are optional in ES 5.0, but required in 5.1.\n                  \".\" + toPaddedString(3, milliseconds) + \"Z\";\n              } else {\n                value = null;\n              }\n            } else if (typeof value.toJSON == \"function\" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, \"toJSON\"))) {\n              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the\n              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3\n              // ignores all `toJSON` methods on these objects unless they are\n              // defined directly on an instance.\n              value = value.toJSON(property);\n            }\n          }\n          if (callback) {\n            // If a replacement function was provided, call it to obtain the value\n            // for serialization.\n            value = callback.call(object, property, value);\n          }\n          if (value === null) {\n            return \"null\";\n          }\n          className = getClass.call(value);\n          if (className == booleanClass) {\n            // Booleans are represented literally.\n            return \"\" + value;\n          } else if (className == numberClass) {\n            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\n            // `\"null\"`.\n            return value > -1 / 0 && value < 1 / 0 ? \"\" + value : \"null\";\n          } else if (className == stringClass) {\n            // Strings are double-quoted and escaped.\n            return quote(\"\" + value);\n          }\n          // Recursively serialize objects and arrays.\n          if (typeof value == \"object\") {\n            // Check for cyclic structures. This is a linear search; performance\n            // is inversely proportional to the number of unique nested objects.\n            for (length = stack.length; length--;) {\n              if (stack[length] === value) {\n                // Cyclic structures cannot be serialized by `JSON.stringify`.\n                throw TypeError();\n              }\n            }\n            // Add the object to the stack of traversed objects.\n            stack.push(value);\n            results = [];\n            // Save the current indentation level and indent one additional level.\n            prefix = indentation;\n            indentation += whitespace;\n            if (className == arrayClass) {\n              // Recursively serialize array elements.\n              for (index = 0, length = value.length; index < length; index++) {\n                element = serialize(index, value, callback, properties, whitespace, indentation, stack);\n                results.push(element === undef ? \"null\" : element);\n              }\n              result = results.length ? (whitespace ? \"[\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"]\" : (\"[\" + results.join(\",\") + \"]\")) : \"[]\";\n            } else {\n              // Recursively serialize object members. Members are selected from\n              // either a user-specified list of property names, or the object\n              // itself.\n              forEach(properties || value, function (property) {\n                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\n                if (element !== undef) {\n                  // According to ES 5.1 section 15.12.3: \"If `gap` {whitespace}\n                  // is not the empty string, let `member` {quote(property) + \":\"}\n                  // be the concatenation of `member` and the `space` character.\"\n                  // The \"`space` character\" refers to the literal space\n                  // character, not the `space` {width} argument provided to\n                  // `JSON.stringify`.\n                  results.push(quote(property) + \":\" + (whitespace ? \" \" : \"\") + element);\n                }\n              });\n              result = results.length ? (whitespace ? \"{\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"}\" : (\"{\" + results.join(\",\") + \"}\")) : \"{}\";\n            }\n            // Remove the object from the traversed object stack.\n            stack.pop();\n            return result;\n          }\n        };\n\n        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n        exports.stringify = function (source, filter, width) {\n          var whitespace, callback, properties, className;\n          if (objectTypes[typeof filter] && filter) {\n            if ((className = getClass.call(filter)) == functionClass) {\n              callback = filter;\n            } else if (className == arrayClass) {\n              // Convert the property names array into a makeshift set.\n              properties = {};\n              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));\n            }\n          }\n          if (width) {\n            if ((className = getClass.call(width)) == numberClass) {\n              // Convert the `width` to an integer and create a string containing\n              // `width` number of space characters.\n              if ((width -= width % 1) > 0) {\n                for (whitespace = \"\", width > 10 && (width = 10); whitespace.length < width; whitespace += \" \");\n              }\n            } else if (className == stringClass) {\n              whitespace = width.length <= 10 ? width : width.slice(0, 10);\n            }\n          }\n          // Opera <= 7.54u2 discards the values associated with empty string keys\n          // (`\"\"`) only if they are used directly within an object member list\n          // (e.g., `!(\"\" in { \"\": 1})`).\n          return serialize(\"\", (value = {}, value[\"\"] = source, value), callback, properties, whitespace, \"\", []);\n        };\n      }\n\n      // Public: Parses a JSON source string.\n      if (!has(\"json-parse\")) {\n        var fromCharCode = String.fromCharCode;\n\n        // Internal: A map of escaped control characters and their unescaped\n        // equivalents.\n        var Unescapes = {\n          92: \"\\\\\",\n          34: '\"',\n          47: \"/\",\n          98: \"\\b\",\n          116: \"\\t\",\n          110: \"\\n\",\n          102: \"\\f\",\n          114: \"\\r\"\n        };\n\n        // Internal: Stores the parser state.\n        var Index, Source;\n\n        // Internal: Resets the parser state and throws a `SyntaxError`.\n        var abort = function () {\n          Index = Source = null;\n          throw SyntaxError();\n        };\n\n        // Internal: Returns the next token, or `\"$\"` if the parser has reached\n        // the end of the source string. A token may be a string, number, `null`\n        // literal, or Boolean literal.\n        var lex = function () {\n          var source = Source, length = source.length, value, begin, position, isSigned, charCode;\n          while (Index < length) {\n            charCode = source.charCodeAt(Index);\n            switch (charCode) {\n              case 9: case 10: case 13: case 32:\n                // Skip whitespace tokens, including tabs, carriage returns, line\n                // feeds, and space characters.\n                Index++;\n                break;\n              case 123: case 125: case 91: case 93: case 58: case 44:\n                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\n                // the current position.\n                value = charIndexBuggy ? source.charAt(Index) : source[Index];\n                Index++;\n                return value;\n              case 34:\n                // `\"` delimits a JSON string; advance to the next character and\n                // begin parsing the string. String tokens are prefixed with the\n                // sentinel `@` character to distinguish them from punctuators and\n                // end-of-string tokens.\n                for (value = \"@\", Index++; Index < length;) {\n                  charCode = source.charCodeAt(Index);\n                  if (charCode < 32) {\n                    // Unescaped ASCII control characters (those with a code unit\n                    // less than the space character) are not permitted.\n                    abort();\n                  } else if (charCode == 92) {\n                    // A reverse solidus (`\\`) marks the beginning of an escaped\n                    // control character (including `\"`, `\\`, and `/`) or Unicode\n                    // escape sequence.\n                    charCode = source.charCodeAt(++Index);\n                    switch (charCode) {\n                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:\n                        // Revive escaped control characters.\n                        value += Unescapes[charCode];\n                        Index++;\n                        break;\n                      case 117:\n                        // `\\u` marks the beginning of a Unicode escape sequence.\n                        // Advance to the first character and validate the\n                        // four-digit code point.\n                        begin = ++Index;\n                        for (position = Index + 4; Index < position; Index++) {\n                          charCode = source.charCodeAt(Index);\n                          // A valid sequence comprises four hexdigits (case-\n                          // insensitive) that form a single hexadecimal value.\n                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\n                            // Invalid Unicode escape sequence.\n                            abort();\n                          }\n                        }\n                        // Revive the escaped character.\n                        value += fromCharCode(\"0x\" + source.slice(begin, Index));\n                        break;\n                      default:\n                        // Invalid escape sequence.\n                        abort();\n                    }\n                  } else {\n                    if (charCode == 34) {\n                      // An unescaped double-quote character marks the end of the\n                      // string.\n                      break;\n                    }\n                    charCode = source.charCodeAt(Index);\n                    begin = Index;\n                    // Optimize for the common case where a string is valid.\n                    while (charCode >= 32 && charCode != 92 && charCode != 34) {\n                      charCode = source.charCodeAt(++Index);\n                    }\n                    // Append the string as-is.\n                    value += source.slice(begin, Index);\n                  }\n                }\n                if (source.charCodeAt(Index) == 34) {\n                  // Advance to the next character and return the revived string.\n                  Index++;\n                  return value;\n                }\n                // Unterminated string.\n                abort();\n              default:\n                // Parse numbers and literals.\n                begin = Index;\n                // Advance past the negative sign, if one is specified.\n                if (charCode == 45) {\n                  isSigned = true;\n                  charCode = source.charCodeAt(++Index);\n                }\n                // Parse an integer or floating-point value.\n                if (charCode >= 48 && charCode <= 57) {\n                  // Leading zeroes are interpreted as octal literals.\n                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {\n                    // Illegal octal literal.\n                    abort();\n                  }\n                  isSigned = false;\n                  // Parse the integer component.\n                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);\n                  // Floats cannot contain a leading decimal point; however, this\n                  // case is already accounted for by the parser.\n                  if (source.charCodeAt(Index) == 46) {\n                    position = ++Index;\n                    // Parse the decimal component.\n                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\n                    if (position == Index) {\n                      // Illegal trailing decimal.\n                      abort();\n                    }\n                    Index = position;\n                  }\n                  // Parse exponents. The `e` denoting the exponent is\n                  // case-insensitive.\n                  charCode = source.charCodeAt(Index);\n                  if (charCode == 101 || charCode == 69) {\n                    charCode = source.charCodeAt(++Index);\n                    // Skip past the sign following the exponent, if one is\n                    // specified.\n                    if (charCode == 43 || charCode == 45) {\n                      Index++;\n                    }\n                    // Parse the exponential component.\n                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\n                    if (position == Index) {\n                      // Illegal empty exponent.\n                      abort();\n                    }\n                    Index = position;\n                  }\n                  // Coerce the parsed value to a JavaScript number.\n                  return +source.slice(begin, Index);\n                }\n                // A negative sign may only precede numbers.\n                if (isSigned) {\n                  abort();\n                }\n                // `true`, `false`, and `null` literals.\n                if (source.slice(Index, Index + 4) == \"true\") {\n                  Index += 4;\n                  return true;\n                } else if (source.slice(Index, Index + 5) == \"false\") {\n                  Index += 5;\n                  return false;\n                } else if (source.slice(Index, Index + 4) == \"null\") {\n                  Index += 4;\n                  return null;\n                }\n                // Unrecognized token.\n                abort();\n            }\n          }\n          // Return the sentinel `$` character if the parser has reached the end\n          // of the source string.\n          return \"$\";\n        };\n\n        // Internal: Parses a JSON `value` token.\n        var get = function (value) {\n          var results, hasMembers;\n          if (value == \"$\") {\n            // Unexpected end of input.\n            abort();\n          }\n          if (typeof value == \"string\") {\n            if ((charIndexBuggy ? value.charAt(0) : value[0]) == \"@\") {\n              // Remove the sentinel `@` character.\n              return value.slice(1);\n            }\n            // Parse object and array literals.\n            if (value == \"[\") {\n              // Parses a JSON array, returning a new JavaScript array.\n              results = [];\n              for (;; hasMembers || (hasMembers = true)) {\n                value = lex();\n                // A closing square bracket marks the end of the array literal.\n                if (value == \"]\") {\n                  break;\n                }\n                // If the array literal contains elements, the current token\n                // should be a comma separating the previous element from the\n                // next.\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n                    if (value == \"]\") {\n                      // Unexpected trailing `,` in array literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each array element.\n                    abort();\n                  }\n                }\n                // Elisions and leading commas are not permitted.\n                if (value == \",\") {\n                  abort();\n                }\n                results.push(get(value));\n              }\n              return results;\n            } else if (value == \"{\") {\n              // Parses a JSON object, returning a new JavaScript object.\n              results = {};\n              for (;; hasMembers || (hasMembers = true)) {\n                value = lex();\n                // A closing curly brace marks the end of the object literal.\n                if (value == \"}\") {\n                  break;\n                }\n                // If the object literal contains members, the current token\n                // should be a comma separator.\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n                    if (value == \"}\") {\n                      // Unexpected trailing `,` in object literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each object member.\n                    abort();\n                  }\n                }\n                // Leading commas are not permitted, object property names must be\n                // double-quoted strings, and a `:` must separate each property\n                // name and value.\n                if (value == \",\" || typeof value != \"string\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \"@\" || lex() != \":\") {\n                  abort();\n                }\n                results[value.slice(1)] = get(lex());\n              }\n              return results;\n            }\n            // Unexpected token encountered.\n            abort();\n          }\n          return value;\n        };\n\n        // Internal: Updates a traversed object member.\n        var update = function (source, property, callback) {\n          var element = walk(source, property, callback);\n          if (element === undef) {\n            delete source[property];\n          } else {\n            source[property] = element;\n          }\n        };\n\n        // Internal: Recursively traverses a parsed JSON object, invoking the\n        // `callback` function for each value. This is an implementation of the\n        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\n        var walk = function (source, property, callback) {\n          var value = source[property], length;\n          if (typeof value == \"object\" && value) {\n            // `forEach` can't be used to traverse an array in Opera <= 8.54\n            // because its `Object#hasOwnProperty` implementation returns `false`\n            // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\"0\")`).\n            if (getClass.call(value) == arrayClass) {\n              for (length = value.length; length--;) {\n                update(value, length, callback);\n              }\n            } else {\n              forEach(value, function (property) {\n                update(value, property, callback);\n              });\n            }\n          }\n          return callback.call(source, property, value);\n        };\n\n        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\n        exports.parse = function (source, callback) {\n          var result, value;\n          Index = 0;\n          Source = \"\" + source;\n          result = get(lex());\n          // If a JSON string contains multiple tokens, it is invalid.\n          if (lex() != \"$\") {\n            abort();\n          }\n          // Reset the parser state.\n          Index = Source = null;\n          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\"\"] = result, value), \"\", callback) : result;\n        };\n      }\n    }\n\n    exports[\"runInContext\"] = runInContext;\n    return exports;\n  }\n\n  if (freeExports && !isLoader) {\n    // Export for CommonJS environments.\n    runInContext(root, freeExports);\n  } else {\n    // Export for web browsers and JavaScript engines.\n    var nativeJSON = root.JSON,\n        previousJSON = root[\"JSON3\"],\n        isRestored = false;\n\n    var JSON3 = runInContext(root, (root[\"JSON3\"] = {\n      // Public: Restores the original value of the global `JSON` object and\n      // returns a reference to the `JSON3` object.\n      \"noConflict\": function () {\n        if (!isRestored) {\n          isRestored = true;\n          root.JSON = nativeJSON;\n          root[\"JSON3\"] = previousJSON;\n          nativeJSON = previousJSON = null;\n        }\n        return JSON3;\n      }\n    }));\n\n    root.JSON = {\n      \"parse\": JSON3.parse,\n      \"stringify\": JSON3.stringify\n    };\n  }\n\n  // Export for asynchronous module loaders.\n  if (isLoader) {\n    define(function () {\n      return JSON3;\n    });\n  }\n}).call(this);\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],55:[function(require,module,exports){\n/**\n * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar baseCopy = require('lodash._basecopy'),\n    keys = require('lodash.keys');\n\n/**\n * The base implementation of `_.assign` without support for argument juggling,\n * multiple sources, and `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return source == null\n    ? object\n    : baseCopy(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n\n},{\"lodash._basecopy\":56,\"lodash.keys\":63}],56:[function(require,module,exports){\n/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property names to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @returns {Object} Returns `object`.\n */\nfunction baseCopy(source, props, object) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n    object[key] = source[key];\n  }\n  return object;\n}\n\nmodule.exports = baseCopy;\n\n},{}],57:[function(require,module,exports){\n/**\n * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(prototype) {\n    if (isObject(prototype)) {\n      object.prototype = prototype;\n      var result = new object;\n      object.prototype = undefined;\n    }\n    return result || {};\n  };\n}());\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = baseCreate;\n\n},{}],58:[function(require,module,exports){\n/**\n * lodash 3.9.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]';\n\n/** Used to detect host constructors (Safari > 5). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/**\n * Checks if `value` is object-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar fnToString = Function.prototype.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = object == null ? undefined : object[key];\n  return isNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in older versions of Chrome and Safari which return 'function' for regexes\n  // and Safari 8 equivalents which return 'object' for typed array constructors.\n  return isObject(value) && objToString.call(value) == funcTag;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is a native function.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n * @example\n *\n * _.isNative(Array.prototype.push);\n * // => true\n *\n * _.isNative(_);\n * // => false\n */\nfunction isNative(value) {\n  if (value == null) {\n    return false;\n  }\n  if (isFunction(value)) {\n    return reIsNative.test(fnToString.call(value));\n  }\n  return isObjectLike(value) && reIsHostCtor.test(value);\n}\n\nmodule.exports = getNative;\n\n},{}],59:[function(require,module,exports){\n/**\n * lodash 3.0.9 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^\\d+$/;\n\n/**\n * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\n/**\n * Checks if `value` is array-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(getLength(value));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return value > -1 && value % 1 == 0 && value < length;\n}\n\n/**\n * Checks if the provided arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n      ? (isArrayLike(object) && isIndex(index, object.length))\n      : (type == 'string' && index in object)) {\n    var other = object[index];\n    return value === value ? (value === other) : (other !== other);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isIterateeCall;\n\n},{}],60:[function(require,module,exports){\n/**\n * lodash 3.1.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar baseAssign = require('lodash._baseassign'),\n    baseCreate = require('lodash._basecreate'),\n    isIterateeCall = require('lodash._isiterateecall');\n\n/**\n * Creates an object that inherits from the given `prototype` object. If a\n * `properties` object is provided its own enumerable properties are assigned\n * to the created object.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} prototype The object to inherit from.\n * @param {Object} [properties] The properties to assign to the object.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Object} Returns the new object.\n * @example\n *\n * function Shape() {\n *   this.x = 0;\n *   this.y = 0;\n * }\n *\n * function Circle() {\n *   Shape.call(this);\n * }\n *\n * Circle.prototype = _.create(Shape.prototype, {\n *   'constructor': Circle\n * });\n *\n * var circle = new Circle;\n * circle instanceof Circle;\n * // => true\n *\n * circle instanceof Shape;\n * // => true\n */\nfunction create(prototype, properties, guard) {\n  var result = baseCreate(prototype);\n  if (guard && isIterateeCall(prototype, properties, guard)) {\n    properties = undefined;\n  }\n  return properties ? baseAssign(result, properties) : result;\n}\n\nmodule.exports = create;\n\n},{\"lodash._baseassign\":55,\"lodash._basecreate\":57,\"lodash._isiterateecall\":59}],61:[function(require,module,exports){\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\nmodule.exports = isArguments;\n\n},{}],62:[function(require,module,exports){\n/**\n * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar arrayTag = '[object Array]',\n    funcTag = '[object Function]';\n\n/** Used to detect host constructors (Safari > 5). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/**\n * Checks if `value` is object-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar fnToString = Function.prototype.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeIsArray = getNative(Array, 'isArray');\n\n/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = object == null ? undefined : object[key];\n  return isNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(function() { return arguments; }());\n * // => false\n */\nvar isArray = nativeIsArray || function(value) {\n  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n};\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in older versions of Chrome and Safari which return 'function' for regexes\n  // and Safari 8 equivalents which return 'object' for typed array constructors.\n  return isObject(value) && objToString.call(value) == funcTag;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is a native function.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n * @example\n *\n * _.isNative(Array.prototype.push);\n * // => true\n *\n * _.isNative(_);\n * // => false\n */\nfunction isNative(value) {\n  if (value == null) {\n    return false;\n  }\n  if (isFunction(value)) {\n    return reIsNative.test(fnToString.call(value));\n  }\n  return isObjectLike(value) && reIsHostCtor.test(value);\n}\n\nmodule.exports = isArray;\n\n},{}],63:[function(require,module,exports){\n/**\n * lodash 3.1.2 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar getNative = require('lodash._getnative'),\n    isArguments = require('lodash.isarguments'),\n    isArray = require('lodash.isarray');\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^\\d+$/;\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = getNative(Object, 'keys');\n\n/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\n/**\n * Checks if `value` is array-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(getLength(value));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return value > -1 && value % 1 == 0 && value < length;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * A fallback implementation of `Object.keys` which creates an array of the\n * own enumerable property names of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction shimKeys(object) {\n  var props = keysIn(object),\n      propsLength = props.length,\n      length = propsLength && object.length;\n\n  var allowIndexes = !!length && isLength(length) &&\n    (isArray(object) || isArguments(object));\n\n  var index = -1,\n      result = [];\n\n  while (++index < propsLength) {\n    var key = props[index];\n    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nvar keys = !nativeKeys ? shimKeys : function(object) {\n  var Ctor = object == null ? undefined : object.constructor;\n  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\n      (typeof object != 'function' && isArrayLike(object))) {\n    return shimKeys(object);\n  }\n  return isObject(object) ? nativeKeys(object) : [];\n};\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  if (object == null) {\n    return [];\n  }\n  if (!isObject(object)) {\n    object = Object(object);\n  }\n  var length = object.length;\n  length = (length && isLength(length) &&\n    (isArray(object) || isArguments(object)) && length) || 0;\n\n  var Ctor = object.constructor,\n      index = -1,\n      isProto = typeof Ctor == 'function' && Ctor.prototype === object,\n      result = Array(length),\n      skipIndexes = length > 0;\n\n  while (++index < length) {\n    result[index] = (index + '');\n  }\n  for (var key in object) {\n    if (!(skipIndexes && isIndex(key, length)) &&\n        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = keys;\n\n},{\"lodash._getnative\":58,\"lodash.isarguments\":61,\"lodash.isarray\":62}],64:[function(require,module,exports){\n(function (process){\nvar path = require('path');\nvar fs = require('fs');\nvar _0777 = parseInt('0777', 8);\n\nmodule.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;\n\nfunction mkdirP (p, opts, f, made) {\n    if (typeof opts === 'function') {\n        f = opts;\n        opts = {};\n    }\n    else if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n    \n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n    \n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n    \n    var cb = f || function () {};\n    p = path.resolve(p);\n    \n    xfs.mkdir(p, mode, function (er) {\n        if (!er) {\n            made = made || p;\n            return cb(null, made);\n        }\n        switch (er.code) {\n            case 'ENOENT':\n                mkdirP(path.dirname(p), opts, function (er, made) {\n                    if (er) cb(er, made);\n                    else mkdirP(p, opts, cb, made);\n                });\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                xfs.stat(p, function (er2, stat) {\n                    // if the stat fails, then that's super weird.\n                    // let the original error be the failure reason.\n                    if (er2 || !stat.isDirectory()) cb(er, made)\n                    else cb(null, made);\n                });\n                break;\n        }\n    });\n}\n\nmkdirP.sync = function sync (p, opts, made) {\n    if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n    \n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n    \n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    p = path.resolve(p);\n\n    try {\n        xfs.mkdirSync(p, mode);\n        made = made || p;\n    }\n    catch (err0) {\n        switch (err0.code) {\n            case 'ENOENT' :\n                made = sync(path.dirname(p), opts, made);\n                sync(p, opts, made);\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                var stat;\n                try {\n                    stat = xfs.statSync(p);\n                }\n                catch (err1) {\n                    throw err0;\n                }\n                if (!stat.isDirectory()) throw err0;\n                break;\n        }\n    }\n\n    return made;\n};\n\n}).call(this,require('_process'))\n},{\"_process\":67,\"fs\":42,\"path\":42}],65:[function(require,module,exports){\nexports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\n},{}],66:[function(require,module,exports){\n(function (process){\n'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = nextTick;\n} else {\n  module.exports = process.nextTick;\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n}).call(this,require('_process'))\n},{\"_process\":67}],67:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],68:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_duplex.js\")\n\n},{\"./lib/_stream_duplex.js\":69}],69:[function(require,module,exports){\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nvar keys = objectKeys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  processNextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n},{\"./_stream_readable\":71,\"./_stream_writable\":73,\"core-util-is\":45,\"inherits\":51,\"process-nextick-args\":66}],70:[function(require,module,exports){\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n},{\"./_stream_transform\":72,\"core-util-is\":45,\"inherits\":51}],71:[function(require,module,exports){\n(function (process){\n'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nfunction prependListener(emitter, event, fn) {\n  if (typeof emitter.prependListener === 'function') {\n    return emitter.prependListener(event, fn);\n  } else {\n    // This is a hack to make sure that our error handler is attached before any\n    // userland ones.  NEVER DO THIS. This is here only because this code needs\n    // to continue to work with older versions of Node.js that do not include\n    // the prependListener() method. The goal is to eventually remove this hack.\n    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n  }\n}\n\nvar Duplex;\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nvar Duplex;\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function') this._read = options.read;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = bufferShim.from(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var _e = new Error('stream.unshift() after end event');\n      stream.emit('error', _e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var _i = 0; _i < len; _i++) {\n      dests[_i].emit('unpipe', this);\n    }return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = bufferShim.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n}).call(this,require('_process'))\n},{\"./_stream_duplex\":69,\"./internal/streams/BufferList\":74,\"_process\":67,\"buffer\":44,\"buffer-shims\":43,\"core-util-is\":45,\"events\":48,\"inherits\":51,\"isarray\":53,\"process-nextick-args\":66,\"string_decoder/\":80,\"util\":40}],72:[function(require,module,exports){\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction TransformState(stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n  this.writeencoding = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  this.once('prefinish', function () {\n    if (typeof this._flush === 'function') this._flush(function (er) {\n      done(stream, er);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('Not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nfunction done(stream, er) {\n  if (er) return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (ts.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n},{\"./_stream_duplex\":69,\"core-util-is\":45,\"inherits\":51}],73:[function(require,module,exports){\n(function (process){\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nvar Duplex;\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function writableStateGetBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')\n    });\n  } catch (_) {}\n})();\n\nvar Duplex;\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  processNextTick(cb, er);\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n  // Always throw error if a null is written\n  // if we are not in object mode then throw\n  // if it is not a buffer, string, or undefined.\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    processNextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = bufferShim.from(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) processNextTick(cb, er);else cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n        afterWrite(stream, state, finished, cb);\n      }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    while (entry) {\n      buffer[count] = entry;\n      entry = entry.next;\n      count += 1;\n    }\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) processNextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function (err) {\n    var entry = _this.entry;\n    _this.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    if (state.corkedRequestsFree) {\n      state.corkedRequestsFree.next = _this;\n    } else {\n      state.corkedRequestsFree = _this;\n    }\n  };\n}\n}).call(this,require('_process'))\n},{\"./_stream_duplex\":69,\"_process\":67,\"buffer\":44,\"buffer-shims\":43,\"core-util-is\":45,\"events\":48,\"inherits\":51,\"process-nextick-args\":66,\"util-deprecate\":81}],74:[function(require,module,exports){\n'use strict';\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\nmodule.exports = BufferList;\n\nfunction BufferList() {\n  this.head = null;\n  this.tail = null;\n  this.length = 0;\n}\n\nBufferList.prototype.push = function (v) {\n  var entry = { data: v, next: null };\n  if (this.length > 0) this.tail.next = entry;else this.head = entry;\n  this.tail = entry;\n  ++this.length;\n};\n\nBufferList.prototype.unshift = function (v) {\n  var entry = { data: v, next: this.head };\n  if (this.length === 0) this.tail = entry;\n  this.head = entry;\n  ++this.length;\n};\n\nBufferList.prototype.shift = function () {\n  if (this.length === 0) return;\n  var ret = this.head.data;\n  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n  --this.length;\n  return ret;\n};\n\nBufferList.prototype.clear = function () {\n  this.head = this.tail = null;\n  this.length = 0;\n};\n\nBufferList.prototype.join = function (s) {\n  if (this.length === 0) return '';\n  var p = this.head;\n  var ret = '' + p.data;\n  while (p = p.next) {\n    ret += s + p.data;\n  }return ret;\n};\n\nBufferList.prototype.concat = function (n) {\n  if (this.length === 0) return bufferShim.alloc(0);\n  if (this.length === 1) return this.head.data;\n  var ret = bufferShim.allocUnsafe(n >>> 0);\n  var p = this.head;\n  var i = 0;\n  while (p) {\n    p.data.copy(ret, i);\n    i += p.data.length;\n    p = p.next;\n  }\n  return ret;\n};\n},{\"buffer\":44,\"buffer-shims\":43}],75:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_passthrough.js\")\n\n},{\"./lib/_stream_passthrough.js\":70}],76:[function(require,module,exports){\n(function (process){\nvar Stream = (function (){\n  try {\n    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify\n  } catch(_){}\n}());\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = Stream || exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\nif (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {\n  module.exports = Stream;\n}\n\n}).call(this,require('_process'))\n},{\"./lib/_stream_duplex.js\":69,\"./lib/_stream_passthrough.js\":70,\"./lib/_stream_readable.js\":71,\"./lib/_stream_transform.js\":72,\"./lib/_stream_writable.js\":73,\"_process\":67}],77:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_transform.js\")\n\n},{\"./lib/_stream_transform.js\":72}],78:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_writable.js\")\n\n},{\"./lib/_stream_writable.js\":73}],79:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n},{\"events\":48,\"inherits\":51,\"readable-stream/duplex.js\":68,\"readable-stream/passthrough.js\":75,\"readable-stream/readable.js\":76,\"readable-stream/transform.js\":77,\"readable-stream/writable.js\":78}],80:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n\n},{\"buffer\":44}],81:[function(require,module,exports){\n(function (global){\n\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],82:[function(require,module,exports){\narguments[4][51][0].apply(exports,arguments)\n},{\"dup\":51}],83:[function(require,module,exports){\nmodule.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n},{}],84:[function(require,module,exports){\n(function (process,global){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./support/isBuffer\":83,\"_process\":67,\"inherits\":82}]},{},[1]);\n"

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(10)
	__webpack_require__(328)


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	
	const assert = __webpack_require__(11);
	const webdriver = __webpack_require__(16);
	const test = __webpack_require__(327);


	test.describe('our test bundle', function () {
	  let driver

	  test.beforeEach(() => {
	    this.timeout(10000);
	    driver = new webdriver.Builder()
	                          .forBrowser('chrome')
	                          .build();
	    driver.get('http://localhost:8080');
	  });

	  test.afterEach(() => {
	    driver.quit()
	  })

	  test.it('should enter a string into the title input', function () {
	    const title = driver.findElement({className: 'title' })

	    title.sendKeys('hello')
	    title.getAttribute('value').then((value) => {
	      assert.equal(value, 'hello')
	    })
	  })

	  test.it('can complete a task', function () {
	    //concept note: add a 'complete' class to the card on-click
	    const title = driver.findElement({className: "title" })
	    const task = driver.findElement({className: "body"})
	    const saveButton = driver.findElement({className: "save"})
	    title.sendKeys('test task')
	    task.sendKeys('go eat food')
	    title.getAttribute('value').then((value) => {
	      assert.equal(value, 'test task')
	    })
	    task.getAttribute('value').then((value) => {
	      assert.equal(value, 'go eat food')
	    })
	    saveButton.click()

	    const completeButton = driver.findElement({className: "complete-task"})
	    completeButton.click()

	    driver.findElement({className: 'card'})
	      .getAttribute('class')
	      .then((c) => assert.equal(c.split(' ')[1] || 'card does not have a second class', 'completed'))
	  })


	  test.it('should append a TODO to the page', function () {

	    const title = driver.findElement({className: 'title'})
	    const body = driver.findElement({className: 'body'})
	    const saveBtn = driver.findElement({className: 'save'})

	    title.sendKeys('this is the title')
	    body.sendKeys('this is the body')
	    saveBtn.click()


	    title.sendKeys('this is the title')
	    body.sendKeys('this is the body')
	    saveBtn.click()


	    driver.findElements({className: 'card'}).then((card) => {
	      assert.equal(card.length, 2);
	    })

	  })

	  test.it('should remove an idea from the page once the delete button is clicked', function () {
	    const title = driver.findElement({className: 'title'})
	    const body = driver.findElement({className: 'body'})
	    const saveBtn = driver.findElement({className: 'save'})

	    title.sendKeys('this is the title')
	    body.sendKeys('this is the body')
	    saveBtn.click()

	    title.sendKeys('this is the title')
	    body.sendKeys('this is the body')
	    saveBtn.click()

	    const deleteBtn = driver.findElement({className: 'close-card'})

	    deleteBtn.click()

	    driver.findElements({className: 'card'}).then((card) => {
	      assert.equal(card.length, 1)
	    })
	  })

	  test.it('User should be able to change the value of the card title', function () {
	    const title = driver.findElement({className: 'title'})
	    const body = driver.findElement({className: 'body'})
	    const saveBtn = driver.findElement({className: 'save'})

	    title.sendKeys('this is a title')
	    body.sendKeys('this is a body')
	    saveBtn.click()

	    const cardHeader = driver.findElement({className: 'card-header'})

	    cardHeader.click()
	    cardHeader.clear()
	    cardHeader.sendKeys('I am now changing the cardHeader text\t')
	    cardHeader.getText('value').then((value) => {
	      assert.equal(value, 'I am now changing the cardHeader text')
	    })
	  })

	  test.it('User should be able to change the value of the card body', function () {
	    const title = driver.findElement({className: 'title'})
	    const body = driver.findElement({className: 'body'})
	    const saveBtn = driver.findElement({className: 'save'})


	    title.sendKeys('this is a title')
	    body.sendKeys('this is a body')
	    saveBtn.click()

	    const cardBody = driver.findElement({className: 'card-body'})

	    cardBody.click()
	    cardBody.clear()
	    cardBody.sendKeys('I am now changing the cardBody text\t')
	    cardBody.getText('value').then((value) => {
	      assert.equal(value, 'I am now changing the cardBody text')
	    })
	  })

	  test.it('Each TODO should start with a level of Normal', function () {
	    const title = driver.findElement({className: 'title'})
	    const body = driver.findElement({className: 'body'})
	    const saveBtn = driver.findElement({className: 'save'})

	    title.sendKeys('this is the title')
	    body.sendKeys('this is the body')
	    saveBtn.click()

	    const cardQuality = driver.findElement({className: 'card-quality'})

	    cardQuality.getText('value').then((value) =>{
	      assert.equal(value, 'quality: normal');
	    })
	  })

	  test.it('should be able to change the level of importance by up-voting or down-voting that specific TODO', function () {
	    const title = driver.findElement({className: 'title'})
	    const body = driver.findElement({className: 'body'})
	    const saveBtn = driver.findElement({className: 'save'})

	    title.sendKeys('this is the title')
	    body.sendKeys('this is the body')
	    saveBtn.click()

	    const upVote = driver.findElement({className: 'up-arrow'})
	    const downVote = driver.findElement({className: 'down-arrow'})
	    let cardQuality = driver.findElement({className: 'card-quality'})

	    cardQuality.getText('value').then((value) =>{
	      assert.equal(value, 'quality: normal');
	    })

	    upVote.click()
	    cardQuality = driver.findElement({className: 'card-quality'})

	    cardQuality.getText('value').then((value) =>{
	      assert.equal(value, 'quality: high');
	    })
	  })


	  test.it.skip('should be able to change the level of importance by up-voting or down-voting that specific TODO')
	  test.it.skip('The change of importance should persist after a page refresh')
	  test.it.skip('should have 5 levels of importance')
	})

	  //
	  //
	  // Levels of Importance are as follows
	  //
	  // 1) Critical
	  //
	  // 2) High
	  //
	  // 3) Normal
	  //
	  // 4) Low
	  //
	  // 5) None


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
	    return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}

	// based on node assert, original notice:

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	var util = __webpack_require__(12);
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = (function () {
	  return function foo() {}.name === 'foo';
	}());
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
	    return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};

	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;

	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};

	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }

	    memos.actual.push(actual);
	    memos.expected.push(expected);

	    return objEquiv(actual, expected, strict, memos);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}


	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }

	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }

	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }

	  return expected.call({}, actual) === true;
	}

	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }

	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }

	  actual = _tryBlock(block);

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;

	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};

	assert.ifError = function(err) { if (err) throw err; };

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(14);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(15);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(13)))

/***/ },
/* 13 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 15 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview The main user facing module. Exports WebDriver's primary
	 * public API and provides convenience assessors to certain sub-modules.
	 */

	'use strict';

	const chrome = __webpack_require__(17);
	const edge = __webpack_require__(154);
	const firefox = __webpack_require__(155);
	const _http = __webpack_require__(22);
	const ie = __webpack_require__(322);
	const actions = __webpack_require__(72);
	const by = __webpack_require__(74);
	const capabilities = __webpack_require__(69);
	const command = __webpack_require__(62);
	const error = __webpack_require__(64);
	const events = __webpack_require__(67);
	const input = __webpack_require__(73);
	const logging = __webpack_require__(65);
	const promise = __webpack_require__(66);
	const session = __webpack_require__(68);
	const until = __webpack_require__(323);
	const webdriver = __webpack_require__(71);
	const opera = __webpack_require__(324);
	const phantomjs = __webpack_require__(325);
	const remote = __webpack_require__(122);
	const safari = __webpack_require__(326);

	const Browser = capabilities.Browser;
	const Capabilities = capabilities.Capabilities;
	const Capability = capabilities.Capability;
	const Session = session.Session;
	const WebDriver = webdriver.WebDriver;



	var seleniumServer;

	/**
	 * Starts an instance of the Selenium server if not yet running.
	 * @param {string} jar Path to the server jar to use.
	 * @return {!Promise<string>} A promise for the server's
	 *     addrss once started.
	 */
	function startSeleniumServer(jar) {
	  if (!seleniumServer) {
	    seleniumServer = new remote.SeleniumServer(jar);
	  }
	  return seleniumServer.start();
	}


	/**
	 * {@linkplain webdriver.WebDriver#setFileDetector WebDriver's setFileDetector}
	 * method uses a non-standard command to transfer files from the local client
	 * to the remote end hosting the browser. Many of the WebDriver sub-types, like
	 * the {@link chrome.Driver} and {@link firefox.Driver}, do not support this
	 * command. Thus, these classes override the `setFileDetector` to no-op.
	 *
	 * This function uses a mixin to re-enable `setFileDetector` by calling the
	 * original method on the WebDriver prototype directly. This is used only when
	 * the builder creates a Chrome or Firefox instance that communicates with a
	 * remote end (and thus, support for remote file detectors is unknown).
	 *
	 * @param {function(new: webdriver.WebDriver, ...?)} ctor
	 * @return {function(new: webdriver.WebDriver, ...?)}
	 */
	function ensureFileDetectorsAreEnabled(ctor) {
	  const mixin = class extends ctor {
	    /** @param {input.FileDetector} detector */
	    setFileDetector(detector) {
	      webdriver.WebDriver.prototype.setFileDetector.call(this, detector);
	    }
	  };
	  return mixin;
	}


	/**
	 * A thenable wrapper around a {@linkplain webdriver.IWebDriver IWebDriver}
	 * instance that allows commands to be issued directly instead of having to
	 * repeatedly call `then`:
	 *
	 *     let driver = new Builder().build();
	 *     driver.then(d => d.get(url));  // You can do this...
	 *     driver.get(url);               // ...or this
	 *
	 * If the driver instance fails to resolve (e.g. the session cannot be created),
	 * every issued command will fail.
	 *
	 * @extends {webdriver.IWebDriver}
	 * @extends {promise.CancellableThenable<!webdriver.IWebDriver>}
	 * @interface
	 */
	class ThenableWebDriver {
	  /** @param {...?} args */
	  static createSession(...args) {}
	}


	/**
	 * @const {!Map<function(new: WebDriver, !IThenable<!Session>, ...?),
	 *              function(new: ThenableWebDriver, !IThenable<!Session>, ...?)>}
	 */
	const THENABLE_DRIVERS = new Map;


	/**
	 * @param {function(new: WebDriver, !IThenable<!Session>, ...?)} ctor
	 * @param {...?} args
	 * @return {!ThenableWebDriver}
	 */
	function createDriver(ctor, ...args) {
	  let thenableWebDriverProxy = THENABLE_DRIVERS.get(ctor);
	  if (!thenableWebDriverProxy) {
	    /** @implements {ThenableWebDriver} */
	    thenableWebDriverProxy = class extends ctor {
	      /**
	       * @param {!IThenable<!Session>} session
	       * @param {...?} rest
	       */
	      constructor(session, ...rest) {
	        super(session, ...rest);

	        const pd = this.getSession().then(session => {
	          return new ctor(session, ...rest);
	        });

	        /**
	         * @param {(string|Error)=} opt_reason
	         * @override
	         */
	        this.cancel = function(opt_reason) {
	          if (promise.CancellableThenable.isImplementation(pd)) {
	            /** @type {!promise.CancellableThenable} */(pd).cancel(opt_reason);
	          }
	        };

	        /** @override */
	        this.then = pd.then.bind(pd);

	        /** @override */
	        this.catch = pd.then.bind(pd);
	      }
	    }
	    promise.CancellableThenable.addImplementation(thenableWebDriverProxy);
	    THENABLE_DRIVERS.set(ctor, thenableWebDriverProxy);
	  }
	  return thenableWebDriverProxy.createSession(...args);
	}


	/**
	 * Creates new {@link webdriver.WebDriver WebDriver} instances. The environment
	 * variables listed below may be used to override a builder's configuration,
	 * allowing quick runtime changes.
	 *
	 * - {@code SELENIUM_BROWSER}: defines the target browser in the form
	 *   {@code browser[:version][:platform]}.
	 *
	 * - {@code SELENIUM_REMOTE_URL}: defines the remote URL for all builder
	 *   instances. This environment variable should be set to a fully qualified
	 *   URL for a WebDriver server (e.g. http://localhost:4444/wd/hub). This
	 *   option always takes precedence over {@code SELENIUM_SERVER_JAR}.
	 *
	 * - {@code SELENIUM_SERVER_JAR}: defines the path to the
	 *   <a href="http://selenium-release.storage.googleapis.com/index.html">
	 *   standalone Selenium server</a> jar to use. The server will be started the
	 *   first time a WebDriver instance and be killed when the process exits.
	 *
	 * Suppose you had mytest.js that created WebDriver with
	 *
	 *     var driver = new webdriver.Builder()
	 *         .forBrowser('chrome')
	 *         .build();
	 *
	 * This test could be made to use Firefox on the local machine by running with
	 * `SELENIUM_BROWSER=firefox node mytest.js`. Rather than change the code to
	 * target Google Chrome on a remote machine, you can simply set the
	 * `SELENIUM_BROWSER` and `SELENIUM_REMOTE_URL` environment variables:
	 *
	 *     SELENIUM_BROWSER=chrome:36:LINUX \
	 *     SELENIUM_REMOTE_URL=http://www.example.com:4444/wd/hub \
	 *     node mytest.js
	 *
	 * You could also use a local copy of the standalone Selenium server:
	 *
	 *     SELENIUM_BROWSER=chrome:36:LINUX \
	 *     SELENIUM_SERVER_JAR=/path/to/selenium-server-standalone.jar \
	 *     node mytest.js
	 */
	class Builder {
	  constructor() {
	    /** @private @const */
	    this.log_ = logging.getLogger('webdriver.Builder');

	    /** @private {promise.ControlFlow} */
	    this.flow_ = null;

	    /** @private {string} */
	    this.url_ = '';

	    /** @private {?string} */
	    this.proxy_ = null;

	    /** @private {!Capabilities} */
	    this.capabilities_ = new Capabilities();

	    /** @private {chrome.Options} */
	    this.chromeOptions_ = null;

	    /** @private {firefox.Options} */
	    this.firefoxOptions_ = null;

	    /** @private {opera.Options} */
	    this.operaOptions_ = null;

	    /** @private {ie.Options} */
	    this.ieOptions_ = null;

	    /** @private {safari.Options} */
	    this.safariOptions_ = null;

	    /** @private {edge.Options} */
	    this.edgeOptions_ = null;

	    /** @private {boolean} */
	    this.ignoreEnv_ = false;

	    /** @private {http.Agent} */
	    this.agent_ = null;
	  }

	  /**
	   * Configures this builder to ignore any environment variable overrides and to
	   * only use the configuration specified through this instance's API.
	   *
	   * @return {!Builder} A self reference.
	   */
	  disableEnvironmentOverrides() {
	    this.ignoreEnv_ = true;
	    return this;
	  }

	  /**
	   * Sets the URL of a remote WebDriver server to use. Once a remote URL has
	   * been specified, the builder direct all new clients to that server. If this
	   * method is never called, the Builder will attempt to create all clients
	   * locally.
	   *
	   * As an alternative to this method, you may also set the
	   * `SELENIUM_REMOTE_URL` environment variable.
	   *
	   * @param {string} url The URL of a remote server to use.
	   * @return {!Builder} A self reference.
	   */
	  usingServer(url) {
	    this.url_ = url;
	    return this;
	  }

	  /**
	   * @return {string} The URL of the WebDriver server this instance is
	   *     configured to use.
	   */
	  getServerUrl() {
	    return this.url_;
	  }

	  /**
	   * Sets the URL of the proxy to use for the WebDriver's HTTP connections.
	   * If this method is never called, the Builder will create a connection
	   * without a proxy.
	   *
	   * @param {string} proxy The URL of a proxy to use.
	   * @return {!Builder} A self reference.
	   */
	  usingWebDriverProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * @return {?string} The URL of the proxy server to use for the WebDriver's
	   *    HTTP connections, or `null` if not set.
	   */
	  getWebDriverProxy() {
	    return this.proxy_;
	  }

	  /**
	   * Sets the http agent to use for each request.
	   * If this method is not called, the Builder will use http.globalAgent by default.
	   *
	   * @param {http.Agent} agent The agent to use for each request.
	   * @return {!Builder} A self reference.
	   */
	  usingHttpAgent(agent) {
	    this.agent_ = agent;
	    return this;
	  }

	  /**
	   * @return {http.Agent} The http agent used for each request
	   */
	  getHttpAgent() {
	    return this.agent_;
	  }

	  /**
	   * Sets the desired capabilities when requesting a new session. This will
	   * overwrite any previously set capabilities.
	   * @param {!(Object|Capabilities)} capabilities The desired capabilities for
	   *     a new session.
	   * @return {!Builder} A self reference.
	   */
	  withCapabilities(capabilities) {
	    this.capabilities_ = new Capabilities(capabilities);
	    return this;
	  }

	  /**
	   * Returns the base set of capabilities this instance is currently configured
	   * to use.
	   * @return {!Capabilities} The current capabilities for this builder.
	   */
	  getCapabilities() {
	    return this.capabilities_;
	  }

	  /**
	   * Configures the target browser for clients created by this instance.
	   * Any calls to {@link #withCapabilities} after this function will
	   * overwrite these settings.
	   *
	   * You may also define the target browser using the {@code SELENIUM_BROWSER}
	   * environment variable. If set, this environment variable should be of the
	   * form `browser[:[version][:platform]]`.
	   *
	   * @param {(string|Browser)} name The name of the target browser;
	   *     common defaults are available on the {@link webdriver.Browser} enum.
	   * @param {string=} opt_version A desired version; may be omitted if any
	   *     version should be used.
	   * @param {string=} opt_platform The desired platform; may be omitted if any
	   *     version may be used.
	   * @return {!Builder} A self reference.
	   */
	  forBrowser(name, opt_version, opt_platform) {
	    this.capabilities_.set(Capability.BROWSER_NAME, name);
	    this.capabilities_.set(Capability.VERSION, opt_version || null);
	    this.capabilities_.set(Capability.PLATFORM, opt_platform || null);
	    return this;
	  }

	  /**
	   * Sets the proxy configuration for the target browser.
	   * Any calls to {@link #withCapabilities} after this function will
	   * overwrite these settings.
	   *
	   * @param {!capabilities.ProxyConfig} config The configuration to use.
	   * @return {!Builder} A self reference.
	   */
	  setProxy(config) {
	    this.capabilities_.setProxy(config);
	    return this;
	  }

	  /**
	   * Sets the logging preferences for the created session. Preferences may be
	   * changed by repeated calls, or by calling {@link #withCapabilities}.
	   * @param {!(./lib/logging.Preferences|Object<string, string>)} prefs The
	   *     desired logging preferences.
	   * @return {!Builder} A self reference.
	   */
	  setLoggingPrefs(prefs) {
	    this.capabilities_.setLoggingPrefs(prefs);
	    return this;
	  }

	  /**
	   * Sets whether native events should be used.
	   * @param {boolean} enabled Whether to enable native events.
	   * @return {!Builder} A self reference.
	   */
	  setEnableNativeEvents(enabled) {
	    this.capabilities_.setEnableNativeEvents(enabled);
	    return this;
	  }

	  /**
	   * Sets how elements should be scrolled into view for interaction.
	   * @param {number} behavior The desired scroll behavior: either 0 to align
	   *     with the top of the viewport or 1 to align with the bottom.
	   * @return {!Builder} A self reference.
	   */
	  setScrollBehavior(behavior) {
	    this.capabilities_.setScrollBehavior(behavior);
	    return this;
	  }

	  /**
	   * Sets the default action to take with an unexpected alert before returning
	   * an error.
	   * @param {string} behavior The desired behavior; should be "accept",
	   *     "dismiss", or "ignore". Defaults to "dismiss".
	   * @return {!Builder} A self reference.
	   */
	  setAlertBehavior(behavior) {
	    this.capabilities_.setAlertBehavior(behavior);
	    return this;
	  }

	  /**
	   * Sets Chrome specific {@linkplain chrome.Options options} for drivers
	   * created by this builder. Any logging or proxy settings defined on the given
	   * options will take precedence over those set through
	   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.
	   *
	   * @param {!chrome.Options} options The ChromeDriver options to use.
	   * @return {!Builder} A self reference.
	   */
	  setChromeOptions(options) {
	    this.chromeOptions_ = options;
	    return this;
	  }

	  /**
	   * Sets Firefox specific {@linkplain firefox.Options options} for drivers
	   * created by this builder. Any logging or proxy settings defined on the given
	   * options will take precedence over those set through
	   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.
	   *
	   * @param {!firefox.Options} options The FirefoxDriver options to use.
	   * @return {!Builder} A self reference.
	   */
	  setFirefoxOptions(options) {
	    this.firefoxOptions_ = options;
	    return this;
	  }

	  /**
	   * @return {firefox.Options} the Firefox specific options currently configured
	   *     for this instance.
	   */
	  getFirefoxOptions() {
	    return this.firefoxOptions_;
	  }

	  /**
	   * Sets Opera specific {@linkplain opera.Options options} for drivers created
	   * by this builder. Any logging or proxy settings defined on the given options
	   * will take precedence over those set through {@link #setLoggingPrefs} and
	   * {@link #setProxy}, respectively.
	   *
	   * @param {!opera.Options} options The OperaDriver options to use.
	   * @return {!Builder} A self reference.
	   */
	  setOperaOptions(options) {
	    this.operaOptions_ = options;
	    return this;
	  }

	  /**
	   * Set Internet Explorer specific {@linkplain ie.Options options} for drivers
	   * created by this builder. Any proxy settings defined on the given options
	   * will take precedence over those set through {@link #setProxy}.
	   *
	   * @param {!ie.Options} options The IEDriver options to use.
	   * @return {!Builder} A self reference.
	   */
	  setIeOptions(options) {
	    this.ieOptions_ = options;
	    return this;
	  }

	  /**
	   * Set {@linkplain edge.Options options} specific to Microsoft's Edge browser
	   * for drivers created by this builder. Any proxy settings defined on the
	   * given options will take precedence over those set through
	   * {@link #setProxy}.
	   *
	   * @param {!edge.Options} options The MicrosoftEdgeDriver options to use.
	   * @return {!Builder} A self reference.
	   */
	  setEdgeOptions(options) {
	    this.edgeOptions_ = options;
	    return this;
	  }

	  /**
	   * Sets Safari specific {@linkplain safari.Options options} for drivers
	   * created by this builder. Any logging settings defined on the given options
	   * will take precedence over those set through {@link #setLoggingPrefs}.
	   *
	   * @param {!safari.Options} options The Safari options to use.
	   * @return {!Builder} A self reference.
	   */
	  setSafariOptions(options) {
	    this.safariOptions_ = options;
	    return this;
	  }

	  /**
	   * @return {safari.Options} the Safari specific options currently configured
	   *     for this instance.
	   */
	  getSafariOptions() {
	    return this.safariOptions_;
	  }

	  /**
	   * Sets the control flow that created drivers should execute actions in. If
	   * the flow is never set, or is set to {@code null}, it will use the active
	   * flow at the time {@link #build()} is called.
	   * @param {promise.ControlFlow} flow The control flow to use, or
	   *     {@code null} to
	   * @return {!Builder} A self reference.
	   */
	  setControlFlow(flow) {
	    this.flow_ = flow;
	    return this;
	  }

	  /**
	   * Creates a new WebDriver client based on this builder's current
	   * configuration.
	   *
	   * This method will return a {@linkplain ThenableWebDriver} instance, allowing
	   * users to issue commands directly without calling `then()`. The returned
	   * thenable wraps a promise that will resolve to a concrete
	   * {@linkplain webdriver.WebDriver WebDriver} instance. The promise will be
	   * rejected if the remote end fails to create a new session.
	   *
	   * @return {!ThenableWebDriver} A new WebDriver instance.
	   * @throws {Error} If the current configuration is invalid.
	   */
	  build() {
	    // Create a copy for any changes we may need to make based on the current
	    // environment.
	    var capabilities = new Capabilities(this.capabilities_);

	    var browser;
	    if (!this.ignoreEnv_ && process.env.SELENIUM_BROWSER) {
	      this.log_.fine(`SELENIUM_BROWSER=${process.env.SELENIUM_BROWSER}`);
	      browser = process.env.SELENIUM_BROWSER.split(/:/, 3);
	      capabilities.set(Capability.BROWSER_NAME, browser[0]);
	      capabilities.set(Capability.VERSION, browser[1] || null);
	      capabilities.set(Capability.PLATFORM, browser[2] || null);
	    }

	    browser = capabilities.get(Capability.BROWSER_NAME);

	    if (typeof browser !== 'string') {
	      throw TypeError(
	          `Target browser must be a string, but is <${typeof browser}>;` +
	          ' did you forget to call forBrowser()?');
	    }

	    if (browser === 'ie') {
	      browser = Browser.INTERNET_EXPLORER;
	    }

	    // Apply browser specific overrides.
	    if (browser === Browser.CHROME && this.chromeOptions_) {
	      capabilities.merge(this.chromeOptions_.toCapabilities());

	    } else if (browser === Browser.FIREFOX && this.firefoxOptions_) {
	      capabilities.merge(this.firefoxOptions_.toCapabilities());

	    } else if (browser === Browser.INTERNET_EXPLORER && this.ieOptions_) {
	      capabilities.merge(this.ieOptions_.toCapabilities());

	    } else if (browser === Browser.OPERA && this.operaOptions_) {
	      capabilities.merge(this.operaOptions_.toCapabilities());

	    } else if (browser === Browser.SAFARI && this.safariOptions_) {
	      capabilities.merge(this.safariOptions_.toCapabilities());

	    } else if (browser === Browser.EDGE && this.edgeOptions_) {
	      capabilities.merge(this.edgeOptions_.toCapabilities());
	    }

	    // Check for a remote browser.
	    let url = this.url_;
	    if (!this.ignoreEnv_) {
	      if (process.env.SELENIUM_REMOTE_URL) {
	        this.log_.fine(
	            `SELENIUM_REMOTE_URL=${process.env.SELENIUM_REMOTE_URL}`);
	        url = process.env.SELENIUM_REMOTE_URL;
	      } else if (process.env.SELENIUM_SERVER_JAR) {
	        this.log_.fine(
	            `SELENIUM_SERVER_JAR=${process.env.SELENIUM_SERVER_JAR}`);
	        url = startSeleniumServer(process.env.SELENIUM_SERVER_JAR);
	      }
	    }

	    if (url) {
	      this.log_.fine('Creating session on remote server');
	      let client = Promise.resolve(url)
	          .then(url => new _http.HttpClient(url, this.agent_, this.proxy_));
	      let executor = new _http.Executor(client);

	      if (browser === Browser.CHROME) {
	        const driver = ensureFileDetectorsAreEnabled(chrome.Driver);
	        return createDriver(
	            driver, capabilities, executor, this.flow_);
	      }

	      if (browser === Browser.FIREFOX) {
	        const driver = ensureFileDetectorsAreEnabled(firefox.Driver);
	        return createDriver(
	            driver, capabilities, executor, this.flow_);
	      }
	      return createDriver(
	          WebDriver, executor, capabilities, this.flow_);
	    }

	    // Check for a native browser.
	    switch (browser) {
	      case Browser.CHROME:
	        return createDriver(chrome.Driver, capabilities, null, this.flow_);

	      case Browser.FIREFOX:
	        return createDriver(firefox.Driver, capabilities, null, this.flow_);

	      case Browser.INTERNET_EXPLORER:
	        return createDriver(ie.Driver, capabilities, this.flow_);

	      case Browser.EDGE:
	        return createDriver(edge.Driver, capabilities, null, this.flow_);

	      case Browser.OPERA:
	        return createDriver(opera.Driver, capabilities, null, this.flow_);

	      case Browser.PHANTOM_JS:
	        return createDriver(phantomjs.Driver, capabilities, this.flow_);

	      case Browser.SAFARI:
	        return createDriver(safari.Driver, capabilities, this.flow_);

	      default:
	        throw new Error('Do not know how to build driver: ' + browser
	            + '; did you forget to call usingServer(url)?');
	    }
	  }
	}


	// PUBLIC API


	exports.ActionSequence = actions.ActionSequence;
	exports.Browser = capabilities.Browser;
	exports.Builder = Builder;
	exports.Button = input.Button;
	exports.By = by.By;
	exports.Capabilities = capabilities.Capabilities;
	exports.Capability = capabilities.Capability;
	exports.Condition = webdriver.Condition;
	exports.EventEmitter = events.EventEmitter;
	exports.FileDetector = input.FileDetector;
	exports.Key = input.Key;
	exports.Session = session.Session;
	exports.ThenableWebDriver = ThenableWebDriver;
	exports.TouchSequence = actions.TouchSequence;
	exports.WebDriver = webdriver.WebDriver;
	exports.WebElement = webdriver.WebElement;
	exports.WebElementCondition = webdriver.WebElementCondition;
	exports.WebElementPromise = webdriver.WebElementPromise;
	exports.error = error;
	exports.logging = logging;
	exports.promise = promise;
	exports.until = until;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a {@linkplain Driver WebDriver} client for the Chrome
	 * web browser. Before using this module, you must download the latest
	 * [ChromeDriver release] and ensure it can be found on your system [PATH].
	 *
	 * There are three primary classes exported by this module:
	 *
	 * 1. {@linkplain ServiceBuilder}: configures the
	 *     {@link selenium-webdriver/remote.DriverService remote.DriverService}
	 *     that manages the [ChromeDriver] child process.
	 *
	 * 2. {@linkplain Options}: defines configuration options for each new Chrome
	 *     session, such as which {@linkplain Options#setProxy proxy} to use,
	 *     what {@linkplain Options#addExtensions extensions} to install, or
	 *     what {@linkplain Options#addArguments command-line switches} to use when
	 *     starting the browser.
	 *
	 * 3. {@linkplain Driver}: the WebDriver client; each new instance will control
	 *     a unique browser session with a clean user profile (unless otherwise
	 *     configured through the {@link Options} class).
	 *
	 * __Customizing the ChromeDriver Server__ <a id="custom-server"></a>
	 *
	 * By default, every Chrome session will use a single driver service, which is
	 * started the first time a {@link Driver} instance is created and terminated
	 * when this process exits. The default service will inherit its environment
	 * from the current process and direct all output to /dev/null. You may obtain
	 * a handle to this default service using
	 * {@link #getDefaultService getDefaultService()} and change its configuration
	 * with {@link #setDefaultService setDefaultService()}.
	 *
	 * You may also create a {@link Driver} with its own driver service. This is
	 * useful if you need to capture the server's log output for a specific session:
	 *
	 *     let chrome = require('selenium-webdriver/chrome');
	 *
	 *     let service = new chrome.ServiceBuilder()
	 *         .loggingTo('/my/log/file.txt')
	 *         .enableVerboseLogging()
	 *         .build();
	 *
	 *     let options = new chrome.Options();
	 *     // configure browser options ...
	 *
	 *     let driver = new chrome.Driver(options, service);
	 *
	 * Users should only instantiate the {@link Driver} class directly when they
	 * need a custom driver service configuration (as shown above). For normal
	 * operation, users should start Chrome using the
	 * {@link selenium-webdriver.Builder}.
	 *
	 * __Working with Android__ <a id="android"></a>
	 *
	 * The [ChromeDriver][android] supports running tests on the Chrome browser as
	 * well as [WebView apps][webview] starting in Android 4.4 (KitKat). In order to
	 * work with Android, you must first start the adb
	 *
	 *     adb start-server
	 *
	 * By default, adb will start on port 5037. You may change this port, but this
	 * will require configuring a [custom server](#custom-server) that will connect
	 * to adb on the {@linkplain ServiceBuilder#setAdbPort correct port}:
	 *
	 *     let service = new chrome.ServiceBuilder()
	 *         .setAdbPort(1234)
	 *         build();
	 *     // etc.
	 *
	 * The ChromeDriver may be configured to launch Chrome on Android using
	 * {@link Options#androidChrome()}:
	 *
	 *     let driver = new Builder()
	 *         .forBrowser('chrome')
	 *         .setChromeOptions(new chrome.Options().androidChrome())
	 *         .build();
	 *
	 * Alternatively, you can configure the ChromeDriver to launch an app with a
	 * Chrome-WebView by setting the {@linkplain Options#androidActivity
	 * androidActivity} option:
	 *
	 *     let driver = new Builder()
	 *         .forBrowser('chrome')
	 *         .setChromeOptions(new chrome.Options()
	 *             .androidPackage('com.example')
	 *             .androidActivity('com.example.Activity'))
	 *         .build();
	 *
	 * [Refer to the ChromeDriver site] for more information on using the
	 * [ChromeDriver with Android][android].
	 *
	 * [ChromeDriver]: https://sites.google.com/a/chromium.org/chromedriver/
	 * [ChromeDriver release]: http://chromedriver.storage.googleapis.com/index.html
	 * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29
	 * [android]: https://sites.google.com/a/chromium.org/chromedriver/getting-started/getting-started---android
	 * [webview]: https://developer.chrome.com/multidevice/webview/overview
	 */

	'use strict';

	const fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    util = __webpack_require__(12);

	const http = __webpack_require__(22),
	    io = __webpack_require__(75),
	    {Capabilities, Capability} = __webpack_require__(69),
	    command = __webpack_require__(62),
	    logging = __webpack_require__(65),
	    promise = __webpack_require__(66),
	    Symbols = __webpack_require__(70),
	    webdriver = __webpack_require__(71),
	    portprober = __webpack_require__(121),
	    remote = __webpack_require__(122);


	/**
	 * Name of the ChromeDriver executable.
	 * @type {string}
	 * @const
	 */
	const CHROMEDRIVER_EXE =
	    process.platform === 'win32' ? 'chromedriver.exe' : 'chromedriver';


	/**
	 * Custom command names supported by ChromeDriver.
	 * @enum {string}
	 */
	const Command = {
	  LAUNCH_APP: 'launchApp'
	};


	/**
	 * Creates a command executor with support for ChromeDriver's custom commands.
	 * @param {!Promise<string>} url The server's URL.
	 * @return {!command.Executor} The new command executor.
	 */
	function createExecutor(url) {
	  let client = url.then(url => new http.HttpClient(url));
	  let executor = new http.Executor(client);
	  configureExecutor(executor);
	  return executor;
	}


	/**
	 * Configures the given executor with Chrome-specific commands.
	 * @param {!http.Executor} executor the executor to configure.
	 */
	function configureExecutor(executor) {
	  executor.defineCommand(
	      Command.LAUNCH_APP,
	      'POST',
	      '/session/:sessionId/chromium/launch_app');
	}


	/**
	 * Creates {@link selenium-webdriver/remote.DriverService} instances that manage
	 * a [ChromeDriver](https://sites.google.com/a/chromium.org/chromedriver/)
	 * server in a child process.
	 */
	class ServiceBuilder extends remote.DriverService.Builder {
	  /**
	   * @param {string=} opt_exe Path to the server executable to use. If omitted,
	   *     the builder will attempt to locate the chromedriver on the current
	   *     PATH.
	   * @throws {Error} If provided executable does not exist, or the chromedriver
	   *     cannot be found on the PATH.
	   */
	  constructor(opt_exe) {
	    let exe = opt_exe || io.findInPath(CHROMEDRIVER_EXE, true);
	    if (!exe) {
	      throw Error(
	          'The ChromeDriver could not be found on the current PATH. Please ' +
	          'download the latest version of the ChromeDriver from ' +
	          'http://chromedriver.storage.googleapis.com/index.html and ensure ' +
	          'it can be found on your PATH.');
	    }

	    super(exe);
	    this.setLoopback(true);  // Required
	  }

	  /**
	   * Sets which port adb is listening to. _The ChromeDriver will connect to adb
	   * if an {@linkplain Options#androidPackage Android session} is requested, but
	   * adb **must** be started beforehand._
	   *
	   * @param {number} port Which port adb is running on.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  setAdbPort(port) {
	    return this.addArguments('--adb-port=' + port);
	  }

	  /**
	   * Sets the path of the log file the driver should log to. If a log file is
	   * not specified, the driver will log to stderr.
	   * @param {string} path Path of the log file to use.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  loggingTo(path) {
	    return this.addArguments('--log-path=' + path);
	  }

	  /**
	   * Enables verbose logging.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  enableVerboseLogging() {
	    return this.addArguments('--verbose');
	  }

	  /**
	   * Sets the number of threads the driver should use to manage HTTP requests.
	   * By default, the driver will use 4 threads.
	   * @param {number} n The number of threads to use.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  setNumHttpThreads(n) {
	    return this.addArguments('--http-threads=' + n);
	  }

	  /**
	   * @override
	   */
	  setPath(path) {
	    super.setPath(path);
	    return this.addArguments('--url-base=' + path);
	  }
	}



	/** @type {remote.DriverService} */
	let defaultService = null;


	/**
	 * Sets the default service to use for new ChromeDriver instances.
	 * @param {!remote.DriverService} service The service to use.
	 * @throws {Error} If the default service is currently running.
	 */
	function setDefaultService(service) {
	  if (defaultService && defaultService.isRunning()) {
	    throw Error(
	        'The previously configured ChromeDriver service is still running. ' +
	        'You must shut it down before you may adjust its configuration.');
	  }
	  defaultService = service;
	}


	/**
	 * Returns the default ChromeDriver service. If such a service has not been
	 * configured, one will be constructed using the default configuration for
	 * a ChromeDriver executable found on the system PATH.
	 * @return {!remote.DriverService} The default ChromeDriver service.
	 */
	function getDefaultService() {
	  if (!defaultService) {
	    defaultService = new ServiceBuilder().build();
	  }
	  return defaultService;
	}


	/**
	 * @type {string}
	 * @const
	 */
	let OPTIONS_CAPABILITY_KEY = 'chromeOptions';


	/**
	 * Class for managing ChromeDriver specific options.
	 */
	class Options {
	  constructor() {
	    /** @private {!Object} */
	    this.options_ = {};

	    /** @private {!Array<(string|!Buffer)>} */
	    this.extensions_ = [];

	    /** @private {?logging.Preferences} */
	    this.logPrefs_ = null;

	    /** @private {?./lib/capabilities.ProxyConfig} */
	    this.proxy_ = null;
	  }

	  /**
	   * Extracts the ChromeDriver specific options from the given capabilities
	   * object.
	   * @param {!Capabilities} caps The capabilities object.
	   * @return {!Options} The ChromeDriver options.
	   */
	  static fromCapabilities(caps) {
	    let options = new Options();

	    let o = caps.get(OPTIONS_CAPABILITY_KEY);
	    if (o instanceof Options) {
	      options = o;
	    } else if (o) {
	      options.
	          addArguments(o.args || []).
	          addExtensions(o.extensions || []).
	          detachDriver(o.detach).
	          excludeSwitches(o.excludeSwitches || []).
	          setChromeBinaryPath(o.binary).
	          setChromeLogFile(o.logPath).
	          setChromeMinidumpPath(o.minidumpPath).
	          setLocalState(o.localState).
	          setMobileEmulation(o.mobileEmulation).
	          setUserPreferences(o.prefs).
	          setPerfLoggingPrefs(o.perfLoggingPrefs);
	    }

	    if (caps.has(Capability.PROXY)) {
	      options.setProxy(caps.get(Capability.PROXY));
	    }

	    if (caps.has(Capability.LOGGING_PREFS)) {
	      options.setLoggingPrefs(
	          caps.get(Capability.LOGGING_PREFS));
	    }

	    return options;
	  }

	  /**
	   * Add additional command line arguments to use when launching the Chrome
	   * browser.  Each argument may be specified with or without the "--" prefix
	   * (e.g. "--foo" and "foo"). Arguments with an associated value should be
	   * delimited by an "=": "foo=bar".
	   * @param {...(string|!Array<string>)} var_args The arguments to add.
	   * @return {!Options} A self reference.
	   */
	  addArguments(var_args) {
	    let args = this.options_.args || [];
	    args = args.concat.apply(args, arguments);
	    if (args.length) {
	      this.options_.args = args;
	    }
	    return this;
	  }

	  /**
	   * List of Chrome command line switches to exclude that ChromeDriver by default
	   * passes when starting Chrome.  Do not prefix switches with "--".
	   *
	   * @param {...(string|!Array<string>)} var_args The switches to exclude.
	   * @return {!Options} A self reference.
	   */
	  excludeSwitches(var_args) {
	    let switches = this.options_.excludeSwitches || [];
	    switches = switches.concat.apply(switches, arguments);
	    if (switches.length) {
	      this.options_.excludeSwitches = switches;
	    }
	    return this;
	  }

	  /**
	   * Add additional extensions to install when launching Chrome. Each extension
	   * should be specified as the path to the packed CRX file, or a Buffer for an
	   * extension.
	   * @param {...(string|!Buffer|!Array<(string|!Buffer)>)} var_args The
	   *     extensions to add.
	   * @return {!Options} A self reference.
	   */
	  addExtensions(var_args) {
	    this.extensions_ =
	        this.extensions_.concat.apply(this.extensions_, arguments);
	    return this;
	  }

	  /**
	   * Sets the path to the Chrome binary to use. On Mac OS X, this path should
	   * reference the actual Chrome executable, not just the application binary
	   * (e.g. "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome").
	   *
	   * The binary path be absolute or relative to the chromedriver server
	   * executable, but it must exist on the machine that will launch Chrome.
	   *
	   * @param {string} path The path to the Chrome binary to use.
	   * @return {!Options} A self reference.
	   */
	  setChromeBinaryPath(path) {
	    this.options_.binary = path;
	    return this;
	  }

	  /**
	   * Sets whether to leave the started Chrome browser running if the controlling
	   * ChromeDriver service is killed before {@link webdriver.WebDriver#quit()} is
	   * called.
	   * @param {boolean} detach Whether to leave the browser running if the
	   *     chromedriver service is killed before the session.
	   * @return {!Options} A self reference.
	   */
	  detachDriver(detach) {
	    this.options_.detach = detach;
	    return this;
	  }

	  /**
	   * Sets the user preferences for Chrome's user profile. See the "Preferences"
	   * file in Chrome's user data directory for examples.
	   * @param {!Object} prefs Dictionary of user preferences to use.
	   * @return {!Options} A self reference.
	   */
	  setUserPreferences(prefs) {
	    this.options_.prefs = prefs;
	    return this;
	  }

	  /**
	   * Sets the logging preferences for the new session.
	   * @param {!logging.Preferences} prefs The logging preferences.
	   * @return {!Options} A self reference.
	   */
	  setLoggingPrefs(prefs) {
	    this.logPrefs_ = prefs;
	    return this;
	  }

	  /**
	   * Sets the performance logging preferences. Options include:
	   *
	   * - `enableNetwork`: Whether or not to collect events from Network domain.
	   * - `enablePage`: Whether or not to collect events from Page domain.
	   * - `enableTimeline`: Whether or not to collect events from Timeline domain.
	   *     Note: when tracing is enabled, Timeline domain is implicitly disabled,
	   *     unless `enableTimeline` is explicitly set to true.
	   * - `tracingCategories`: A comma-separated string of Chrome tracing
	   *     categories for which trace events should be collected. An unspecified
	   *     or empty string disables tracing.
	   * - `bufferUsageReportingInterval`: The requested number of milliseconds
	   *     between DevTools trace buffer usage events. For example, if 1000, then
	   *     once per second, DevTools will report how full the trace buffer is. If
	   *     a report indicates the buffer usage is 100%, a warning will be issued.
	   *
	   * @param {{enableNetwork: boolean,
	   *          enablePage: boolean,
	   *          enableTimeline: boolean,
	   *          tracingCategories: string,
	   *          bufferUsageReportingInterval: number}} prefs The performance
	   *     logging preferences.
	   * @return {!Options} A self reference.
	   */
	  setPerfLoggingPrefs(prefs) {
	    this.options_.perfLoggingPrefs = prefs;
	    return this;
	  }

	  /**
	   * Sets preferences for the "Local State" file in Chrome's user data
	   * directory.
	   * @param {!Object} state Dictionary of local state preferences.
	   * @return {!Options} A self reference.
	   */
	  setLocalState(state) {
	    this.options_.localState = state;
	    return this;
	  }

	  /**
	   * Sets the name of the activity hosting a Chrome-based Android WebView. This
	   * option must be set to connect to an [Android WebView](
	   * https://sites.google.com/a/chromium.org/chromedriver/getting-started/getting-started---android)
	   *
	   * @param {string} name The activity name.
	   * @return {!Options} A self reference.
	   */
	  androidActivity(name) {
	    this.options_.androidActivity = name;
	    return this;
	  }

	  /**
	   * Sets the device serial number to connect to via ADB. If not specified, the
	   * ChromeDriver will select an unused device at random. An error will be
	   * returned if all devices already have active sessions.
	   *
	   * @param {string} serial The device serial number to connect to.
	   * @return {!Options} A self reference.
	   */
	  androidDeviceSerial(serial) {
	    this.options_.androidDeviceSerial = serial;
	    return this;
	  }

	  /**
	   * Configures the ChromeDriver to launch Chrome on Android via adb. This
	   * function is shorthand for
	   * {@link #androidPackage options.androidPackage('com.android.chrome')}.
	   * @return {!Options} A self reference.
	   */
	  androidChrome() {
	    return this.androidPackage('com.android.chrome');
	  }

	  /**
	   * Sets the package name of the Chrome or WebView app.
	   *
	   * @param {?string} pkg The package to connect to, or `null` to disable Android
	   *     and switch back to using desktop Chrome.
	   * @return {!Options} A self reference.
	   */
	  androidPackage(pkg) {
	    this.options_.androidPackage = pkg;
	    return this;
	  }

	  /**
	   * Sets the process name of the Activity hosting the WebView (as given by
	   * `ps`). If not specified, the process name is assumed to be the same as
	   * {@link #androidPackage}.
	   *
	   * @param {string} processName The main activity name.
	   * @return {!Options} A self reference.
	   */
	  androidProcess(processName) {
	    this.options_.androidProcess = processName;
	    return this;
	  }

	  /**
	   * Sets whether to connect to an already-running instead of the specified
	   * {@linkplain #androidProcess app} instead of launching the app with a clean
	   * data directory.
	   *
	   * @param {boolean} useRunning Whether to connect to a running instance.
	   * @return {!Options} A self reference.
	   */
	  androidUseRunningApp(useRunning) {
	    this.options_.androidUseRunningApp = useRunning;
	    return this;
	  }

	  /**
	   * Sets the path to Chrome's log file. This path should exist on the machine
	   * that will launch Chrome.
	   * @param {string} path Path to the log file to use.
	   * @return {!Options} A self reference.
	   */
	  setChromeLogFile(path) {
	    this.options_.logPath = path;
	    return this;
	  }

	  /**
	   * Sets the directory to store Chrome minidumps in. This option is only
	   * supported when ChromeDriver is running on Linux.
	   * @param {string} path The directory path.
	   * @return {!Options} A self reference.
	   */
	  setChromeMinidumpPath(path) {
	    this.options_.minidumpPath = path;
	    return this;
	  }

	  /**
	   * Configures Chrome to emulate a mobile device. For more information, refer
	   * to the ChromeDriver project page on [mobile emulation][em]. Configuration
	   * options include:
	   *
	   * - `deviceName`: The name of a pre-configured [emulated device][devem]
	   * - `width`: screen width, in pixels
	   * - `height`: screen height, in pixels
	   * - `pixelRatio`: screen pixel ratio
	   *
	   * __Example 1: Using a Pre-configured Device__
	   *
	   *     let options = new chrome.Options().setMobileEmulation(
	   *         {deviceName: 'Google Nexus 5'});
	   *
	   *     let driver = new chrome.Driver(options);
	   *
	   * __Example 2: Using Custom Screen Configuration__
	   *
	   *     let options = new chrome.Options().setMobileEmulation({
	   *         width: 360,
	   *         height: 640,
	   *         pixelRatio: 3.0
	   *     });
	   *
	   *     let driver = new chrome.Driver(options);
	   *
	   *
	   * [em]: https://sites.google.com/a/chromium.org/chromedriver/mobile-emulation
	   * [devem]: https://developer.chrome.com/devtools/docs/device-mode
	   *
	   * @param {?({deviceName: string}|
	   *           {width: number, height: number, pixelRatio: number})} config The
	   *     mobile emulation configuration, or `null` to disable emulation.
	   * @return {!Options} A self reference.
	   */
	  setMobileEmulation(config) {
	    this.options_.mobileEmulation = config;
	    return this;
	  }

	  /**
	   * Sets the proxy settings for the new session.
	   * @param {./lib/capabilities.ProxyConfig} proxy The proxy configuration to
	   *    use.
	   * @return {!Options} A self reference.
	   */
	  setProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * Converts this options instance to a {@link Capabilities} object.
	   * @param {Capabilities=} opt_capabilities The capabilities to merge
	   *     these options into, if any.
	   * @return {!Capabilities} The capabilities.
	   */
	  toCapabilities(opt_capabilities) {
	    let caps = opt_capabilities || Capabilities.chrome();
	    caps.
	        set(Capability.PROXY, this.proxy_).
	        set(Capability.LOGGING_PREFS, this.logPrefs_).
	        set(OPTIONS_CAPABILITY_KEY, this);
	    return caps;
	  }

	  /**
	   * Converts this instance to its JSON wire protocol representation. Note this
	   * function is an implementation not intended for general use.
	   * @return {!Object} The JSON wire protocol representation of this instance.
	   */
	  [Symbols.serialize]() {
	    let json = {};
	    for (let key in this.options_) {
	      if (this.options_[key] != null) {
	        json[key] = this.options_[key];
	      }
	    }
	    if (this.extensions_.length) {
	      json.extensions = this.extensions_.map(function(extension) {
	        if (Buffer.isBuffer(extension)) {
	          return extension.toString('base64');
	        }
	        return io.read(/** @type {string} */(extension))
	            .then(buffer => buffer.toString('base64'));
	      });
	    }
	    return json;
	  }
	}


	/**
	 * Creates a new WebDriver client for Chrome.
	 */
	class Driver extends webdriver.WebDriver {

	  /**
	   * Creates a new session with the ChromeDriver.
	   *
	   * @param {(Capabilities|Options)=} opt_config The configuration options.
	   * @param {(remote.DriverService|http.Executor)=} opt_serviceExecutor Either
	   *     a  DriverService to use for the remote end, or a preconfigured executor
	   *     for an externally managed endpoint. If neither is provided, the
	   *     {@linkplain ##getDefaultService default service} will be used by
	   *     default.
	   * @param {promise.ControlFlow=} opt_flow The control flow to use, or `null`
	   *     to use the currently active flow.
	   * @return {!Driver} A new driver instance.
	   */
	  static createSession(opt_config, opt_serviceExecutor, opt_flow) {
	    let executor;
	    if (opt_serviceExecutor instanceof http.Executor) {
	      executor = opt_serviceExecutor;
	      configureExecutor(executor);
	    } else {
	      let service = opt_serviceExecutor || getDefaultService();
	      executor = createExecutor(service.start());
	    }

	    let caps =
	        opt_config instanceof Options ? opt_config.toCapabilities() :
	        (opt_config || Capabilities.chrome());

	    return /** @type {!Driver} */(
	        webdriver.WebDriver.createSession(executor, caps, opt_flow, this));
	  }

	  /**
	   * This function is a no-op as file detectors are not supported by this
	   * implementation.
	   * @override
	   */
	  setFileDetector() {}

	  /**
	   * Schedules a command to launch Chrome App with given ID.
	   * @param {string} id ID of the App to launch.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when app is launched.
	   */
	  launchApp(id) {
	    return this.schedule(
	        new command.Command(Command.LAUNCH_APP).setParameter('id', id),
	        'Driver.launchApp()');
	  }
	}


	// PUBLIC API


	exports.Driver = Driver;
	exports.Options = Options;
	exports.ServiceBuilder = ServiceBuilder;
	exports.getDefaultService = getDefaultService;
	exports.setDefaultService = setDefaultService;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13), __webpack_require__(18).Buffer))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(19)
	var ieee754 = __webpack_require__(20)
	var isArray = __webpack_require__(21)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 19 */
/***/ function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr(len * 3 / 4 - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ },
/* 20 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 21 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines an {@linkplain cmd.Executor command executor} that
	 * communicates with a remote end using HTTP + JSON.
	 */

	'use strict';

	const http = __webpack_require__(23);
	const https = __webpack_require__(59);
	const url = __webpack_require__(52);

	const httpLib = __webpack_require__(60);


	/**
	 * @typedef {{protocol: (?string|undefined),
	 *            auth: (?string|undefined),
	 *            hostname: (?string|undefined),
	 *            host: (?string|undefined),
	 *            port: (?string|undefined),
	 *            path: (?string|undefined),
	 *            pathname: (?string|undefined)}}
	 */
	var RequestOptions;


	/**
	 * @param {string} aUrl The request URL to parse.
	 * @return {RequestOptions} The request options.
	 * @throws {Error} if the URL does not include a hostname.
	 */
	function getRequestOptions(aUrl) {
	  let options = url.parse(aUrl);
	  if (!options.hostname) {
	    throw new Error('Invalid URL: ' + aUrl);
	  }
	  // Delete the search and has portions as they are not used.
	  options.search = null;
	  options.hash = null;
	  options.path = options.pathname;
	  return options;
	}


	/**
	 * A basic HTTP client used to send messages to a remote end.
	 *
	 * @implements {httpLib.Client}
	 */
	class HttpClient {
	  /**
	   * @param {string} serverUrl URL for the WebDriver server to send commands to.
	   * @param {http.Agent=} opt_agent The agent to use for each request.
	   *     Defaults to `http.globalAgent`.
	   * @param {?string=} opt_proxy The proxy to use for the connection to the
	   *     server. Default is to use no proxy.
	   */
	  constructor(serverUrl, opt_agent, opt_proxy) {
	    /** @private {http.Agent} */
	    this.agent_ = opt_agent || null;

	    /**
	     * Base options for each request.
	     * @private {RequestOptions}
	     */
	    this.options_ = getRequestOptions(serverUrl);

	    /**
	     * @private {?RequestOptions}
	     */
	    this.proxyOptions_ = opt_proxy ? getRequestOptions(opt_proxy) : null;
	  }

	  /** @override */
	  send(httpRequest) {
	    let data;

	    let headers = {};
	    httpRequest.headers.forEach(function(value, name) {
	      headers[name] = value;
	    });

	    headers['Content-Length'] = 0;
	    if (httpRequest.method == 'POST' || httpRequest.method == 'PUT') {
	      data = JSON.stringify(httpRequest.data);
	      headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
	      headers['Content-Type'] = 'application/json;charset=UTF-8';
	    }

	    let path = this.options_.path;
	    if (path.endsWith('/') && httpRequest.path.startsWith('/')) {
	      path += httpRequest.path.substring(1);
	    } else {
	      path += httpRequest.path;
	    }
	    let parsedPath = url.parse(path);

	    let options = {
	      agent: this.agent_ || null,
	      method: httpRequest.method,

	      auth: this.options_.auth,
	      hostname: this.options_.hostname,
	      port: this.options_.port,
	      protocol: this.options_.protocol,

	      path: parsedPath.path,
	      pathname: parsedPath.pathname,
	      search: parsedPath.search,
	      hash: parsedPath.hash,

	      headers,
	    };

	    return new Promise((fulfill, reject) => {
	      sendRequest(options, fulfill, reject, data, this.proxyOptions_);
	    });
	  }
	}


	/**
	 * Sends a single HTTP request.
	 * @param {!Object} options The request options.
	 * @param {function(!httpLib.Response)} onOk The function to call if the
	 *     request succeeds.
	 * @param {function(!Error)} onError The function to call if the request fails.
	 * @param {?string=} opt_data The data to send with the request.
	 * @param {?RequestOptions=} opt_proxy The proxy server to use for the request.
	 */
	function sendRequest(options, onOk, onError, opt_data, opt_proxy) {
	  var hostname = options.hostname;
	  var port = options.port;

	  if (opt_proxy) {
	    let proxy = /** @type {RequestOptions} */(opt_proxy);

	    // RFC 2616, section 5.1.2:
	    // The absoluteURI form is REQUIRED when the request is being made to a
	    // proxy.
	    let absoluteUri = url.format(options);

	    // RFC 2616, section 14.23:
	    // An HTTP/1.1 proxy MUST ensure that any request message it forwards does
	    // contain an appropriate Host header field that identifies the service
	    // being requested by the proxy.
	    let targetHost = options.hostname
	    if (options.port) {
	      targetHost += ':' + options.port;
	    }

	    // Update the request options with our proxy info.
	    options.headers['Host'] = targetHost;
	    options.path = absoluteUri;
	    options.host = proxy.host;
	    options.hostname = proxy.hostname;
	    options.port = proxy.port;

	    if (proxy.auth) {
	      options.headers['Proxy-Authorization'] =
	          'Basic ' + new Buffer(proxy.auth).toString('base64');
	    }
	  }

	  let requestFn = options.protocol === 'https:' ? https.request : http.request;
	  var request = requestFn(options, function onResponse(response) {
	    if (response.statusCode == 302 || response.statusCode == 303) {
	      try {
	        var location = url.parse(response.headers['location']);
	      } catch (ex) {
	        onError(Error(
	            'Failed to parse "Location" header for server redirect: ' +
	            ex.message + '\nResponse was: \n' +
	            new httpLib.Response(response.statusCode, response.headers, '')));
	        return;
	      }

	      if (!location.hostname) {
	        location.hostname = hostname;
	        location.port = port;
	      }

	      request.abort();
	      sendRequest({
	        method: 'GET',
	        protocol: location.protocol || options.protocol,
	        hostname: location.hostname,
	        port: location.port,
	        path: location.path,
	        pathname: location.pathname,
	        search: location.search,
	        hash: location.hash,
	        headers: {
	          'Accept': 'application/json; charset=utf-8'
	        }
	      }, onOk, onError, undefined, opt_proxy);
	      return;
	    }

	    var body = [];
	    response.on('data', body.push.bind(body));
	    response.on('end', function() {
	      var resp = new httpLib.Response(
	          /** @type {number} */(response.statusCode),
	          /** @type {!Object<string>} */(response.headers),
	          body.join('').replace(/\0/g, ''));
	      onOk(resp);
	    });
	  });

	  request.on('error', function(e) {
	    if (e.code === 'ECONNRESET') {
	      setTimeout(function() {
	        sendRequest(options, onOk, onError, opt_data, opt_proxy);
	      }, 15);
	    } else {
	      var message = e.message;
	      if (e.code) {
	        message = e.code + ' ' + message;
	      }
	      onError(new Error(message));
	    }
	  });

	  if (opt_data) {
	    request.write(opt_data);
	  }

	  request.end();
	}


	// PUBLIC API

	exports.Executor = httpLib.Executor;
	exports.HttpClient = HttpClient;
	exports.Request = httpLib.Request;
	exports.Response = httpLib.Response;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var ClientRequest = __webpack_require__(24)
	var extend = __webpack_require__(50)
	var statusCodes = __webpack_require__(51)
	var url = __webpack_require__(52)

	var http = exports

	http.request = function (opts, cb) {
		if (typeof opts === 'string')
			opts = url.parse(opts)
		else
			opts = extend(opts)

		// Normally, the page is loaded from http or https, so not specifying a protocol
		// will result in a (valid) protocol-relative url. However, this won't work if
		// the protocol is something else, like 'file:'
		var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

		var protocol = opts.protocol || defaultProtocol
		var host = opts.hostname || opts.host
		var port = opts.port
		var path = opts.path || '/'

		// Necessary for IPv6 addresses
		if (host && host.indexOf(':') !== -1)
			host = '[' + host + ']'

		// This may be a relative url. The browser should always be able to interpret it correctly.
		opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
		opts.method = (opts.method || 'GET').toUpperCase()
		opts.headers = opts.headers || {}

		// Also valid opts.auth, opts.mode

		var req = new ClientRequest(opts)
		if (cb)
			req.on('response', cb)
		return req
	}

	http.get = function get (opts, cb) {
		var req = http.request(opts, cb)
		req.end()
		return req
	}

	http.Agent = function () {}
	http.Agent.defaultMaxSockets = 4

	http.STATUS_CODES = statusCodes

	http.METHODS = [
		'CHECKOUT',
		'CONNECT',
		'COPY',
		'DELETE',
		'GET',
		'HEAD',
		'LOCK',
		'M-SEARCH',
		'MERGE',
		'MKACTIVITY',
		'MKCOL',
		'MOVE',
		'NOTIFY',
		'OPTIONS',
		'PATCH',
		'POST',
		'PROPFIND',
		'PROPPATCH',
		'PURGE',
		'PUT',
		'REPORT',
		'SEARCH',
		'SUBSCRIBE',
		'TRACE',
		'UNLOCK',
		'UNSUBSCRIBE'
	]
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {var capability = __webpack_require__(25)
	var inherits = __webpack_require__(26)
	var response = __webpack_require__(27)
	var stream = __webpack_require__(28)
	var toArrayBuffer = __webpack_require__(49)

	var IncomingMessage = response.IncomingMessage
	var rStates = response.readyStates

	function decideMode (preferBinary, useFetch) {
		if (capability.fetch && useFetch) {
			return 'fetch'
		} else if (capability.mozchunkedarraybuffer) {
			return 'moz-chunked-arraybuffer'
		} else if (capability.msstream) {
			return 'ms-stream'
		} else if (capability.arraybuffer && preferBinary) {
			return 'arraybuffer'
		} else if (capability.vbArray && preferBinary) {
			return 'text:vbarray'
		} else {
			return 'text'
		}
	}

	var ClientRequest = module.exports = function (opts) {
		var self = this
		stream.Writable.call(self)

		self._opts = opts
		self._body = []
		self._headers = {}
		if (opts.auth)
			self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
		Object.keys(opts.headers).forEach(function (name) {
			self.setHeader(name, opts.headers[name])
		})

		var preferBinary
		var useFetch = true
		if (opts.mode === 'disable-fetch' || 'timeout' in opts) {
			// If the use of XHR should be preferred and includes preserving the 'content-type' header.
			// Force XHR to be used since the Fetch API does not yet support timeouts.
			useFetch = false
			preferBinary = true
		} else if (opts.mode === 'prefer-streaming') {
			// If streaming is a high priority but binary compatibility and
			// the accuracy of the 'content-type' header aren't
			preferBinary = false
		} else if (opts.mode === 'allow-wrong-content-type') {
			// If streaming is more important than preserving the 'content-type' header
			preferBinary = !capability.overrideMimeType
		} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
			// Use binary if text streaming may corrupt data or the content-type header, or for speed
			preferBinary = true
		} else {
			throw new Error('Invalid value for opts.mode')
		}
		self._mode = decideMode(preferBinary, useFetch)

		self.on('finish', function () {
			self._onFinish()
		})
	}

	inherits(ClientRequest, stream.Writable)

	ClientRequest.prototype.setHeader = function (name, value) {
		var self = this
		var lowerName = name.toLowerCase()
		// This check is not necessary, but it prevents warnings from browsers about setting unsafe
		// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
		// http-browserify did it, so I will too.
		if (unsafeHeaders.indexOf(lowerName) !== -1)
			return

		self._headers[lowerName] = {
			name: name,
			value: value
		}
	}

	ClientRequest.prototype.getHeader = function (name) {
		var self = this
		return self._headers[name.toLowerCase()].value
	}

	ClientRequest.prototype.removeHeader = function (name) {
		var self = this
		delete self._headers[name.toLowerCase()]
	}

	ClientRequest.prototype._onFinish = function () {
		var self = this

		if (self._destroyed)
			return
		var opts = self._opts

		var headersObj = self._headers
		var body = null
		if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH' || opts.method === 'MERGE') {
			if (capability.blobConstructor) {
				body = new global.Blob(self._body.map(function (buffer) {
					return toArrayBuffer(buffer)
				}), {
					type: (headersObj['content-type'] || {}).value || ''
				})
			} else {
				// get utf8 string
				body = Buffer.concat(self._body).toString()
			}
		}

		if (self._mode === 'fetch') {
			var headers = Object.keys(headersObj).map(function (name) {
				return [headersObj[name].name, headersObj[name].value]
			})

			global.fetch(self._opts.url, {
				method: self._opts.method,
				headers: headers,
				body: body || undefined,
				mode: 'cors',
				credentials: opts.withCredentials ? 'include' : 'same-origin'
			}).then(function (response) {
				self._fetchResponse = response
				self._connect()
			}, function (reason) {
				self.emit('error', reason)
			})
		} else {
			var xhr = self._xhr = new global.XMLHttpRequest()
			try {
				xhr.open(self._opts.method, self._opts.url, true)
			} catch (err) {
				process.nextTick(function () {
					self.emit('error', err)
				})
				return
			}

			// Can't set responseType on really old browsers
			if ('responseType' in xhr)
				xhr.responseType = self._mode.split(':')[0]

			if ('withCredentials' in xhr)
				xhr.withCredentials = !!opts.withCredentials

			if (self._mode === 'text' && 'overrideMimeType' in xhr)
				xhr.overrideMimeType('text/plain; charset=x-user-defined')

			if ('timeout' in opts) {
				xhr.timeout = opts.timeout
				xhr.ontimeout = function () {
					self.emit('timeout')
				}
			}

			Object.keys(headersObj).forEach(function (name) {
				xhr.setRequestHeader(headersObj[name].name, headersObj[name].value)
			})

			self._response = null
			xhr.onreadystatechange = function () {
				switch (xhr.readyState) {
					case rStates.LOADING:
					case rStates.DONE:
						self._onXHRProgress()
						break
				}
			}
			// Necessary for streaming in Firefox, since xhr.response is ONLY defined
			// in onprogress, not in onreadystatechange with xhr.readyState = 3
			if (self._mode === 'moz-chunked-arraybuffer') {
				xhr.onprogress = function () {
					self._onXHRProgress()
				}
			}

			xhr.onerror = function () {
				if (self._destroyed)
					return
				self.emit('error', new Error('XHR error'))
			}

			try {
				xhr.send(body)
			} catch (err) {
				process.nextTick(function () {
					self.emit('error', err)
				})
				return
			}
		}
	}

	/**
	 * Checks if xhr.status is readable and non-zero, indicating no error.
	 * Even though the spec says it should be available in readyState 3,
	 * accessing it throws an exception in IE8
	 */
	function statusValid (xhr) {
		try {
			var status = xhr.status
			return (status !== null && status !== 0)
		} catch (e) {
			return false
		}
	}

	ClientRequest.prototype._onXHRProgress = function () {
		var self = this

		if (!statusValid(self._xhr) || self._destroyed)
			return

		if (!self._response)
			self._connect()

		self._response._onXHRProgress()
	}

	ClientRequest.prototype._connect = function () {
		var self = this

		if (self._destroyed)
			return

		self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)
		self._response.on('error', function(err) {
			self.emit('error', err)
		})

		self.emit('response', self._response)
	}

	ClientRequest.prototype._write = function (chunk, encoding, cb) {
		var self = this

		self._body.push(chunk)
		cb()
	}

	ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
		var self = this
		self._destroyed = true
		if (self._response)
			self._response._destroyed = true
		if (self._xhr)
			self._xhr.abort()
		// Currently, there isn't a way to truly abort a fetch.
		// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
	}

	ClientRequest.prototype.end = function (data, encoding, cb) {
		var self = this
		if (typeof data === 'function') {
			cb = data
			data = undefined
		}

		stream.Writable.prototype.end.call(self, data, encoding, cb)
	}

	ClientRequest.prototype.flushHeaders = function () {}
	ClientRequest.prototype.setTimeout = function () {}
	ClientRequest.prototype.setNoDelay = function () {}
	ClientRequest.prototype.setSocketKeepAlive = function () {}

	// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
	var unsafeHeaders = [
		'accept-charset',
		'accept-encoding',
		'access-control-request-headers',
		'access-control-request-method',
		'connection',
		'content-length',
		'cookie',
		'cookie2',
		'date',
		'dnt',
		'expect',
		'host',
		'keep-alive',
		'origin',
		'referer',
		'te',
		'trailer',
		'transfer-encoding',
		'upgrade',
		'user-agent',
		'via'
	]

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer, (function() { return this; }()), __webpack_require__(13)))

/***/ },
/* 25 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

	exports.blobConstructor = false
	try {
		new Blob([new ArrayBuffer(1)])
		exports.blobConstructor = true
	} catch (e) {}

	// The xhr request to example.com may violate some restrictive CSP configurations,
	// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
	// and assume support for certain features below.
	var xhr
	function getXHR () {
		// Cache the xhr value
		if (xhr !== undefined) return xhr

		if (global.XMLHttpRequest) {
			xhr = new global.XMLHttpRequest()
			// If XDomainRequest is available (ie only, where xhr might not work
			// cross domain), use the page location. Otherwise use example.com
			// Note: this doesn't actually make an http request.
			try {
				xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
			} catch(e) {
				xhr = null
			}
		} else {
			// Service workers don't have XHR
			xhr = null
		}
		return xhr
	}

	function checkTypeSupport (type) {
		var xhr = getXHR()
		if (!xhr) return false
		try {
			xhr.responseType = type
			return xhr.responseType === type
		} catch (e) {}
		return false
	}

	// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
	// Safari 7.1 appears to have fixed this bug.
	var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
	var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)

	// If fetch is supported, then arraybuffer will be supported too. Skip calling
	// checkTypeSupport(), since that calls getXHR().
	exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))

	// These next two tests unavoidably show warnings in Chrome. Since fetch will always
	// be used if it's available, just return false for these to avoid the warnings.
	exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
	exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
		checkTypeSupport('moz-chunked-arraybuffer')

	// If fetch is supported, then overrideMimeType will be supported too. Skip calling
	// getXHR().
	exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

	exports.vbArray = isFunction(global.VBArray)

	function isFunction (value) {
		return typeof value === 'function'
	}

	xhr = null // Help gc

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 26 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer, global) {var capability = __webpack_require__(25)
	var inherits = __webpack_require__(26)
	var stream = __webpack_require__(28)

	var rStates = exports.readyStates = {
		UNSENT: 0,
		OPENED: 1,
		HEADERS_RECEIVED: 2,
		LOADING: 3,
		DONE: 4
	}

	var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
		var self = this
		stream.Readable.call(self)

		self._mode = mode
		self.headers = {}
		self.rawHeaders = []
		self.trailers = {}
		self.rawTrailers = []

		// Fake the 'close' event, but only once 'end' fires
		self.on('end', function () {
			// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
			process.nextTick(function () {
				self.emit('close')
			})
		})

		if (mode === 'fetch') {
			self._fetchResponse = response

			self.url = response.url
			self.statusCode = response.status
			self.statusMessage = response.statusText
			
			response.headers.forEach(function(header, key){
				self.headers[key.toLowerCase()] = header
				self.rawHeaders.push(key, header)
			})


			// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
			var reader = response.body.getReader()
			function read () {
				reader.read().then(function (result) {
					if (self._destroyed)
						return
					if (result.done) {
						self.push(null)
						return
					}
					self.push(new Buffer(result.value))
					read()
				}).catch(function(err) {
					self.emit('error', err)
				})
			}
			read()

		} else {
			self._xhr = xhr
			self._pos = 0

			self.url = xhr.responseURL
			self.statusCode = xhr.status
			self.statusMessage = xhr.statusText
			var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
			headers.forEach(function (header) {
				var matches = header.match(/^([^:]+):\s*(.*)/)
				if (matches) {
					var key = matches[1].toLowerCase()
					if (key === 'set-cookie') {
						if (self.headers[key] === undefined) {
							self.headers[key] = []
						}
						self.headers[key].push(matches[2])
					} else if (self.headers[key] !== undefined) {
						self.headers[key] += ', ' + matches[2]
					} else {
						self.headers[key] = matches[2]
					}
					self.rawHeaders.push(matches[1], matches[2])
				}
			})

			self._charset = 'x-user-defined'
			if (!capability.overrideMimeType) {
				var mimeType = self.rawHeaders['mime-type']
				if (mimeType) {
					var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
					if (charsetMatch) {
						self._charset = charsetMatch[1].toLowerCase()
					}
				}
				if (!self._charset)
					self._charset = 'utf-8' // best guess
			}
		}
	}

	inherits(IncomingMessage, stream.Readable)

	IncomingMessage.prototype._read = function () {}

	IncomingMessage.prototype._onXHRProgress = function () {
		var self = this

		var xhr = self._xhr

		var response = null
		switch (self._mode) {
			case 'text:vbarray': // For IE9
				if (xhr.readyState !== rStates.DONE)
					break
				try {
					// This fails in IE8
					response = new global.VBArray(xhr.responseBody).toArray()
				} catch (e) {}
				if (response !== null) {
					self.push(new Buffer(response))
					break
				}
				// Falls through in IE8	
			case 'text':
				try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
					response = xhr.responseText
				} catch (e) {
					self._mode = 'text:vbarray'
					break
				}
				if (response.length > self._pos) {
					var newData = response.substr(self._pos)
					if (self._charset === 'x-user-defined') {
						var buffer = new Buffer(newData.length)
						for (var i = 0; i < newData.length; i++)
							buffer[i] = newData.charCodeAt(i) & 0xff

						self.push(buffer)
					} else {
						self.push(newData, self._charset)
					}
					self._pos = response.length
				}
				break
			case 'arraybuffer':
				if (xhr.readyState !== rStates.DONE || !xhr.response)
					break
				response = xhr.response
				self.push(new Buffer(new Uint8Array(response)))
				break
			case 'moz-chunked-arraybuffer': // take whole
				response = xhr.response
				if (xhr.readyState !== rStates.LOADING || !response)
					break
				self.push(new Buffer(new Uint8Array(response)))
				break
			case 'ms-stream':
				response = xhr.response
				if (xhr.readyState !== rStates.LOADING)
					break
				var reader = new global.MSStreamReader()
				reader.onprogress = function () {
					if (reader.result.byteLength > self._pos) {
						self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
						self._pos = reader.result.byteLength
					}
				}
				reader.onload = function () {
					self.push(null)
				}
				// reader.onerror = ??? // TODO: this
				reader.readAsArrayBuffer(response)
				break
		}

		// The ms-stream case handles end separately in reader.onload()
		if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
			self.push(null)
		}
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13), __webpack_require__(18).Buffer, (function() { return this; }())))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = (function (){
	  try {
	    return __webpack_require__(29); // hack to fix a circular dependency issue when used with browserify
	  } catch(_){}
	}());
	exports = module.exports = __webpack_require__(40);
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(32);
	exports.Duplex = __webpack_require__(39);
	exports.Transform = __webpack_require__(46);
	exports.PassThrough = __webpack_require__(48);

	if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
	  module.exports = Stream;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(30).EventEmitter;
	var inherits = __webpack_require__(26);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(28);
	Stream.Writable = __webpack_require__(31);
	Stream.Duplex = __webpack_require__(44);
	Stream.Transform = __webpack_require__(45);
	Stream.PassThrough = __webpack_require__(47);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 30 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(32)


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.

	'use strict';

	module.exports = Writable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(35);
	/*</replacement>*/

	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var util = __webpack_require__(36);
	util.inherits = __webpack_require__(26);
	/*</replacement>*/

	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(37)
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(29);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(30).EventEmitter;
	  }
	})();
	/*</replacement>*/

	var Buffer = __webpack_require__(18).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(38);
	/*</replacement>*/

	util.inherits(Writable, Stream);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(39);

	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;

	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}

	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(39);

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13), __webpack_require__(33).setImmediate))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var apply = Function.prototype.apply;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// setimmediate attaches itself to the global object
	__webpack_require__(34);
	exports.setImmediate = setImmediate;
	exports.clearImmediate = clearImmediate;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";

	    if (global.setImmediate) {
	        return;
	    }

	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;

	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }

	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }

	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }

	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }

	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }

	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }

	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };

	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }

	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }

	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };

	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }

	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }

	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }

	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();

	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();

	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();

	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();

	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }

	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(13)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}

	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 37 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var buffer = __webpack_require__(18);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	}
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	}
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	}
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	'use strict';

	/*<replacement>*/

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/

	module.exports = Duplex;

	/*<replacement>*/
	var processNextTick = __webpack_require__(35);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(36);
	util.inherits = __webpack_require__(26);
	/*</replacement>*/

	var Readable = __webpack_require__(40);
	var Writable = __webpack_require__(32);

	util.inherits(Duplex, Readable);

	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	module.exports = Readable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(35);
	/*</replacement>*/

	/*<replacement>*/
	var isArray = __webpack_require__(21);
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	var EE = __webpack_require__(30).EventEmitter;

	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(29);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(30).EventEmitter;
	  }
	})();
	/*</replacement>*/

	var Buffer = __webpack_require__(18).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(38);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(36);
	util.inherits = __webpack_require__(26);
	/*</replacement>*/

	/*<replacement>*/
	var debugUtil = __webpack_require__(41);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/

	var BufferList = __webpack_require__(42);
	var StringDecoder;

	util.inherits(Readable, Stream);

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}

	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(39);

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(43).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(39);

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(43).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;

	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 41 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Buffer = __webpack_require__(18).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(38);
	/*</replacement>*/

	module.exports = BufferList;

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(18).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(39)


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(46)


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	'use strict';

	module.exports = Transform;

	var Duplex = __webpack_require__(39);

	/*<replacement>*/
	var util = __webpack_require__(36);
	util.inherits = __webpack_require__(26);
	/*</replacement>*/

	util.inherits(Transform, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}

	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);

	  if (data !== null && data !== undefined) stream.push(data);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(48)


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	'use strict';

	module.exports = PassThrough;

	var Transform = __webpack_require__(46);

	/*<replacement>*/
	var util = __webpack_require__(36);
	util.inherits = __webpack_require__(26);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var Buffer = __webpack_require__(18).Buffer

	module.exports = function (buf) {
		// If the buffer is backed by a Uint8Array, a faster version will work
		if (buf instanceof Uint8Array) {
			// If the buffer isn't a subarray, return the underlying ArrayBuffer
			if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
				return buf.buffer
			} else if (typeof buf.buffer.slice === 'function') {
				// Otherwise we need to get a proper copy
				return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
			}
		}

		if (Buffer.isBuffer(buf)) {
			// This is the slow version that will work with any Buffer
			// implementation (even in old browsers)
			var arrayCopy = new Uint8Array(buf.length)
			var len = buf.length
			for (var i = 0; i < len; i++) {
				arrayCopy[i] = buf[i]
			}
			return arrayCopy.buffer
		} else {
			throw new Error('Argument must be a Buffer')
		}
	}


/***/ },
/* 50 */
/***/ function(module, exports) {

	module.exports = extend

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ },
/* 51 */
/***/ function(module, exports) {

	module.exports = {
	  "100": "Continue",
	  "101": "Switching Protocols",
	  "102": "Processing",
	  "200": "OK",
	  "201": "Created",
	  "202": "Accepted",
	  "203": "Non-Authoritative Information",
	  "204": "No Content",
	  "205": "Reset Content",
	  "206": "Partial Content",
	  "207": "Multi-Status",
	  "208": "Already Reported",
	  "226": "IM Used",
	  "300": "Multiple Choices",
	  "301": "Moved Permanently",
	  "302": "Found",
	  "303": "See Other",
	  "304": "Not Modified",
	  "305": "Use Proxy",
	  "307": "Temporary Redirect",
	  "308": "Permanent Redirect",
	  "400": "Bad Request",
	  "401": "Unauthorized",
	  "402": "Payment Required",
	  "403": "Forbidden",
	  "404": "Not Found",
	  "405": "Method Not Allowed",
	  "406": "Not Acceptable",
	  "407": "Proxy Authentication Required",
	  "408": "Request Timeout",
	  "409": "Conflict",
	  "410": "Gone",
	  "411": "Length Required",
	  "412": "Precondition Failed",
	  "413": "Payload Too Large",
	  "414": "URI Too Long",
	  "415": "Unsupported Media Type",
	  "416": "Range Not Satisfiable",
	  "417": "Expectation Failed",
	  "418": "I'm a teapot",
	  "421": "Misdirected Request",
	  "422": "Unprocessable Entity",
	  "423": "Locked",
	  "424": "Failed Dependency",
	  "425": "Unordered Collection",
	  "426": "Upgrade Required",
	  "428": "Precondition Required",
	  "429": "Too Many Requests",
	  "431": "Request Header Fields Too Large",
	  "451": "Unavailable For Legal Reasons",
	  "500": "Internal Server Error",
	  "501": "Not Implemented",
	  "502": "Bad Gateway",
	  "503": "Service Unavailable",
	  "504": "Gateway Timeout",
	  "505": "HTTP Version Not Supported",
	  "506": "Variant Also Negotiates",
	  "507": "Insufficient Storage",
	  "508": "Loop Detected",
	  "509": "Bandwidth Limit Exceeded",
	  "510": "Not Extended",
	  "511": "Network Authentication Required"
	}


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var punycode = __webpack_require__(53);
	var util = __webpack_require__(55);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // Special case for a simple path URL
	    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(56);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter =
	          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      util.isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host || srcPath.length > 1) &&
	      (last === '.' || last === '..') || last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(54)(module), (function() { return this; }())))

/***/ },
/* 54 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 55 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  isString: function(arg) {
	    return typeof(arg) === 'string';
	  },
	  isObject: function(arg) {
	    return typeof(arg) === 'object' && arg !== null;
	  },
	  isNull: function(arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function(arg) {
	    return arg == null;
	  }
	};


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(57);
	exports.encode = exports.stringify = __webpack_require__(58);


/***/ },
/* 57 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 58 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	var http = __webpack_require__(23);

	var https = module.exports;

	for (var key in http) {
	    if (http.hasOwnProperty(key)) https[key] = http[key];
	};

	https.request = function (params, cb) {
	    if (!params) params = {};
	    params.scheme = 'https';
	    params.protocol = 'https:';
	    return http.request.call(this, params, cb);
	}


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines an environment agnostic {@linkplain cmd.Executor
	 * command executor} that communicates with a remote end using JSON over HTTP.
	 *
	 * Clients should implement the {@link Client} interface, which is used by
	 * the {@link Executor} to send commands to the remote end.
	 */

	'use strict';

	const fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	const path = __webpack_require__(61);

	const cmd = __webpack_require__(62);
	const devmode = __webpack_require__(63);
	const error = __webpack_require__(64);
	const logging = __webpack_require__(65);
	const promise = __webpack_require__(66);
	const Session = __webpack_require__(68).Session;
	const WebElement = __webpack_require__(71).WebElement;


	/**
	 * Converts a headers map to a HTTP header block string.
	 * @param {!Map<string, string>} headers The map to convert.
	 * @return {string} The headers as a string.
	 */
	function headersToString(headers) {
	  let ret = [];
	  headers.forEach(function(value, name) {
	    ret.push(`${name.toLowerCase()}: ${value}`);
	  });
	  return ret.join('\n');
	}


	/**
	 * Represents a HTTP request message. This class is a "partial" request and only
	 * defines the path on the server to send a request to. It is each client's
	 * responsibility to build the full URL for the final request.
	 * @final
	 */
	class Request {
	  /**
	   * @param {string} method The HTTP method to use for the request.
	   * @param {string} path The path on the server to send the request to.
	   * @param {Object=} opt_data This request's non-serialized JSON payload data.
	   */
	  constructor(method, path, opt_data) {
	    this.method = /** string */method;
	    this.path = /** string */path;
	    this.data = /** Object */opt_data;
	    this.headers = /** !Map<string, string> */new Map(
	        [['Accept', 'application/json; charset=utf-8']]);
	  }

	  /** @override */
	  toString() {
	    let ret = `${this.method} ${this.path} HTTP/1.1\n`;
	    ret += headersToString(this.headers) + '\n\n';
	    if (this.data) {
	      ret += JSON.stringify(this.data);
	    }
	    return ret;
	  }
	}


	/**
	 * Represents a HTTP response message.
	 * @final
	 */
	class Response {
	  /**
	   * @param {number} status The response code.
	   * @param {!Object<string>} headers The response headers. All header names
	   *     will be converted to lowercase strings for consistent lookups.
	   * @param {string} body The response body.
	   */
	  constructor(status, headers, body) {
	    this.status = /** number */status;
	    this.body = /** string */body;
	    this.headers = /** !Map<string, string>*/new Map;
	    for (let header in headers) {
	      this.headers.set(header.toLowerCase(), headers[header]);
	    }
	  }

	  /** @override */
	  toString() {
	    let ret = `HTTP/1.1 ${this.status}\n${headersToString(this.headers)}\n\n`;
	    if (this.body) {
	      ret += this.body;
	    }
	    return ret;
	  }
	}


	const DEV_ROOT = '../../../../buck-out/gen/javascript/';

	/** @enum {string} */
	const Atom = {
	  GET_ATTRIBUTE: devmode
	      ? path.join(__dirname, DEV_ROOT, 'webdriver/atoms/getAttribute.js')
	      : path.join(__dirname, 'atoms/getAttribute.js'),
	  IS_DISPLAYED: devmode
	      ? path.join(__dirname, DEV_ROOT, 'atoms/fragments/is-displayed.js')
	      : path.join(__dirname, 'atoms/isDisplayed.js'),
	};


	const ATOMS = /** !Map<string, !Promise<string>> */new Map();
	const LOG = logging.getLogger('webdriver.http');

	/**
	 * @param {Atom} file The atom file to load.
	 * @return {!Promise<string>} A promise that will resolve to the contents of the
	 *     file.
	 */
	function loadAtom(file) {
	  if (ATOMS.has(file)) {
	    return ATOMS.get(file);
	  }
	  let contents = /** !Promise<string> */new Promise((resolve, reject) => {
	    LOG.finest(() => `Loading atom ${file}`);
	    fs.readFile(file, 'utf8', function(err, data) {
	      if (err) {
	        reject(err);
	      } else {
	        resolve(data);
	      }
	    });
	  });
	  ATOMS.set(file, contents);
	  return contents;
	}


	function post(path) { return resource('POST', path); }
	function del(path)  { return resource('DELETE', path); }
	function get(path)  { return resource('GET', path); }
	function resource(method, path) { return {method: method, path: path}; }


	/** @typedef {{method: string, path: string}} */
	var CommandSpec;


	/** @typedef {function(!cmd.Command): !Promise<!cmd.Command>} */
	var CommandTransformer;


	/**
	 * @param {!cmd.Command} command The initial command.
	 * @param {Atom} atom The name of the atom to execute.
	 * @return {!Promise<!cmd.Command>} The transformed command to execute.
	 */
	function toExecuteAtomCommand(command, atom, ...params) {
	  return loadAtom(atom).then(atom => {
	    return new cmd.Command(cmd.Name.EXECUTE_SCRIPT)
	        .setParameter('sessionId', command.getParameter('sessionId'))
	        .setParameter('script', `return (${atom}).apply(null, arguments)`)
	        .setParameter('args', params.map(param => command.getParameter(param)));
	  });
	}



	/** @const {!Map<string, CommandSpec>} */
	const COMMAND_MAP = new Map([
	    [cmd.Name.GET_SERVER_STATUS, get('/status')],
	    [cmd.Name.NEW_SESSION, post('/session')],
	    [cmd.Name.GET_SESSIONS, get('/sessions')],
	    [cmd.Name.DESCRIBE_SESSION, get('/session/:sessionId')],
	    [cmd.Name.QUIT, del('/session/:sessionId')],
	    [cmd.Name.CLOSE, del('/session/:sessionId/window')],
	    [cmd.Name.GET_CURRENT_WINDOW_HANDLE, get('/session/:sessionId/window_handle')],
	    [cmd.Name.GET_WINDOW_HANDLES, get('/session/:sessionId/window_handles')],
	    [cmd.Name.GET_CURRENT_URL, get('/session/:sessionId/url')],
	    [cmd.Name.GET, post('/session/:sessionId/url')],
	    [cmd.Name.GO_BACK, post('/session/:sessionId/back')],
	    [cmd.Name.GO_FORWARD, post('/session/:sessionId/forward')],
	    [cmd.Name.REFRESH, post('/session/:sessionId/refresh')],
	    [cmd.Name.ADD_COOKIE, post('/session/:sessionId/cookie')],
	    [cmd.Name.GET_ALL_COOKIES, get('/session/:sessionId/cookie')],
	    [cmd.Name.DELETE_ALL_COOKIES, del('/session/:sessionId/cookie')],
	    [cmd.Name.DELETE_COOKIE, del('/session/:sessionId/cookie/:name')],
	    [cmd.Name.FIND_ELEMENT, post('/session/:sessionId/element')],
	    [cmd.Name.FIND_ELEMENTS, post('/session/:sessionId/elements')],
	    [cmd.Name.GET_ACTIVE_ELEMENT, post('/session/:sessionId/element/active')],
	    [cmd.Name.FIND_CHILD_ELEMENT, post('/session/:sessionId/element/:id/element')],
	    [cmd.Name.FIND_CHILD_ELEMENTS, post('/session/:sessionId/element/:id/elements')],
	    [cmd.Name.CLEAR_ELEMENT, post('/session/:sessionId/element/:id/clear')],
	    [cmd.Name.CLICK_ELEMENT, post('/session/:sessionId/element/:id/click')],
	    [cmd.Name.SEND_KEYS_TO_ELEMENT, post('/session/:sessionId/element/:id/value')],
	    [cmd.Name.SUBMIT_ELEMENT, post('/session/:sessionId/element/:id/submit')],
	    [cmd.Name.GET_ELEMENT_TEXT, get('/session/:sessionId/element/:id/text')],
	    [cmd.Name.GET_ELEMENT_TAG_NAME, get('/session/:sessionId/element/:id/name')],
	    [cmd.Name.IS_ELEMENT_SELECTED, get('/session/:sessionId/element/:id/selected')],
	    [cmd.Name.IS_ELEMENT_ENABLED, get('/session/:sessionId/element/:id/enabled')],
	    [cmd.Name.IS_ELEMENT_DISPLAYED, get('/session/:sessionId/element/:id/displayed')],
	    [cmd.Name.GET_ELEMENT_LOCATION, get('/session/:sessionId/element/:id/location')],
	    [cmd.Name.GET_ELEMENT_SIZE, get('/session/:sessionId/element/:id/size')],
	    [cmd.Name.GET_ELEMENT_ATTRIBUTE, get('/session/:sessionId/element/:id/attribute/:name')],
	    [cmd.Name.GET_ELEMENT_VALUE_OF_CSS_PROPERTY, get('/session/:sessionId/element/:id/css/:propertyName')],
	    [cmd.Name.ELEMENT_EQUALS, get('/session/:sessionId/element/:id/equals/:other')],
	    [cmd.Name.TAKE_ELEMENT_SCREENSHOT, get('/session/:sessionId/element/:id/screenshot')],
	    [cmd.Name.SWITCH_TO_WINDOW, post('/session/:sessionId/window')],
	    [cmd.Name.MAXIMIZE_WINDOW, post('/session/:sessionId/window/current/maximize')],
	    [cmd.Name.GET_WINDOW_POSITION, get('/session/:sessionId/window/current/position')],
	    [cmd.Name.SET_WINDOW_POSITION, post('/session/:sessionId/window/current/position')],
	    [cmd.Name.GET_WINDOW_SIZE, get('/session/:sessionId/window/current/size')],
	    [cmd.Name.SET_WINDOW_SIZE, post('/session/:sessionId/window/current/size')],
	    [cmd.Name.SWITCH_TO_FRAME, post('/session/:sessionId/frame')],
	    [cmd.Name.GET_PAGE_SOURCE, get('/session/:sessionId/source')],
	    [cmd.Name.GET_TITLE, get('/session/:sessionId/title')],
	    [cmd.Name.EXECUTE_SCRIPT, post('/session/:sessionId/execute')],
	    [cmd.Name.EXECUTE_ASYNC_SCRIPT, post('/session/:sessionId/execute_async')],
	    [cmd.Name.SCREENSHOT, get('/session/:sessionId/screenshot')],
	    [cmd.Name.SET_TIMEOUT, post('/session/:sessionId/timeouts')],
	    [cmd.Name.MOVE_TO, post('/session/:sessionId/moveto')],
	    [cmd.Name.CLICK, post('/session/:sessionId/click')],
	    [cmd.Name.DOUBLE_CLICK, post('/session/:sessionId/doubleclick')],
	    [cmd.Name.MOUSE_DOWN, post('/session/:sessionId/buttondown')],
	    [cmd.Name.MOUSE_UP, post('/session/:sessionId/buttonup')],
	    [cmd.Name.MOVE_TO, post('/session/:sessionId/moveto')],
	    [cmd.Name.SEND_KEYS_TO_ACTIVE_ELEMENT, post('/session/:sessionId/keys')],
	    [cmd.Name.TOUCH_SINGLE_TAP, post('/session/:sessionId/touch/click')],
	    [cmd.Name.TOUCH_DOUBLE_TAP, post('/session/:sessionId/touch/doubleclick')],
	    [cmd.Name.TOUCH_DOWN, post('/session/:sessionId/touch/down')],
	    [cmd.Name.TOUCH_UP, post('/session/:sessionId/touch/up')],
	    [cmd.Name.TOUCH_MOVE, post('/session/:sessionId/touch/move')],
	    [cmd.Name.TOUCH_SCROLL, post('/session/:sessionId/touch/scroll')],
	    [cmd.Name.TOUCH_LONG_PRESS, post('/session/:sessionId/touch/longclick')],
	    [cmd.Name.TOUCH_FLICK, post('/session/:sessionId/touch/flick')],
	    [cmd.Name.ACCEPT_ALERT, post('/session/:sessionId/accept_alert')],
	    [cmd.Name.DISMISS_ALERT, post('/session/:sessionId/dismiss_alert')],
	    [cmd.Name.GET_ALERT_TEXT, get('/session/:sessionId/alert_text')],
	    [cmd.Name.SET_ALERT_TEXT, post('/session/:sessionId/alert_text')],
	    [cmd.Name.SET_ALERT_CREDENTIALS, post('/session/:sessionId/alert/credentials')],
	    [cmd.Name.GET_LOG, post('/session/:sessionId/log')],
	    [cmd.Name.GET_AVAILABLE_LOG_TYPES, get('/session/:sessionId/log/types')],
	    [cmd.Name.GET_SESSION_LOGS, post('/logs')],
	    [cmd.Name.UPLOAD_FILE, post('/session/:sessionId/file')],
	]);


	/** @const {!Map<string, (CommandSpec|CommandTransformer)>} */
	const W3C_COMMAND_MAP = new Map([
	  [cmd.Name.GET_ACTIVE_ELEMENT, get('/session/:sessionId/element/active')],
	  [cmd.Name.GET_ELEMENT_ATTRIBUTE, (cmd) => {
	    return toExecuteAtomCommand(cmd, Atom.GET_ATTRIBUTE, 'id', 'name');
	  }],
	  [cmd.Name.IS_ELEMENT_DISPLAYED, (cmd) => {
	    return toExecuteAtomCommand(cmd, Atom.IS_DISPLAYED, 'id');
	  }],
	  [cmd.Name.MAXIMIZE_WINDOW, post('/session/:sessionId/window/maximize')],
	  [cmd.Name.GET_WINDOW_POSITION, get('/session/:sessionId/window/position')],
	  [cmd.Name.SET_WINDOW_POSITION, post('/session/:sessionId/window/position')],
	  [cmd.Name.GET_WINDOW_SIZE, get('/session/:sessionId/window/size')],
	  [cmd.Name.SET_WINDOW_SIZE, post('/session/:sessionId/window/size')],
	]);


	/**
	 * Handles sending HTTP messages to a remote end.
	 *
	 * @interface
	 */
	class Client {

	  /**
	   * Sends a request to the server. The client will automatically follow any
	   * redirects returned by the server, fulfilling the returned promise with the
	   * final response.
	   *
	   * @param {!Request} httpRequest The request to send.
	   * @return {!Promise<Response>} A promise that will be fulfilled with the
	   *     server's response.
	   */
	  send(httpRequest) {}
	}


	const CLIENTS =
	    /** !WeakMap<!Executor, !(Client|IThenable<!Client>)> */new WeakMap;


	/**
	 * Sends a request using the given executor.
	 * @param {!Executor} executor
	 * @param {!Request} request
	 * @return {!Promise<Response>}
	 */
	function doSend(executor, request) {
	  const client = CLIENTS.get(executor);
	  if (promise.isPromise(client)) {
	    return client.then(client => {
	      CLIENTS.set(executor, client);
	      return client.send(request);
	    });
	  } else {
	    return client.send(request);
	  }
	}


	/**
	 * @param {Map<string, CommandSpec>} customCommands
	 *     A map of custom command definitions.
	 * @param {boolean} w3c Whether to use W3C command mappings.
	 * @param {!cmd.Command} command The command to resolve.
	 * @return {!Promise<!Request>} A promise that will resolve with the
	 *     command to execute.
	 */
	function buildRequest(customCommands, w3c, command) {
	  LOG.finest(() => `Translating command: ${command.getName()}`);
	  let spec = customCommands && customCommands.get(command.getName());
	  if (spec) {
	    return toHttpRequest(spec);
	  }

	  if (w3c) {
	    spec = W3C_COMMAND_MAP.get(command.getName());
	    if (typeof spec === 'function') {
	      LOG.finest(() => `Transforming command for W3C: ${command.getName()}`);
	      return spec(command)
	          .then(newCommand => buildRequest(customCommands, w3c, newCommand));
	    } else if (spec) {
	      return toHttpRequest(spec);
	    }
	  }

	  spec = COMMAND_MAP.get(command.getName());
	  if (spec) {
	    return toHttpRequest(spec);
	  }
	  return Promise.reject(
	      new error.UnknownCommandError(
	          'Unrecognized command: ' + command.getName()));

	  /**
	   * @param {CommandSpec} resource
	   * @return {!Promise<!Request>}
	   */
	  function toHttpRequest(resource) {
	    LOG.finest(() => `Building HTTP request: ${JSON.stringify(resource)}`);
	    let parameters = command.getParameters();
	    let path = buildPath(resource.path, parameters);
	    return Promise.resolve(new Request(resource.method, path, parameters));
	  }
	}


	/**
	 * A command executor that communicates with the server using JSON over HTTP.
	 *
	 * By default, each instance of this class will use the legacy wire protocol
	 * from [Selenium project][json]. The executor will automatically switch to the
	 * [W3C wire protocol][w3c] if the remote end returns a compliant response to
	 * a new session command.
	 *
	 * [json]: https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol
	 * [w3c]: https://w3c.github.io/webdriver/webdriver-spec.html
	 *
	 * @implements {cmd.Executor}
	 */
	class Executor {
	  /**
	   * @param {!(Client|IThenable<!Client>)} client The client to use for sending
	   *     requests to the server, or a promise-like object that will resolve to
	   *     to the client.
	   */
	  constructor(client) {
	    CLIENTS.set(this, client);

	    /**
	     * Whether this executor should use the W3C wire protocol. The executor
	     * will automatically switch if the remote end sends a compliant response
	     * to a new session command, however, this property may be directly set to
	     * `true` to force the executor into W3C mode.
	     * @type {boolean}
	     */
	    this.w3c = false;

	    /** @private {Map<string, CommandSpec>} */
	    this.customCommands_ = null;

	    /** @private {!logging.Logger} */
	    this.log_ = logging.getLogger('webdriver.http.Executor');
	  }

	  /**
	   * Defines a new command for use with this executor. When a command is sent,
	   * the {@code path} will be preprocessed using the command's parameters; any
	   * path segments prefixed with ":" will be replaced by the parameter of the
	   * same name. For example, given "/person/:name" and the parameters
	   * "{name: 'Bob'}", the final command path will be "/person/Bob".
	   *
	   * @param {string} name The command name.
	   * @param {string} method The HTTP method to use when sending this command.
	   * @param {string} path The path to send the command to, relative to
	   *     the WebDriver server's command root and of the form
	   *     "/path/:variable/segment".
	   */
	  defineCommand(name, method, path) {
	    if (!this.customCommands_) {
	      this.customCommands_ = new Map;
	    }
	    this.customCommands_.set(name, {method, path});
	  }

	  /** @override */
	  execute(command) {
	    let request = buildRequest(this.customCommands_, this.w3c, command);
	    return request.then(request => {
	      this.log_.finer(() => `>>> ${request.method} ${request.path}`);
	      return doSend(this, request).then(response => {
	        this.log_.finer(() => `>>>\n${request}\n<<<\n${response}`);

	        let parsed =
	            parseHttpResponse(/** @type {!Response} */ (response), this.w3c);

	        if (command.getName() === cmd.Name.NEW_SESSION
	            || command.getName() === cmd.Name.DESCRIBE_SESSION) {
	          if (!parsed || !parsed['sessionId']) {
	            throw new error.WebDriverError(
	                'Unable to parse new session response: ' + response.body);
	          }

	          // The remote end is a W3C compliant server if there is no `status`
	          // field in the response. This is not appliable for the DESCRIBE_SESSION
	          // command, which is not defined in the W3C spec.
	          if (command.getName() === cmd.Name.NEW_SESSION) {
	            this.w3c = this.w3c || !('status' in parsed);
	          }

	          return new Session(parsed['sessionId'], parsed['value']);
	        }

	        if (parsed
	            && typeof parsed === 'object'
	            && 'value' in parsed) {
	          let value = parsed['value'];
	          return typeof value === 'undefined' ? null : value;
	        }
	        return parsed;
	      });
	    });
	  }
	}


	/**
	 * @param {string} str .
	 * @return {?} .
	 */
	function tryParse(str) {
	  try {
	    return JSON.parse(str);
	  } catch (ignored) {
	    // Do nothing.
	  }
	}


	/**
	 * Callback used to parse {@link Response} objects from a
	 * {@link HttpClient}.
	 * @param {!Response} httpResponse The HTTP response to parse.
	 * @param {boolean} w3c Whether the response should be processed using the
	 *     W3C wire protocol.
	 * @return {?} The parsed response.
	 * @throws {WebDriverError} If the HTTP response is an error.
	 */
	function parseHttpResponse(httpResponse, w3c) {
	  let parsed = tryParse(httpResponse.body);
	  if (parsed !== undefined) {
	    if (w3c) {
	      if (httpResponse.status > 399) {
	        error.throwDecodedError(parsed);
	      }

	      if (httpResponse.status < 200) {
	        // This should never happen, but throw the raw response so
	        // users report it.
	        throw new error.WebDriverError(
	            `Unexpected HTTP response:\n${httpResponse}`);
	      }
	    } else {
	      error.checkLegacyResponse(parsed);
	    }
	    return parsed;
	  }

	  let value = httpResponse.body.replace(/\r\n/g, '\n');

	  // 404 represents an unknown command; anything else > 399 is a generic unknown
	  // error.
	  if (httpResponse.status == 404) {
	    throw new error.UnsupportedOperationError(value);
	  } else if (httpResponse.status >= 400) {
	    throw new error.WebDriverError(value);
	  }

	  return value || null;
	}


	/**
	 * Builds a fully qualified path using the given set of command parameters. Each
	 * path segment prefixed with ':' will be replaced by the value of the
	 * corresponding parameter. All parameters spliced into the path will be
	 * removed from the parameter map.
	 * @param {string} path The original resource path.
	 * @param {!Object<*>} parameters The parameters object to splice into the path.
	 * @return {string} The modified path.
	 */
	function buildPath(path, parameters) {
	  let pathParameters = path.match(/\/:(\w+)\b/g);
	  if (pathParameters) {
	    for (let i = 0; i < pathParameters.length; ++i) {
	      let key = pathParameters[i].substring(2);  // Trim the /:
	      if (key in parameters) {
	        let value = parameters[key];
	        if (WebElement.isId(value)) {
	          // When inserting a WebElement into the URL, only use its ID value,
	          // not the full JSON.
	          value = WebElement.extractId(value);
	        }
	        path = path.replace(pathParameters[i], '/' + value);
	        delete parameters[key];
	      } else {
	        throw new error.InvalidArgumentError(
	            'Missing required parameter: ' + key);
	      }
	    }
	  }
	  return path;
	}


	// PUBLIC API

	exports.Executor = Executor;
	exports.Client = Client;
	exports.Request = Request;
	exports.Response = Response;
	exports.buildPath = buildPath;  // Exported for testing.

	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 62 */
/***/ function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Contains several classes for handling commands.
	 */

	'use strict';

	/**
	 * Describes a command to execute.
	 * @final
	 */
	class Command {
	  /** @param {string} name The name of this command. */
	  constructor(name) {
	    /** @private {string} */
	    this.name_ = name;

	    /** @private {!Object<*>} */
	    this.parameters_ = {};
	  }

	  /** @return {string} This command's name. */
	  getName() {
	    return this.name_;
	  }

	  /**
	   * Sets a parameter to send with this command.
	   * @param {string} name The parameter name.
	   * @param {*} value The parameter value.
	   * @return {!Command} A self reference.
	   */
	  setParameter(name, value) {
	    this.parameters_[name] = value;
	    return this;
	  }

	  /**
	   * Sets the parameters for this command.
	   * @param {!Object<*>} parameters The command parameters.
	   * @return {!Command} A self reference.
	   */
	  setParameters(parameters) {
	    this.parameters_ = parameters;
	    return this;
	  }

	  /**
	   * Returns a named command parameter.
	   * @param {string} key The parameter key to look up.
	   * @return {*} The parameter value, or undefined if it has not been set.
	   */
	  getParameter(key) {
	    return this.parameters_[key];
	  }

	  /**
	   * @return {!Object<*>} The parameters to send with this command.
	   */
	  getParameters() {
	    return this.parameters_;
	  }
	}


	/**
	 * Enumeration of predefined names command names that all command processors
	 * will support.
	 * @enum {string}
	 */
	// TODO: Delete obsolete command names.
	const Name = {
	  GET_SERVER_STATUS: 'getStatus',

	  NEW_SESSION: 'newSession',
	  GET_SESSIONS: 'getSessions',
	  DESCRIBE_SESSION: 'getSessionCapabilities',

	  CLOSE: 'close',
	  QUIT: 'quit',

	  GET_CURRENT_URL: 'getCurrentUrl',
	  GET: 'get',
	  GO_BACK: 'goBack',
	  GO_FORWARD: 'goForward',
	  REFRESH: 'refresh',

	  ADD_COOKIE: 'addCookie',
	  GET_COOKIE: 'getCookie',
	  GET_ALL_COOKIES: 'getCookies',
	  DELETE_COOKIE: 'deleteCookie',
	  DELETE_ALL_COOKIES: 'deleteAllCookies',

	  GET_ACTIVE_ELEMENT: 'getActiveElement',
	  FIND_ELEMENT: 'findElement',
	  FIND_ELEMENTS: 'findElements',
	  FIND_CHILD_ELEMENT: 'findChildElement',
	  FIND_CHILD_ELEMENTS: 'findChildElements',

	  CLEAR_ELEMENT: 'clearElement',
	  CLICK_ELEMENT: 'clickElement',
	  SEND_KEYS_TO_ELEMENT: 'sendKeysToElement',
	  SUBMIT_ELEMENT: 'submitElement',

	  GET_CURRENT_WINDOW_HANDLE: 'getCurrentWindowHandle',
	  GET_WINDOW_HANDLES: 'getWindowHandles',
	  GET_WINDOW_POSITION: 'getWindowPosition',
	  SET_WINDOW_POSITION: 'setWindowPosition',
	  GET_WINDOW_SIZE: 'getWindowSize',
	  SET_WINDOW_SIZE: 'setWindowSize',
	  MAXIMIZE_WINDOW: 'maximizeWindow',

	  SWITCH_TO_WINDOW: 'switchToWindow',
	  SWITCH_TO_FRAME: 'switchToFrame',
	  GET_PAGE_SOURCE: 'getPageSource',
	  GET_TITLE: 'getTitle',

	  EXECUTE_SCRIPT: 'executeScript',
	  EXECUTE_ASYNC_SCRIPT: 'executeAsyncScript',

	  GET_ELEMENT_TEXT: 'getElementText',
	  GET_ELEMENT_TAG_NAME: 'getElementTagName',
	  IS_ELEMENT_SELECTED: 'isElementSelected',
	  IS_ELEMENT_ENABLED: 'isElementEnabled',
	  IS_ELEMENT_DISPLAYED: 'isElementDisplayed',
	  GET_ELEMENT_LOCATION: 'getElementLocation',
	  GET_ELEMENT_LOCATION_IN_VIEW: 'getElementLocationOnceScrolledIntoView',
	  GET_ELEMENT_SIZE: 'getElementSize',
	  GET_ELEMENT_ATTRIBUTE: 'getElementAttribute',
	  GET_ELEMENT_VALUE_OF_CSS_PROPERTY: 'getElementValueOfCssProperty',
	  ELEMENT_EQUALS: 'elementEquals',

	  SCREENSHOT: 'screenshot',
	  TAKE_ELEMENT_SCREENSHOT: 'takeElementScreenshot',
	  IMPLICITLY_WAIT: 'implicitlyWait',
	  SET_SCRIPT_TIMEOUT: 'setScriptTimeout',
	  SET_TIMEOUT: 'setTimeout',

	  ACCEPT_ALERT: 'acceptAlert',
	  DISMISS_ALERT: 'dismissAlert',
	  GET_ALERT_TEXT: 'getAlertText',
	  SET_ALERT_TEXT: 'setAlertValue',
	  SET_ALERT_CREDENTIALS: 'setAlertCredentials',

	  EXECUTE_SQL: 'executeSQL',
	  GET_LOCATION: 'getLocation',
	  SET_LOCATION: 'setLocation',
	  GET_APP_CACHE: 'getAppCache',
	  GET_APP_CACHE_STATUS: 'getStatus',
	  CLEAR_APP_CACHE: 'clearAppCache',
	  IS_BROWSER_ONLINE: 'isBrowserOnline',
	  SET_BROWSER_ONLINE: 'setBrowserOnline',

	  GET_LOCAL_STORAGE_ITEM: 'getLocalStorageItem',
	  GET_LOCAL_STORAGE_KEYS: 'getLocalStorageKeys',
	  SET_LOCAL_STORAGE_ITEM: 'setLocalStorageItem',
	  REMOVE_LOCAL_STORAGE_ITEM: 'removeLocalStorageItem',
	  CLEAR_LOCAL_STORAGE: 'clearLocalStorage',
	  GET_LOCAL_STORAGE_SIZE: 'getLocalStorageSize',

	  GET_SESSION_STORAGE_ITEM: 'getSessionStorageItem',
	  GET_SESSION_STORAGE_KEYS: 'getSessionStorageKey',
	  SET_SESSION_STORAGE_ITEM: 'setSessionStorageItem',
	  REMOVE_SESSION_STORAGE_ITEM: 'removeSessionStorageItem',
	  CLEAR_SESSION_STORAGE: 'clearSessionStorage',
	  GET_SESSION_STORAGE_SIZE: 'getSessionStorageSize',

	  SET_SCREEN_ORIENTATION: 'setScreenOrientation',
	  GET_SCREEN_ORIENTATION: 'getScreenOrientation',

	  // These belong to the Advanced user interactions - an element is
	  // optional for these commands.
	  CLICK: 'mouseClick',
	  DOUBLE_CLICK: 'mouseDoubleClick',
	  MOUSE_DOWN: 'mouseButtonDown',
	  MOUSE_UP: 'mouseButtonUp',
	  MOVE_TO: 'mouseMoveTo',
	  SEND_KEYS_TO_ACTIVE_ELEMENT: 'sendKeysToActiveElement',

	  // These belong to the Advanced Touch API
	  TOUCH_SINGLE_TAP: 'touchSingleTap',
	  TOUCH_DOWN: 'touchDown',
	  TOUCH_UP: 'touchUp',
	  TOUCH_MOVE: 'touchMove',
	  TOUCH_SCROLL: 'touchScroll',
	  TOUCH_DOUBLE_TAP: 'touchDoubleTap',
	  TOUCH_LONG_PRESS: 'touchLongPress',
	  TOUCH_FLICK: 'touchFlick',

	  GET_AVAILABLE_LOG_TYPES: 'getAvailableLogTypes',
	  GET_LOG: 'getLog',
	  GET_SESSION_LOGS: 'getSessionLogs',

	  // Non-standard commands used by the standalone Selenium server.
	  UPLOAD_FILE: 'uploadFile'
	};



	/**
	 * Handles the execution of WebDriver {@link Command commands}.
	 * @interface
	 */
	class Executor {
	  /**
	   * Executes the given {@code command}. If there is an error executing the
	   * command, the provided callback will be invoked with the offending error.
	   * Otherwise, the callback will be invoked with a null Error and non-null
	   * response object.
	   *
	   * @param {!Command} command The command to execute.
	   * @return {!Promise<?>} A promise that will be fulfilled with the command
	   *     result.
	   */
	  execute(command) {}
	}



	// PUBLIC API


	module.exports = {
	  Command: Command,
	  Name: Name,
	  Executor: Executor
	};


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Module used to detect if scripts are loaded from the Selenium
	 * project repo instead of from a deployed package.
	 */

	'use strict';

	const fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	const path = __webpack_require__(61);

	/**
	 * @const {boolean}
	 */
	module.exports = (function() {
	  let buildDescFile = path.join(__dirname, '..', '..', 'build.desc');
	  return fs.existsSync(buildDescFile);
	})();

	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 64 */
/***/ function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * The base WebDriver error type. This error type is only used directly when a
	 * more appropriate category is not defined for the offending error.
	 */
	class WebDriverError extends Error {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);

	    /** @override */
	    this.name = this.constructor.name;
	  }
	}


	/**
	 * An attempt was made to select an element that cannot be selected.
	 */
	class ElementNotSelectableError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An element command could not be completed because the element is not visible
	 * on the page.
	 */
	class ElementNotVisibleError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * The arguments passed to a command are either invalid or malformed.
	 */
	class InvalidArgumentError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An illegal attempt was made to set a cookie under a different domain than
	 * the current page.
	 */
	class InvalidCookieDomainError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * The coordinates provided to an interactions operation are invalid.
	 */
	class InvalidElementCoordinatesError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An element command could not be completed because the element is in an
	 * invalid state, e.g. attempting to click an element that is no longer attached
	 * to the document.
	 */
	class InvalidElementStateError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * Argument was an invalid selector.
	 */
	class InvalidSelectorError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * Occurs when a command is directed to a session that does not exist.
	 */
	class NoSuchSessionError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An error occurred while executing JavaScript supplied by the user.
	 */
	class JavascriptError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * The target for mouse interaction is not in the browser’s viewport and cannot
	 * be brought into that viewport.
	 */
	class MoveTargetOutOfBoundsError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An attempt was made to operate on a modal dialog when one was not open.
	 */
	class NoSuchAlertError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An element could not be located on the page using the given search
	 * parameters.
	 */
	class NoSuchElementError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A request to switch to a frame could not be satisfied because the frame
	 * could not be found.
	 */
	class NoSuchFrameError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A request to switch to a window could not be satisfied because the window
	 * could not be found.
	 */
	class NoSuchWindowError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A script did not complete before its timeout expired.
	 */
	class ScriptTimeoutError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A new session could not be created.
	 */
	class SessionNotCreatedError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}



	/**
	 * An element command failed because the referenced element is no longer
	 * attached to the DOM.
	 */
	class StaleElementReferenceError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An operation did not complete before its timeout expired.
	 */
	class TimeoutError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A request to set a cookie’s value could not be satisfied.
	 */
	class UnableToSetCookieError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A screen capture operation was not possible.
	 */
	class UnableToCaptureScreenError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A modal dialog was open, blocking this operation.
	 */
	class UnexpectedAlertOpenError extends WebDriverError {
	  /**
	   * @param {string=} opt_error the error message, if any.
	   * @param {string=} opt_text the text of the open dialog, if available.
	   */
	  constructor(opt_error, opt_text) {
	    super(opt_error);

	    /** @private {(string|undefined)} */
	    this.text_ = opt_text;
	  }

	  /**
	   * @return {(string|undefined)} The text displayed with the unhandled alert,
	   *     if available.
	   */
	  getAlertText() {
	    return this.text_;
	  }
	}


	/**
	 * A command could not be executed because the remote end is not aware of it.
	 */
	class UnknownCommandError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * The requested command matched a known URL but did not match an method for
	 * that URL.
	 */
	class UnknownMethodError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * Reports an unsupport operation.
	 */
	class UnsupportedOperationError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}

	// TODO(jleyba): Define UnknownError as an alias of WebDriverError?


	/**
	 * Enum of legacy error codes.
	 * TODO: remove this when all code paths have been switched to the new error
	 * types.
	 * @deprecated
	 * @enum {number}
	 */
	const ErrorCode = {
	  SUCCESS: 0,
	  NO_SUCH_ELEMENT: 7,
	  NO_SUCH_FRAME: 8,
	  UNKNOWN_COMMAND: 9,
	  UNSUPPORTED_OPERATION: 9,
	  STALE_ELEMENT_REFERENCE: 10,
	  ELEMENT_NOT_VISIBLE: 11,
	  INVALID_ELEMENT_STATE: 12,
	  UNKNOWN_ERROR: 13,
	  ELEMENT_NOT_SELECTABLE: 15,
	  JAVASCRIPT_ERROR: 17,
	  XPATH_LOOKUP_ERROR: 19,
	  TIMEOUT: 21,
	  NO_SUCH_WINDOW: 23,
	  INVALID_COOKIE_DOMAIN: 24,
	  UNABLE_TO_SET_COOKIE: 25,
	  UNEXPECTED_ALERT_OPEN: 26,
	  NO_SUCH_ALERT: 27,
	  SCRIPT_TIMEOUT: 28,
	  INVALID_ELEMENT_COORDINATES: 29,
	  IME_NOT_AVAILABLE: 30,
	  IME_ENGINE_ACTIVATION_FAILED: 31,
	  INVALID_SELECTOR_ERROR: 32,
	  SESSION_NOT_CREATED: 33,
	  MOVE_TARGET_OUT_OF_BOUNDS: 34,
	  SQL_DATABASE_ERROR: 35,
	  INVALID_XPATH_SELECTOR: 51,
	  INVALID_XPATH_SELECTOR_RETURN_TYPE: 52,
	  METHOD_NOT_ALLOWED: 405
	};


	const LEGACY_ERROR_CODE_TO_TYPE = new Map([
	    [ErrorCode.NO_SUCH_ELEMENT, NoSuchElementError],
	    [ErrorCode.NO_SUCH_FRAME, NoSuchFrameError],
	    [ErrorCode.UNSUPPORTED_OPERATION, UnsupportedOperationError],
	    [ErrorCode.STALE_ELEMENT_REFERENCE, StaleElementReferenceError],
	    [ErrorCode.ELEMENT_NOT_VISIBLE, ElementNotVisibleError],
	    [ErrorCode.INVALID_ELEMENT_STATE, InvalidElementStateError],
	    [ErrorCode.UNKNOWN_ERROR, WebDriverError],
	    [ErrorCode.ELEMENT_NOT_SELECTABLE, ElementNotSelectableError],
	    [ErrorCode.JAVASCRIPT_ERROR, JavascriptError],
	    [ErrorCode.XPATH_LOOKUP_ERROR, InvalidSelectorError],
	    [ErrorCode.TIMEOUT, TimeoutError],
	    [ErrorCode.NO_SUCH_WINDOW, NoSuchWindowError],
	    [ErrorCode.INVALID_COOKIE_DOMAIN, InvalidCookieDomainError],
	    [ErrorCode.UNABLE_TO_SET_COOKIE, UnableToSetCookieError],
	    [ErrorCode.UNEXPECTED_ALERT_OPEN, UnexpectedAlertOpenError],
	    [ErrorCode.NO_SUCH_ALERT, NoSuchAlertError],
	    [ErrorCode.SCRIPT_TIMEOUT, ScriptTimeoutError],
	    [ErrorCode.INVALID_ELEMENT_COORDINATES, InvalidElementCoordinatesError],
	    [ErrorCode.INVALID_SELECTOR_ERROR, InvalidSelectorError],
	    [ErrorCode.SESSION_NOT_CREATED, SessionNotCreatedError],
	    [ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS, MoveTargetOutOfBoundsError],
	    [ErrorCode.INVALID_XPATH_SELECTOR, InvalidSelectorError],
	    [ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPE, InvalidSelectorError],
	    [ErrorCode.METHOD_NOT_ALLOWED, UnsupportedOperationError]]);


	const ERROR_CODE_TO_TYPE = new Map([
	    ['unknown error', WebDriverError],
	    ['element not selectable', ElementNotSelectableError],
	    ['element not visible', ElementNotVisibleError],
	    ['invalid argument', InvalidArgumentError],
	    ['invalid cookie domain', InvalidCookieDomainError],
	    ['invalid element coordinates', InvalidElementCoordinatesError],
	    ['invalid element state', InvalidElementStateError],
	    ['invalid selector', InvalidSelectorError],
	    ['invalid session id', NoSuchSessionError],
	    ['javascript error', JavascriptError],
	    ['move target out of bounds', MoveTargetOutOfBoundsError],
	    ['no such alert', NoSuchAlertError],
	    ['no such element', NoSuchElementError],
	    ['no such frame', NoSuchFrameError],
	    ['no such window', NoSuchWindowError],
	    ['script timeout', ScriptTimeoutError],
	    ['session not created', SessionNotCreatedError],
	    ['stale element reference', StaleElementReferenceError],
	    ['timeout', TimeoutError],
	    ['unable to set cookie', UnableToSetCookieError],
	    ['unable to capture screen', UnableToCaptureScreenError],
	    ['unexpected alert open', UnexpectedAlertOpenError],
	    ['unknown command', UnknownCommandError],
	    ['unknown method', UnknownMethodError],
	    ['unsupported operation', UnsupportedOperationError]]);


	const TYPE_TO_ERROR_CODE = new Map;
	ERROR_CODE_TO_TYPE.forEach((value, key) => {
	  TYPE_TO_ERROR_CODE.set(value, key);
	});



	/**
	 * @param {*} err The error to encode.
	 * @return {{error: string, message: string}} the encoded error.
	 */
	function encodeError(err) {
	  let type = WebDriverError;
	  if (err instanceof WebDriverError
	      && TYPE_TO_ERROR_CODE.has(err.constructor)) {
	    type = err.constructor;
	  }

	  let message = err instanceof Error
	      ? err.message
	      : err + '';

	  let code = /** @type {string} */(TYPE_TO_ERROR_CODE.get(type));
	  return {'error': code, 'message': message};
	}


	/**
	 * Checks a response object from a server that adheres to the W3C WebDriver
	 * protocol.
	 * @param {*} data The response data to check.
	 * @return {*} The response data if it was not an encoded error.
	 * @throws {WebDriverError} the decoded error, if present in the data object.
	 * @deprecated Use {@link #throwDecodedError(data)} instead.
	 * @see https://w3c.github.io/webdriver/webdriver-spec.html#protocol
	 */
	function checkResponse(data) {
	  if (data && typeof data.error === 'string') {
	    let ctor = ERROR_CODE_TO_TYPE.get(data.error) || WebDriverError;
	    throw new ctor(data.message);
	  }
	  return data;
	}


	/**
	 * Throws an error coded from the W3C protocol. A generic error will be thrown
	 * if the privded `data` is not a valid encoded error.
	 *
	 * @param {{error: string, message: string}} data The error data to decode.
	 * @throws {WebDriverError} the decoded error.
	 * @see https://w3c.github.io/webdriver/webdriver-spec.html#protocol
	 */
	function throwDecodedError(data) {
	  if (data && typeof data === 'object' && typeof data.error === 'string') {
	    let ctor = ERROR_CODE_TO_TYPE.get(data.error) || WebDriverError;
	    throw new ctor(data.message);
	  }
	  throw new WebDriverError('Unknown error: ' + JSON.stringify(data));
	}


	/**
	 * Checks a legacy response from the Selenium 2.0 wire protocol for an error.
	 * @param {*} responseObj the response object to check.
	 * @return {*} responseObj the original response if it does not define an error.
	 * @throws {WebDriverError} if the response object defines an error.
	 */
	function checkLegacyResponse(responseObj) {
	  // Handle the legacy Selenium error response format.
	  if (responseObj
	      && typeof responseObj === 'object'
	      && typeof responseObj['status'] === 'number'
	      && responseObj['status'] !== 0) {
	    let status = responseObj['status'];
	    let ctor = LEGACY_ERROR_CODE_TO_TYPE.get(status) || WebDriverError;

	    let value = responseObj['value'];

	    if (!value || typeof value !== 'object') {
	      throw new ctor(value + '');
	    } else {
	      let message = value['message'] + '';
	      if (ctor !== UnexpectedAlertOpenError) {
	        throw new ctor(message);
	      }

	      let text = '';
	      if (value['alert'] && typeof value['alert']['text'] === 'string') {
	        text = value['alert']['text'];
	      }
	      throw new UnexpectedAlertOpenError(message, text);
	    }
	  }
	  return responseObj;
	}


	// PUBLIC API


	module.exports = {
	  ErrorCode: ErrorCode,

	  WebDriverError: WebDriverError,
	  ElementNotSelectableError: ElementNotSelectableError,
	  ElementNotVisibleError: ElementNotVisibleError,
	  InvalidArgumentError: InvalidArgumentError,
	  InvalidCookieDomainError: InvalidCookieDomainError,
	  InvalidElementCoordinatesError: InvalidElementCoordinatesError,
	  InvalidElementStateError: InvalidElementStateError,
	  InvalidSelectorError: InvalidSelectorError,
	  JavascriptError: JavascriptError,
	  MoveTargetOutOfBoundsError: MoveTargetOutOfBoundsError,
	  NoSuchAlertError: NoSuchAlertError,
	  NoSuchElementError: NoSuchElementError,
	  NoSuchFrameError: NoSuchFrameError,
	  NoSuchSessionError: NoSuchSessionError,
	  NoSuchWindowError: NoSuchWindowError,
	  ScriptTimeoutError: ScriptTimeoutError,
	  SessionNotCreatedError: SessionNotCreatedError,
	  StaleElementReferenceError: StaleElementReferenceError,
	  TimeoutError: TimeoutError,
	  UnableToSetCookieError: UnableToSetCookieError,
	  UnableToCaptureScreenError: UnableToCaptureScreenError,
	  UnexpectedAlertOpenError: UnexpectedAlertOpenError,
	  UnknownCommandError: UnknownCommandError,
	  UnknownMethodError: UnknownMethodError,
	  UnsupportedOperationError: UnsupportedOperationError,

	  checkResponse: checkResponse,
	  checkLegacyResponse: checkLegacyResponse,
	  encodeError: encodeError,
	  throwDecodedError: throwDecodedError,
	};


/***/ },
/* 65 */
/***/ function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * @fileoverview Defines WebDriver's logging system. The logging system is
	 * broken into major components: local and remote logging.
	 *
	 * The local logging API, which is anchored by the {@linkplain Logger} class is
	 * similar to Java's logging API. Loggers, retrieved by
	 * {@linkplain #getLogger getLogger(name)}, use hierarchical, dot-delimited
	 * namespaces (e.g. "" > "webdriver" > "webdriver.logging"). Recorded log
	 * messages are represented by the {@linkplain Entry} class. You can capture log
	 * records by {@linkplain Logger#addHandler attaching} a handler function to the
	 * desired logger. For convenience, you can quickly enable logging to the
	 * console by simply calling {@linkplain #installConsoleHandler
	 * installConsoleHandler}.
	 *
	 * The [remote logging API](https://github.com/SeleniumHQ/selenium/wiki/Logging)
	 * allows you to retrieve logs from a remote WebDriver server. This API uses the
	 * {@link Preferences} class to define desired log levels prior to creating
	 * a WebDriver session:
	 *
	 *     var prefs = new logging.Preferences();
	 *     prefs.setLevel(logging.Type.BROWSER, logging.Level.DEBUG);
	 *
	 *     var caps = Capabilities.chrome();
	 *     caps.setLoggingPrefs(prefs);
	 *     // ...
	 *
	 * Remote log entries, also represented by the {@link Entry} class, may be
	 * retrieved via {@link webdriver.WebDriver.Logs}:
	 *
	 *     driver.manage().logs().get(logging.Type.BROWSER)
	 *         .then(function(entries) {
	 *            entries.forEach(function(entry) {
	 *              console.log('[%s] %s', entry.level.name, entry.message);
	 *            });
	 *         });
	 *
	 * **NOTE:** Only a few browsers support the remote logging API (notably
	 * Firefox and Chrome). Firefox supports basic logging functionality, while
	 * Chrome exposes robust
	 * [performance logging](https://sites.google.com/a/chromium.org/chromedriver/logging)
	 * options. Remote logging is still considered a non-standard feature, and the
	 * APIs exposed by this module for it are non-frozen. This module will be
	 * updated, possibly breaking backwards-compatibility, once logging is
	 * officially defined by the
	 * [W3C WebDriver spec](http://www.w3.org/TR/webdriver/).
	 */

	/**
	 * Defines a message level that may be used to control logging output.
	 *
	 * @final
	 */
	class Level {
	  /**
	   * @param {string} name the level's name.
	   * @param {number} level the level's numeric value.
	   */
	  constructor(name, level) {
	    if (level < 0) {
	      throw new TypeError('Level must be >= 0');
	    }

	    /** @private {string} */
	    this.name_ = name;

	    /** @private {number} */
	    this.value_ = level;
	  }

	  /** This logger's name. */
	  get name() {
	    return this.name_;
	  }

	  /** The numeric log level. */
	  get value() {
	    return this.value_;
	  }

	  /** @override */
	  toString() {
	    return this.name;
	  }
	}

	/**
	 * Indicates no log messages should be recorded.
	 * @const
	 */
	Level.OFF = new Level('OFF', Infinity);


	/**
	 * Log messages with a level of `1000` or higher.
	 * @const
	 */
	Level.SEVERE = new Level('SEVERE', 1000);


	/**
	 * Log messages with a level of `900` or higher.
	 * @const
	 */
	Level.WARNING = new Level('WARNING', 900);


	/**
	 * Log messages with a level of `800` or higher.
	 * @const
	 */
	Level.INFO = new Level('INFO', 800);


	/**
	 * Log messages with a level of `700` or higher.
	 * @const
	 */
	Level.DEBUG = new Level('DEBUG', 700);


	/**
	 * Log messages with a level of `500` or higher.
	 * @const
	 */
	Level.FINE = new Level('FINE', 500);


	/**
	 * Log messages with a level of `400` or higher.
	 * @const
	 */
	Level.FINER = new Level('FINER', 400);


	/**
	 * Log messages with a level of `300` or higher.
	 * @const
	 */
	Level.FINEST = new Level('FINEST', 300);


	/**
	 * Indicates all log messages should be recorded.
	 * @const
	 */
	Level.ALL = new Level('ALL', 0);


	const ALL_LEVELS = /** !Set<Level> */new Set([
	  Level.OFF,
	  Level.SEVERE,
	  Level.WARNING,
	  Level.INFO,
	  Level.DEBUG,
	  Level.FINE,
	  Level.FINER,
	  Level.FINEST,
	  Level.ALL
	]);


	const LEVELS_BY_NAME = /** !Map<string, !Level> */ new Map([
	  [Level.OFF.name, Level.OFF],
	  [Level.SEVERE.name, Level.SEVERE],
	  [Level.WARNING.name, Level.WARNING],
	  [Level.INFO.name, Level.INFO],
	  [Level.DEBUG.name, Level.DEBUG],
	  [Level.FINE.name, Level.FINE],
	  [Level.FINER.name, Level.FINER],
	  [Level.FINEST.name, Level.FINEST],
	  [Level.ALL.name, Level.ALL]
	]);


	/**
	 * Converts a level name or value to a {@link Level} value. If the name/value
	 * is not recognized, {@link Level.ALL} will be returned.
	 *
	 * @param {(number|string)} nameOrValue The log level name, or value, to
	 *     convert.
	 * @return {!Level} The converted level.
	 */
	function getLevel(nameOrValue) {
	  if (typeof nameOrValue === 'string') {
	    return LEVELS_BY_NAME.get(nameOrValue) || Level.ALL;
	  }
	  if (typeof nameOrValue !== 'number') {
	    throw new TypeError('not a string or number');
	  }
	  for (let level of ALL_LEVELS) {
	    if (nameOrValue >= level.value) {
	      return level;
	    }
	  }
	  return Level.ALL;
	}


	/**
	 * Describes a single log entry.
	 *
	 * @final
	 */
	class Entry {
	  /**
	   * @param {(!Level|string|number)} level The entry level.
	   * @param {string} message The log message.
	   * @param {number=} opt_timestamp The time this entry was generated, in
	   *     milliseconds since 0:00:00, January 1, 1970 UTC. If omitted, the
	   *     current time will be used.
	   * @param {string=} opt_type The log type, if known.
	   */
	  constructor(level, message, opt_timestamp, opt_type) {
	    this.level = level instanceof Level ? level : getLevel(level);
	    this.message = message;
	    this.timestamp =
	        typeof opt_timestamp === 'number' ? opt_timestamp : Date.now();
	    this.type = opt_type || '';
	  }

	  /**
	   * @return {{level: string, message: string, timestamp: number,
	   *           type: string}} The JSON representation of this entry.
	   */
	  toJSON() {
	    return {
	      'level': this.level.name,
	      'message': this.message,
	      'timestamp': this.timestamp,
	      'type': this.type
	    };
	  }
	}


	/** @typedef {(string|function(): string)} */
	let Loggable;


	/**
	 * An object used to log debugging messages. Loggers use a hierarchical,
	 * dot-separated naming scheme. For instance, "foo" is considered the parent of
	 * the "foo.bar" and an ancestor of "foo.bar.baz".
	 *
	 * Each logger may be assigned a {@linkplain #setLevel log level}, which
	 * controls which level of messages will be reported to the
	 * {@linkplain #addHandler handlers} attached to this instance. If a log level
	 * is not explicitly set on a logger, it will inherit its parent.
	 *
	 * This class should never be directly instantiated. Instead, users should
	 * obtain logger references using the {@linkplain ./logging.getLogger()
	 * getLogger()} function.
	 *
	 * @final
	 */
	class Logger {
	  /**
	   * @param {string} name the name of this logger.
	   * @param {Level=} opt_level the initial level for this logger.
	   */
	  constructor(name, opt_level) {
	    /** @private {string} */
	    this.name_ = name;

	    /** @private {Level} */
	    this.level_ = opt_level || null;

	    /** @private {Logger} */
	    this.parent_ = null;

	    /** @private {Set<function(!Entry)>} */
	    this.handlers_ = null;
	  }

	  /** @return {string} the name of this logger. */
	  getName() {
	    return this.name_;
	  }

	  /**
	   * @param {Level} level the new level for this logger, or `null` if the logger
	   *     should inherit its level from its parent logger.
	   */
	  setLevel(level) {
	    this.level_ = level;
	  }

	  /** @return {Level} the log level for this logger. */
	  getLevel() {
	    return this.level_;
	  }

	  /**
	   * @return {!Level} the effective level for this logger.
	   */
	  getEffectiveLevel() {
	    let logger = this;
	    let level;
	    do {
	      level = logger.level_;
	      logger = logger.parent_;
	    } while (logger && !level);
	    return level || Level.OFF;
	  }

	  /**
	   * @param {!Level} level the level to check.
	   * @return {boolean} whether messages recorded at the given level are loggable
	   *     by this instance.
	   */
	  isLoggable(level) {
	    return level.value !== Level.OFF.value
	        && level.value >= this.getEffectiveLevel().value;
	  }

	  /**
	   * Adds a handler to this logger. The handler will be invoked for each message
	   * logged with this instance, or any of its descendants.
	   *
	   * @param {function(!Entry)} handler the handler to add.
	   */
	  addHandler(handler) {
	    if (!this.handlers_) {
	      this.handlers_ = new Set;
	    }
	    this.handlers_.add(handler);
	  }

	  /**
	   * Removes a handler from this logger.
	   *
	   * @param {function(!Entry)} handler the handler to remove.
	   * @return {boolean} whether a handler was successfully removed.
	   */
	  removeHandler(handler) {
	    if (!this.handlers_) {
	      return false;
	    }
	    return this.handlers_.delete(handler);
	  }

	  /**
	   * Logs a message at the given level. The message may be defined as a string
	   * or as a function that will return the message. If a function is provided,
	   * it will only be invoked if this logger's
	   * {@linkplain #getEffectiveLevel() effective log level} includes the given
	   * `level`.
	   *
	   * @param {!Level} level the level at which to log the message.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  log(level, loggable) {
	    if (!this.isLoggable(level)) {
	      return;
	    }
	    let message = '[' + this.name_ + '] '
	        + (typeof loggable === 'function' ? loggable() : loggable);
	    let entry = new Entry(level, message, Date.now());
	    for (let logger = this; !!logger; logger = logger.parent_) {
	      if (logger.handlers_) {
	        for (let handler of logger.handlers_) {
	          handler(entry);
	        }
	      }
	    }
	  }

	  /**
	   * Logs a message at the {@link Level.SEVERE} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  severe(loggable) {
	    this.log(Level.SEVERE, loggable);
	  }

	  /**
	   * Logs a message at the {@link Level.WARNING} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  warning(loggable) {
	    this.log(Level.WARNING, loggable);
	  }

	  /**
	   * Logs a message at the {@link Level.INFO} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  info(loggable) {
	    this.log(Level.INFO, loggable);
	  }

	  /**
	   * Logs a message at the {@link Level.DEBUG} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  debug(loggable) {
	    this.log(Level.DEBUG, loggable);
	  }

	  /**
	   * Logs a message at the {@link Level.FINE} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  fine(loggable) {
	    this.log(Level.FINE, loggable);
	  }

	  /**
	   * Logs a message at the {@link Level.FINER} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  finer(loggable) {
	    this.log(Level.FINER, loggable);
	  }

	  /**
	   * Logs a message at the {@link Level.FINEST} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  finest(loggable) {
	    this.log(Level.FINEST, loggable);
	  }
	}


	/**
	 * Maintains a collection of loggers.
	 *
	 * @final
	 */
	class LogManager {
	  constructor() {
	    /** @private {!Map<string, !Logger>} */
	    this.loggers_ = new Map;
	    this.root_ = new Logger('', Level.OFF);
	  }

	  /**
	   * Retrieves a named logger, creating it in the process. This function will
	   * implicitly create the requested logger, and any of its parents, if they
	   * do not yet exist.
	   *
	   * @param {string} name the logger's name.
	   * @return {!Logger} the requested logger.
	   */
	  getLogger(name) {
	    if (!name) {
	      return this.root_;
	    }
	    let parent = this.root_;
	    for (let i = name.indexOf('.'); i != -1; i = name.indexOf('.', i + 1)) {
	      let parentName = name.substr(0, i);
	      parent = this.createLogger_(parentName, parent);
	    }
	    return this.createLogger_(name, parent);
	  }

	  /**
	   * Creates a new logger.
	   *
	   * @param {string} name the logger's name.
	   * @param {!Logger} parent the logger's parent.
	   * @return {!Logger} the new logger.
	   * @private
	   */
	  createLogger_(name, parent) {
	    if (this.loggers_.has(name)) {
	      return /** @type {!Logger} */(this.loggers_.get(name));
	    }
	    let logger = new Logger(name, null);
	    logger.parent_ = parent;
	    this.loggers_.set(name, logger);
	    return logger;
	  }
	}


	const logManager = new LogManager;


	/**
	 * Retrieves a named logger, creating it in the process. This function will
	 * implicitly create the requested logger, and any of its parents, if they
	 * do not yet exist.
	 *
	 * The log level will be unspecified for newly created loggers. Use
	 * {@link Logger#setLevel(level)} to explicitly set a level.
	 *
	 * @param {string} name the logger's name.
	 * @return {!Logger} the requested logger.
	 */
	function getLogger(name) {
	  return logManager.getLogger(name);
	}


	/**
	 * Pads a number to ensure it has a minimum of two digits.
	 * 
	 * @param {number} n the number to be padded.
	 * @return {string} the padded number.
	 */
	function pad(n) {
	  if (n >= 10) {
	    return '' + n;
	  } else {
	    return '0' + n;
	  }
	}


	/**
	 * Logs all messages to the Console API.
	 * @param {!Entry} entry the entry to log.
	 */
	function consoleHandler(entry) {
	  if (typeof console === 'undefined' || !console) {
	    return;
	  }

	  var timestamp = new Date(entry.timestamp);
	  var msg =
	      '[' + timestamp.getUTCFullYear() + '-' +
	      pad(timestamp.getUTCMonth() + 1) + '-' +
	      pad(timestamp.getUTCDate()) + 'T' +
	      pad(timestamp.getUTCHours()) + ':' +
	      pad(timestamp.getUTCMinutes()) + ':' +
	      pad(timestamp.getUTCSeconds()) + 'Z] ' +
	      '[' + entry.level.name + '] ' +
	      entry.message;

	  var level = entry.level.value;
	  if (level >= Level.SEVERE.value) {
	    console.error(msg);
	  } else if (level >= Level.WARNING.value) {
	    console.warn(msg);
	  } else {
	    console.log(msg);
	  }
	}


	/**
	 * Adds the console handler to the given logger. The console handler will log
	 * all messages using the JavaScript Console API.
	 *
	 * @param {Logger=} opt_logger The logger to add the handler to; defaults
	 *     to the root logger.
	 */
	function addConsoleHandler(opt_logger) {
	  let logger = opt_logger || logManager.root_;
	  logger.addHandler(consoleHandler);
	}


	/**
	 * Removes the console log handler from the given logger.
	 *
	 * @param {Logger=} opt_logger The logger to remove the handler from; defaults
	 *     to the root logger.
	 * @see exports.addConsoleHandler
	 */
	function removeConsoleHandler(opt_logger) {
	  let logger = opt_logger || logManager.root_;
	  logger.removeHandler(consoleHandler);
	}


	/**
	 * Installs the console log handler on the root logger.
	 */
	function installConsoleHandler() {
	  addConsoleHandler(logManager.root_);
	}


	/**
	 * Common log types.
	 * @enum {string}
	 */
	const Type = {
	  /** Logs originating from the browser. */
	  BROWSER: 'browser',
	  /** Logs from a WebDriver client. */
	  CLIENT: 'client',
	  /** Logs from a WebDriver implementation. */
	  DRIVER: 'driver',
	  /** Logs related to performance. */
	  PERFORMANCE: 'performance',
	  /** Logs from the remote server. */
	  SERVER: 'server'
	};


	/**
	 * Describes the log preferences for a WebDriver session.
	 *
	 * @final
	 */
	class Preferences {
	  constructor() {
	    /** @private {!Map<string, !Level>} */
	    this.prefs_ = new Map;
	  }

	  /**
	   * Sets the desired logging level for a particular log type.
	   * @param {(string|Type)} type The log type.
	   * @param {(!Level|string|number)} level The desired log level.
	   * @throws {TypeError} if `type` is not a `string`.
	   */
	  setLevel(type, level) {
	    if (typeof type !== 'string') {
	      throw TypeError('specified log type is not a string: ' + typeof type);
	    }
	    this.prefs_.set(type, level instanceof Level ? level : getLevel(level));
	  }

	  /**
	   * Converts this instance to its JSON representation.
	   * @return {!Object<string, string>} The JSON representation of this set of
	   *     preferences.
	   */
	  toJSON() {
	    let json = {};
	    for (let key of this.prefs_.keys()) {
	      json[key] = this.prefs_.get(key).name;
	    }
	    return json;
	  }
	}


	// PUBLIC API


	module.exports = {
	  Entry: Entry,
	  Level: Level,
	  LogManager: LogManager,
	  Logger: Logger,
	  Preferences: Preferences,
	  Type: Type,
	  addConsoleHandler: addConsoleHandler,
	  getLevel: getLevel,
	  getLogger: getLogger,
	  installConsoleHandler: installConsoleHandler,
	  removeConsoleHandler: removeConsoleHandler
	};


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview
	 *
	 * > ### IMPORTANT NOTICE
	 * >
	 * > The promise manager contained in this module is in the process of being
	 * > phased out in favor of native JavaScript promises. This will be a long
	 * > process and will not be completed until there have been two major LTS Node
	 * > releases (approx. Node v10.0) that support
	 * > [async functions](https://tc39.github.io/ecmascript-asyncawait/).
	 * >
	 * > At this time, the promise manager can be disabled by setting an environment
	 * > variable, `SELENIUM_PROMISE_MANAGER=0`. In the absence of async functions,
	 * > users may use generators with the
	 * > {@link ./promise.consume promise.consume()} function to write "synchronous"
	 * > style tests:
	 * >
	 * > ```js
	 * > const {Builder, By, promise, until} = require('selenium-webdriver');
	 * >
	 * > let result = promise.consume(function* doGoogleSearch() {
	 * >   let driver = new Builder().forBrowser('firefox').build();
	 * >   yield driver.get('http://www.google.com/ncr');
	 * >   yield driver.findElement(By.name('q')).sendKeys('webdriver');
	 * >   yield driver.findElement(By.name('btnG')).click();
	 * >   yield driver.wait(until.titleIs('webdriver - Google Search'), 1000);
	 * >   yield driver.quit();
	 * > });
	 * >
	 * > result.then(_ => console.log('SUCCESS!'),
	 * >             e => console.error('FAILURE: ' + e));
	 * > ```
	 * >
	 * > The motiviation behind this change and full deprecation plan are documented
	 * > in [issue 2969](https://github.com/SeleniumHQ/selenium/issues/2969).
	 * >
	 * >
	 *
	 * The promise module is centered around the {@linkplain ControlFlow}, a class
	 * that coordinates the execution of asynchronous tasks. The ControlFlow allows
	 * users to focus on the imperative commands for their script without worrying
	 * about chaining together every single asynchronous action, which can be
	 * tedious and verbose. APIs may be layered on top of the control flow to read
	 * as if they were synchronous. For instance, the core
	 * {@linkplain ./webdriver.WebDriver WebDriver} API is built on top of the
	 * control flow, allowing users to write
	 *
	 *     driver.get('http://www.google.com/ncr');
	 *     driver.findElement({name: 'q'}).sendKeys('webdriver');
	 *     driver.findElement({name: 'btnGn'}).click();
	 *
	 * instead of
	 *
	 *     driver.get('http://www.google.com/ncr')
	 *     .then(function() {
	 *       return driver.findElement({name: 'q'});
	 *     })
	 *     .then(function(q) {
	 *       return q.sendKeys('webdriver');
	 *     })
	 *     .then(function() {
	 *       return driver.findElement({name: 'btnG'});
	 *     })
	 *     .then(function(btnG) {
	 *       return btnG.click();
	 *     });
	 *
	 * ## Tasks and Task Queues
	 *
	 * The control flow is based on the concept of tasks and task queues. Tasks are
	 * functions that define the basic unit of work for the control flow to execute.
	 * Each task is scheduled via {@link ControlFlow#execute()}, which will return
	 * a {@link ManagedPromise ManagedPromise} that will be resolved with the task's
	 * result.
	 *
	 * A task queue contains all of the tasks scheduled within a single turn of the
	 * [JavaScript event loop][JSEL]. The control flow will create a new task queue
	 * the first time a task is scheduled within an event loop.
	 *
	 *     var flow = promise.controlFlow();
	 *     flow.execute(foo);       // Creates a new task queue and inserts foo.
	 *     flow.execute(bar);       // Inserts bar into the same queue as foo.
	 *     setTimeout(function() {
	 *       flow.execute(baz);     // Creates a new task queue and inserts baz.
	 *     }, 0);
	 *
	 * Whenever the control flow creates a new task queue, it will automatically
	 * begin executing tasks in the next available turn of the event loop. This
	 * execution is scheduled using a "micro-task" timer, such as a (native)
	 * `ManagedPromise.then()` callback.
	 *
	 *     setTimeout(() => console.log('a'));
	 *     ManagedPromise.resolve().then(() => console.log('b'));  // A native promise.
	 *     flow.execute(() => console.log('c'));
	 *     ManagedPromise.resolve().then(() => console.log('d'));
	 *     setTimeout(() => console.log('fin'));
	 *     // b
	 *     // c
	 *     // d
	 *     // a
	 *     // fin
	 *
	 * In the example above, b/c/d is logged before a/fin because native promises
	 * and this module use "micro-task" timers, which have a higher priority than
	 * "macro-tasks" like `setTimeout`.
	 *
	 * ## Task Execution
	 *
	 * Upon creating a task queue, and whenever an exisiting queue completes a task,
	 * the control flow will schedule a micro-task timer to process any scheduled
	 * tasks. This ensures no task is ever started within the same turn of the
	 * JavaScript event loop in which it was scheduled, nor is a task ever started
	 * within the same turn that another finishes.
	 *
	 * When the execution timer fires, a single task will be dequeued and executed.
	 * There are several important events that may occur while executing a task
	 * function:
	 *
	 * 1. A new task queue is created by a call to {@link ControlFlow#execute()}.
	 *    Any tasks scheduled within this task queue are considered subtasks of the
	 *    current task.
	 * 2. The task function throws an error. Any scheduled tasks are immediately
	 *    discarded and the task's promised result (previously returned by
	 *    {@link ControlFlow#execute()}) is immediately rejected with the thrown
	 *    error.
	 * 3. The task function returns sucessfully.
	 *
	 * If a task function created a new task queue, the control flow will wait for
	 * that queue to complete before processing the task result. If the queue
	 * completes without error, the flow will settle the task's promise with the
	 * value originaly returned by the task function. On the other hand, if the task
	 * queue termintes with an error, the task's promise will be rejected with that
	 * error.
	 *
	 *     flow.execute(function() {
	 *       flow.execute(() => console.log('a'));
	 *       flow.execute(() => console.log('b'));
	 *     });
	 *     flow.execute(() => console.log('c'));
	 *     // a
	 *     // b
	 *     // c
	 *
	 * ## ManagedPromise Integration
	 *
	 * In addition to the {@link ControlFlow} class, the promise module also exports
	 * a [ManagedPromise/A+] {@linkplain ManagedPromise implementation} that is deeply
	 * integrated with the ControlFlow. First and foremost, each promise
	 * {@linkplain ManagedPromise#then() callback} is scheduled with the
	 * control flow as a task. As a result, each callback is invoked in its own turn
	 * of the JavaScript event loop with its own task queue. If any tasks are
	 * scheduled within a callback, the callback's promised result will not be
	 * settled until the task queue has completed.
	 *
	 *     promise.fulfilled().then(function() {
	 *       flow.execute(function() {
	 *         console.log('b');
	 *       });
	 *     }).then(() => console.log('a'));
	 *     // b
	 *     // a
	 *
	 * ### Scheduling ManagedPromise Callbacks <a id="scheduling_callbacks"></a>
	 *
	 * How callbacks are scheduled in the control flow depends on when they are
	 * attached to the promise. Callbacks attached to a _previously_ resolved
	 * promise are immediately enqueued as subtasks of the currently running task.
	 *
	 *     var p = promise.fulfilled();
	 *     flow.execute(function() {
	 *       flow.execute(() => console.log('A'));
	 *       p.then(      () => console.log('B'));
	 *       flow.execute(() => console.log('C'));
	 *       p.then(      () => console.log('D'));
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // A
	 *     // B
	 *     // C
	 *     // D
	 *     // fin
	 *
	 * When a promise is resolved while a task function is on the call stack, any
	 * callbacks also registered in that stack frame are scheduled as if the promise
	 * were already resolved:
	 *
	 *     var d = promise.defer();
	 *     flow.execute(function() {
	 *       flow.execute(  () => console.log('A'));
	 *       d.promise.then(() => console.log('B'));
	 *       flow.execute(  () => console.log('C'));
	 *       d.promise.then(() => console.log('D'));
	 *
	 *       d.fulfill();
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // A
	 *     // B
	 *     // C
	 *     // D
	 *     // fin
	 *
	 * Callbacks attached to an _unresolved_ promise within a task function are
	 * only weakly scheduled as subtasks and will be dropped if they reach the
	 * front of the queue before the promise is resolved. In the example below, the
	 * callbacks for `B` & `D` are dropped as sub-tasks since they are attached to
	 * an unresolved promise when they reach the front of the task queue.
	 *
	 *     var d = promise.defer();
	 *     flow.execute(function() {
	 *       flow.execute(  () => console.log('A'));
	 *       d.promise.then(() => console.log('B'));
	 *       flow.execute(  () => console.log('C'));
	 *       d.promise.then(() => console.log('D'));
	 *
	 *       setTimeout(d.fulfill, 20);
	 *     }).then(function() {
	 *       console.log('fin')
	 *     });
	 *     // A
	 *     // C
	 *     // fin
	 *     // B
	 *     // D
	 *
	 * If a promise is resolved while a task function is on the call stack, any
	 * previously registered and unqueued callbacks (i.e. either attached while no
	 * task was on the call stack, or previously dropped as described above) act as
	 * _interrupts_ and are inserted at the front of the task queue. If multiple
	 * promises are fulfilled, their interrupts are enqueued in the order the
	 * promises are resolved.
	 *
	 *     var d1 = promise.defer();
	 *     d1.promise.then(() => console.log('A'));
	 *
	 *     var d2 = promise.defer();
	 *     d2.promise.then(() => console.log('B'));
	 *
	 *     flow.execute(function() {
	 *       d1.promise.then(() => console.log('C'));
	 *       flow.execute(() => console.log('D'));
	 *     });
	 *     flow.execute(function() {
	 *       flow.execute(() => console.log('E'));
	 *       flow.execute(() => console.log('F'));
	 *       d1.fulfill();
	 *       d2.fulfill();
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // D
	 *     // A
	 *     // C
	 *     // B
	 *     // E
	 *     // F
	 *     // fin
	 *
	 * Within a task function (or callback), each step of a promise chain acts as
	 * an interrupt on the task queue:
	 *
	 *     var d = promise.defer();
	 *     flow.execute(function() {
	 *       d.promise.
	 *           then(() => console.log('A')).
	 *           then(() => console.log('B')).
	 *           then(() => console.log('C')).
	 *           then(() => console.log('D'));
	 *
	 *       flow.execute(() => console.log('E'));
	 *       d.fulfill();
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // A
	 *     // B
	 *     // C
	 *     // D
	 *     // E
	 *     // fin
	 *
	 * If there are multiple promise chains derived from a single promise, they are
	 * processed in the order created:
	 *
	 *     var d = promise.defer();
	 *     flow.execute(function() {
	 *       var chain = d.promise.then(() => console.log('A'));
	 *
	 *       chain.then(() => console.log('B')).
	 *           then(() => console.log('C'));
	 *
	 *       chain.then(() => console.log('D')).
	 *           then(() => console.log('E'));
	 *
	 *       flow.execute(() => console.log('F'));
	 *
	 *       d.fulfill();
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // A
	 *     // B
	 *     // C
	 *     // D
	 *     // E
	 *     // F
	 *     // fin
	 *
	 * Even though a subtask's promised result will never resolve while the task
	 * function is on the stack, it will be treated as a promise resolved within the
	 * task. In all other scenarios, a task's promise behaves just like a normal
	 * promise. In the sample below, `C/D` is loggged before `B` because the
	 * resolution of `subtask1` interrupts the flow of the enclosing task. Within
	 * the final subtask, `E/F` is logged in order because `subtask1` is a resolved
	 * promise when that task runs.
	 *
	 *     flow.execute(function() {
	 *       var subtask1 = flow.execute(() => console.log('A'));
	 *       var subtask2 = flow.execute(() => console.log('B'));
	 *
	 *       subtask1.then(() => console.log('C'));
	 *       subtask1.then(() => console.log('D'));
	 *
	 *       flow.execute(function() {
	 *         flow.execute(() => console.log('E'));
	 *         subtask1.then(() => console.log('F'));
	 *       });
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // A
	 *     // C
	 *     // D
	 *     // B
	 *     // E
	 *     // F
	 *     // fin
	 *
	 * Finally, consider the following:
	 *
	 *     var d = promise.defer();
	 *     d.promise.then(() => console.log('A'));
	 *     d.promise.then(() => console.log('B'));
	 *
	 *     flow.execute(function() {
	 *       flow.execute(  () => console.log('C'));
	 *       d.promise.then(() => console.log('D'));
	 *
	 *       flow.execute(  () => console.log('E'));
	 *       d.promise.then(() => console.log('F'));
	 *
	 *       d.fulfill();
	 *
	 *       flow.execute(  () => console.log('G'));
	 *       d.promise.then(() => console.log('H'));
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // A
	 *     // B
	 *     // C
	 *     // D
	 *     // E
	 *     // F
	 *     // G
	 *     // H
	 *     // fin
	 *
	 * In this example, callbacks are registered on `d.promise` both before and
	 * during the invocation of the task function. When `d.fulfill()` is called,
	 * the callbacks registered before the task (`A` & `B`) are registered as
	 * interrupts. The remaining callbacks were all attached within the task and
	 * are scheduled in the flow as standard tasks.
	 *
	 * ## Generator Support
	 *
	 * [Generators][GF] may be scheduled as tasks within a control flow or attached
	 * as callbacks to a promise. Each time the generator yields a promise, the
	 * control flow will wait for that promise to settle before executing the next
	 * iteration of the generator. The yielded promise's fulfilled value will be
	 * passed back into the generator:
	 *
	 *     flow.execute(function* () {
	 *       var d = promise.defer();
	 *
	 *       setTimeout(() => console.log('...waiting...'), 25);
	 *       setTimeout(() => d.fulfill(123), 50);
	 *
	 *       console.log('start: ' + Date.now());
	 *
	 *       var value = yield d.promise;
	 *       console.log('mid: %d; value = %d', Date.now(), value);
	 *
	 *       yield promise.delayed(10);
	 *       console.log('end: ' + Date.now());
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // start: 0
	 *     // ...waiting...
	 *     // mid: 50; value = 123
	 *     // end: 60
	 *     // fin
	 *
	 * Yielding the result of a promise chain will wait for the entire chain to
	 * complete:
	 *
	 *     promise.fulfilled().then(function* () {
	 *       console.log('start: ' + Date.now());
	 *
	 *       var value = yield flow.
	 *           execute(() => console.log('A')).
	 *           then(   () => console.log('B')).
	 *           then(   () => 123);
	 *
	 *       console.log('mid: %s; value = %d', Date.now(), value);
	 *
	 *       yield flow.execute(() => console.log('C'));
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // start: 0
	 *     // A
	 *     // B
	 *     // mid: 2; value = 123
	 *     // C
	 *     // fin
	 *
	 * Yielding a _rejected_ promise will cause the rejected value to be thrown
	 * within the generator function:
	 *
	 *     flow.execute(function* () {
	 *       console.log('start: ' + Date.now());
	 *       try {
	 *         yield promise.delayed(10).then(function() {
	 *           throw Error('boom');
	 *         });
	 *       } catch (ex) {
	 *         console.log('caught time: ' + Date.now());
	 *         console.log(ex.message);
	 *       }
	 *     });
	 *     // start: 0
	 *     // caught time: 10
	 *     // boom
	 *
	 * # Error Handling
	 *
	 * ES6 promises do not require users to handle a promise rejections. This can
	 * result in subtle bugs as the rejections are silently "swallowed" by the
	 * ManagedPromise class.
	 *
	 *     ManagedPromise.reject(Error('boom'));
	 *     // ... *crickets* ...
	 *
	 * Selenium's promise module, on the other hand, requires that every rejection
	 * be explicitly handled. When a {@linkplain ManagedPromise ManagedPromise} is
	 * rejected and no callbacks are defined on that promise, it is considered an
	 * _unhandled rejection_ and reproted to the active task queue. If the rejection
	 * remains unhandled after a single turn of the [event loop][JSEL] (scheduled
	 * with a micro-task), it will propagate up the stack.
	 *
	 * ## Error Propagation
	 *
	 * If an unhandled rejection occurs within a task function, that task's promised
	 * result is rejected and all remaining subtasks are discarded:
	 *
	 *     flow.execute(function() {
	 *       // No callbacks registered on promise -> unhandled rejection
	 *       promise.rejected(Error('boom'));
	 *       flow.execute(function() { console.log('this will never run'); });
	 *     }).catch(function(e) {
	 *       console.log(e.message);
	 *     });
	 *     // boom
	 *
	 * The promised results for discarded tasks are silently rejected with a
	 * cancellation error and existing callback chains will never fire.
	 *
	 *     flow.execute(function() {
	 *       promise.rejected(Error('boom'));
	 *       flow.execute(function() { console.log('a'); }).
	 *           then(function() { console.log('b'); });
	 *     }).catch(function(e) {
	 *       console.log(e.message);
	 *     });
	 *     // boom
	 *
	 * An unhandled rejection takes precedence over a task function's returned
	 * result, even if that value is another promise:
	 *
	 *     flow.execute(function() {
	 *       promise.rejected(Error('boom'));
	 *       return flow.execute(someOtherTask);
	 *     }).catch(function(e) {
	 *       console.log(e.message);
	 *     });
	 *     // boom
	 *
	 * If there are multiple unhandled rejections within a task, they are packaged
	 * in a {@link MultipleUnhandledRejectionError}, which has an `errors` property
	 * that is a `Set` of the recorded unhandled rejections:
	 *
	 *     flow.execute(function() {
	 *       promise.rejected(Error('boom1'));
	 *       promise.rejected(Error('boom2'));
	 *     }).catch(function(ex) {
	 *       console.log(ex instanceof MultipleUnhandledRejectionError);
	 *       for (var e of ex.errors) {
	 *         console.log(e.message);
	 *       }
	 *     });
	 *     // boom1
	 *     // boom2
	 *
	 * When a subtask is discarded due to an unreported rejection in its parent
	 * frame, the existing callbacks on that task will never settle and the
	 * callbacks will not be invoked. If a new callback is attached ot the subtask
	 * _after_ it has been discarded, it is handled the same as adding a callback
	 * to a cancelled promise: the error-callback path is invoked. This behavior is
	 * intended to handle cases where the user saves a reference to a task promise,
	 * as illustrated below.
	 *
	 *     var subTask;
	 *     flow.execute(function() {
	 *       promise.rejected(Error('boom'));
	 *       subTask = flow.execute(function() {});
	 *     }).catch(function(e) {
	 *       console.log(e.message);
	 *     }).then(function() {
	 *       return subTask.then(
	 *           () => console.log('subtask success!'),
	 *           (e) => console.log('subtask failed:\n' + e));
	 *     });
	 *     // boom
	 *     // subtask failed:
	 *     // DiscardedTaskError: Task was discarded due to a previous failure: boom
	 *
	 * When a subtask fails, its promised result is treated the same as any other
	 * promise: it must be handled within one turn of the rejection or the unhandled
	 * rejection is propagated to the parent task. This means users can catch errors
	 * from complex flows from the top level task:
	 *
	 *     flow.execute(function() {
	 *       flow.execute(function() {
	 *         flow.execute(function() {
	 *           throw Error('fail!');
	 *         });
	 *       });
	 *     }).catch(function(e) {
	 *       console.log(e.message);
	 *     });
	 *     // fail!
	 *
	 * ## Unhandled Rejection Events
	 *
	 * When an unhandled rejection propagates to the root of the control flow, the
	 * flow will emit an __uncaughtException__ event. If no listeners are registered
	 * on the flow, the error will be rethrown to the global error handler: an
	 * __uncaughtException__ event from the
	 * [`process`](https://nodejs.org/api/process.html) object in node, or
	 * `window.onerror` when running in a browser.
	 *
	 * Bottom line: you __*must*__ handle rejected promises.
	 *
	 * # ManagedPromise/A+ Compatibility
	 *
	 * This `promise` module is compliant with the [ManagedPromise/A+][] specification
	 * except for sections `2.2.6.1` and `2.2.6.2`:
	 *
	 * >
	 * > - `then` may be called multiple times on the same promise.
	 * >    - If/when `promise` is fulfilled, all respective `onFulfilled` callbacks
	 * >      must execute in the order of their originating calls to `then`.
	 * >    - If/when `promise` is rejected, all respective `onRejected` callbacks
	 * >      must execute in the order of their originating calls to `then`.
	 * >
	 *
	 * Specifically, the conformance tests contains the following scenario (for
	 * brevity, only the fulfillment version is shown):
	 *
	 *     var p1 = ManagedPromise.resolve();
	 *     p1.then(function() {
	 *       console.log('A');
	 *       p1.then(() => console.log('B'));
	 *     });
	 *     p1.then(() => console.log('C'));
	 *     // A
	 *     // C
	 *     // B
	 *
	 * Since the [ControlFlow](#scheduling_callbacks) executes promise callbacks as
	 * tasks, with this module, the result would be
	 *
	 *     var p2 = promise.fulfilled();
	 *     p2.then(function() {
	 *       console.log('A');
	 *       p2.then(() => console.log('B');
	 *     });
	 *     p2.then(() => console.log('C'));
	 *     // A
	 *     // B
	 *     // C
	 *
	 * [JSEL]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop
	 * [GF]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*
	 * [ManagedPromise/A+]: https://promisesaplus.com/
	 */

	'use strict';

	const error = __webpack_require__(64);
	const events = __webpack_require__(67);
	const logging = __webpack_require__(65);


	/**
	 * Alias to help with readability and differentiate types.
	 * @const
	 */
	const NativePromise = Promise;


	/**
	 * Whether to append traces of `then` to rejection errors.
	 * @type {boolean}
	 */
	var LONG_STACK_TRACES = false;  // TODO: this should not be CONSTANT_CASE


	/** @const */
	const LOG = logging.getLogger('promise');


	const UNIQUE_IDS = new WeakMap;
	let nextId = 1;


	function getUid(obj) {
	  let id = UNIQUE_IDS.get(obj);
	  if (!id) {
	    id = nextId;
	    nextId += 1;
	    UNIQUE_IDS.set(obj, id);
	  }
	  return id;
	}


	/**
	 * Runs the given function after a micro-task yield.
	 * @param {function()} fn The function to run.
	 */
	function asyncRun(fn) {
	  NativePromise.resolve().then(function() {
	    try {
	      fn();
	    } catch (ignored) {
	      // Do nothing.
	    }
	  });
	}

	/**
	 * @param {number} level What level of verbosity to log with.
	 * @param {(string|function(this: T): string)} loggable The message to log.
	 * @param {T=} opt_self The object in whose context to run the loggable
	 *     function.
	 * @template T
	 */
	function vlog(level, loggable, opt_self) {
	  var logLevel = logging.Level.FINE;
	  if (level > 1) {
	    logLevel = logging.Level.FINEST;
	  } else if (level > 0) {
	    logLevel = logging.Level.FINER;
	  }

	  if (typeof loggable === 'function') {
	    loggable = loggable.bind(opt_self);
	  }

	  LOG.log(logLevel, loggable);
	}


	/**
	 * Generates an error to capture the current stack trace.
	 * @param {string} name Error name for this stack trace.
	 * @param {string} msg Message to record.
	 * @param {Function=} opt_topFn The function that should appear at the top of
	 *     the stack; only applicable in V8.
	 * @return {!Error} The generated error.
	 */
	function captureStackTrace(name, msg, opt_topFn) {
	  var e = Error(msg);
	  e.name = name;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(e, opt_topFn);
	  } else {
	    var stack = Error().stack;
	    if (stack) {
	      e.stack = e.toString();
	      e.stack += '\n' + stack;
	    }
	  }
	  return e;
	}


	/**
	 * Error used when the computation of a promise is cancelled.
	 */
	class CancellationError extends Error {
	  /**
	   * @param {string=} opt_msg The cancellation message.
	   */
	  constructor(opt_msg) {
	    super(opt_msg);

	    /** @override */
	    this.name = this.constructor.name;

	    /** @private {boolean} */
	    this.silent_ = false;
	  }

	  /**
	   * Wraps the given error in a CancellationError.
	   *
	   * @param {*} error The error to wrap.
	   * @param {string=} opt_msg The prefix message to use.
	   * @return {!CancellationError} A cancellation error.
	   */
	  static wrap(error, opt_msg) {
	    var message;
	    if (error instanceof CancellationError) {
	      return new CancellationError(
	          opt_msg ? (opt_msg + ': ' + error.message) : error.message);
	    } else if (opt_msg) {
	      message = opt_msg;
	      if (error) {
	        message += ': ' + error;
	      }
	      return new CancellationError(message);
	    }
	    if (error) {
	      message = error + '';
	    }
	    return new CancellationError(message);
	  }
	}


	/**
	 * Error used to cancel tasks when a control flow is reset.
	 * @final
	 */
	class FlowResetError extends CancellationError {
	  constructor() {
	    super('ControlFlow was reset');
	    this.silent_ = true;
	  }
	}


	/**
	 * Error used to cancel tasks that have been discarded due to an uncaught error
	 * reported earlier in the control flow.
	 * @final
	 */
	class DiscardedTaskError extends CancellationError {
	  /** @param {*} error The original error. */
	  constructor(error) {
	    if (error instanceof DiscardedTaskError) {
	      return /** @type {!DiscardedTaskError} */(error);
	    }

	    var msg = '';
	    if (error) {
	      msg = ': ' + (
	          typeof error.message === 'string' ? error.message : error);
	    }

	    super('Task was discarded due to a previous failure' + msg);
	    this.silent_ = true;
	  }
	}


	/**
	 * Error used when there are multiple unhandled promise rejections detected
	 * within a task or callback.
	 *
	 * @final
	 */
	class MultipleUnhandledRejectionError extends Error {
	  /**
	   * @param {!(Set<*>)} errors The errors to report.
	   */
	  constructor(errors) {
	    super('Multiple unhandled promise rejections reported');

	    /** @override */
	    this.name = this.constructor.name;

	    /** @type {!Set<*>} */
	    this.errors = errors;
	  }
	}


	/**
	 * Property used to flag constructor's as implementing the Thenable interface
	 * for runtime type checking.
	 * @const
	 */
	const IMPLEMENTED_BY_SYMBOL = Symbol('promise.Thenable');
	const CANCELLABLE_SYMBOL = Symbol('promise.CancellableThenable');


	/**
	 * @param {function(new: ?)} ctor
	 * @param {!Object} symbol
	 */
	function addMarkerSymbol(ctor, symbol) {
	  try {
	    ctor.prototype[symbol] = true;
	  } catch (ignored) {
	    // Property access denied?
	  }
	}


	/**
	 * @param {*} object
	 * @param {!Object} symbol
	 * @return {boolean}
	 */
	function hasMarkerSymbol(object, symbol) {
	  if (!object) {
	    return false;
	  }
	  try {
	    return !!object[symbol];
	  } catch (e) {
	    return false;  // Property access seems to be forbidden.
	  }
	}


	/**
	 * Thenable is a promise-like object with a {@code then} method which may be
	 * used to schedule callbacks on a promised value.
	 *
	 * @record
	 * @extends {IThenable<T>}
	 * @template T
	 */
	class Thenable {
	  /**
	   * Adds a property to a class prototype to allow runtime checks of whether
	   * instances of that class implement the Thenable interface.
	   * @param {function(new: Thenable, ...?)} ctor The
	   *     constructor whose prototype to modify.
	   */
	  static addImplementation(ctor) {
	    addMarkerSymbol(ctor, IMPLEMENTED_BY_SYMBOL);
	  }

	  /**
	   * Checks if an object has been tagged for implementing the Thenable
	   * interface as defined by {@link Thenable.addImplementation}.
	   * @param {*} object The object to test.
	   * @return {boolean} Whether the object is an implementation of the Thenable
	   *     interface.
	   */
	  static isImplementation(object) {
	    return hasMarkerSymbol(object, IMPLEMENTED_BY_SYMBOL);
	  }

	  /**
	   * Registers listeners for when this instance is resolved.
	   *
	   * @param {?(function(T): (R|IThenable<R>))=} opt_callback The
	   *     function to call if this promise is successfully resolved. The function
	   *     should expect a single argument: the promise's resolved value.
	   * @param {?(function(*): (R|IThenable<R>))=} opt_errback
	   *     The function to call if this promise is rejected. The function should
	   *     expect a single argument: the rejection reason.
	   * @return {!Thenable<R>} A new promise which will be resolved with the result
	   *     of the invoked callback.
	   * @template R
	   */
	  then(opt_callback, opt_errback) {}

	  /**
	   * Registers a listener for when this promise is rejected. This is synonymous
	   * with the {@code catch} clause in a synchronous API:
	   *
	   *     // Synchronous API:
	   *     try {
	   *       doSynchronousWork();
	   *     } catch (ex) {
	   *       console.error(ex);
	   *     }
	   *
	   *     // Asynchronous promise API:
	   *     doAsynchronousWork().catch(function(ex) {
	   *       console.error(ex);
	   *     });
	   *
	   * @param {function(*): (R|IThenable<R>)} errback The
	   *     function to call if this promise is rejected. The function should
	   *     expect a single argument: the rejection reason.
	   * @return {!Thenable<R>} A new promise which will be resolved with the result
	   *     of the invoked callback.
	   * @template R
	   */
	  catch(errback) {}
	}


	/**
	 * Marker interface for objects that allow consumers to request the cancellation
	 * of a promies-based operation. A cancelled promise will be rejected with a
	 * {@link CancellationError}.
	 *
	 * This interface is considered package-private and should not be used outside
	 * of selenium-webdriver.
	 *
	 * @interface
	 * @extends {Thenable<T>}
	 * @template T
	 * @package
	 */
	class CancellableThenable {
	  /**
	   * @param {function(new: CancellableThenable, ...?)} ctor
	   */
	  static addImplementation(ctor) {
	    Thenable.addImplementation(ctor);
	    addMarkerSymbol(ctor, CANCELLABLE_SYMBOL);
	  }

	  /**
	   * @param {*} object
	   * @return {boolean}
	   */
	  static isImplementation(object) {
	    return hasMarkerSymbol(object, CANCELLABLE_SYMBOL);
	  }

	  /**
	   * Requests the cancellation of the computation of this promise's value,
	   * rejecting the promise in the process. This method is a no-op if the promise
	   * has already been resolved.
	   *
	   * @param {(string|Error)=} opt_reason The reason this promise is being
	   *     cancelled. This value will be wrapped in a {@link CancellationError}.
	   */
	  cancel(opt_reason) {}
	}


	/**
	 * @enum {string}
	 */
	const PromiseState = {
	  PENDING: 'pending',
	  BLOCKED: 'blocked',
	  REJECTED: 'rejected',
	  FULFILLED: 'fulfilled'
	};


	/**
	 * Internal map used to store cancellation handlers for {@link ManagedPromise}
	 * objects. This is an internal implementation detail used by the
	 * {@link TaskQueue} class to monitor for when a promise is cancelled without
	 * generating an extra promise via then().
	 *
	 * @const {!WeakMap<!ManagedPromise, function(!CancellationError)>}
	 */
	const ON_CANCEL_HANDLER = new WeakMap;


	/**
	 * Represents the eventual value of a completed operation. Each promise may be
	 * in one of three states: pending, fulfilled, or rejected. Each promise starts
	 * in the pending state and may make a single transition to either a
	 * fulfilled or rejected state, at which point the promise is considered
	 * resolved.
	 *
	 * @implements {CancellableThenable<T>}
	 * @template T
	 * @see http://promises-aplus.github.io/promises-spec/
	 */
	class ManagedPromise {
	  /**
	   * @param {function(
	   *           function((T|IThenable<T>|Thenable)=),
	   *           function(*=))} resolver
	   *     Function that is invoked immediately to begin computation of this
	   *     promise's value. The function should accept a pair of callback
	   *     functions, one for fulfilling the promise and another for rejecting it.
	   * @param {ControlFlow=} opt_flow The control flow
	   *     this instance was created under. Defaults to the currently active flow.
	   */
	  constructor(resolver, opt_flow) {
	    if (!usePromiseManager()) {
	      throw TypeError(
	        'Unable to create a managed promise instance: the promise manager has'
	            + ' been disabled by the SELENIUM_PROMISE_MANAGER environment'
	            + ' variable: ' + process.env['SELENIUM_PROMISE_MANAGER']);
	    }
	    getUid(this);

	    /** @private {!ControlFlow} */
	    this.flow_ = opt_flow || controlFlow();

	    /** @private {Error} */
	    this.stack_ = null;
	    if (LONG_STACK_TRACES) {
	      this.stack_ = captureStackTrace('ManagedPromise', 'new', this.constructor);
	    }

	    /** @private {Thenable<?>} */
	    this.parent_ = null;

	    /** @private {Array<!Task>} */
	    this.callbacks_ = null;

	    /** @private {PromiseState} */
	    this.state_ = PromiseState.PENDING;

	    /** @private {boolean} */
	    this.handled_ = false;

	    /** @private {*} */
	    this.value_ = undefined;

	    /** @private {TaskQueue} */
	    this.queue_ = null;

	    try {
	      var self = this;
	      resolver(function(value) {
	        self.resolve_(PromiseState.FULFILLED, value);
	      }, function(reason) {
	        self.resolve_(PromiseState.REJECTED, reason);
	      });
	    } catch (ex) {
	      this.resolve_(PromiseState.REJECTED, ex);
	    }
	  }

	  /**
	   * Creates a promise that is immediately resolved with the given value.
	   *
	   * @param {T=} opt_value The value to resolve.
	   * @return {!ManagedPromise<T>} A promise resolved with the given value.
	   * @template T
	   */
	  static resolve(opt_value) {
	    if (opt_value instanceof ManagedPromise) {
	      return opt_value;
	    }
	    return new ManagedPromise(resolve => resolve(opt_value));
	  }

	  /**
	   * Creates a promise that is immediately rejected with the given reason.
	   *
	   * @param {*=} opt_reason The rejection reason.
	   * @return {!ManagedPromise<?>} A new rejected promise.
	   */
	  static reject(opt_reason) {
	    return new ManagedPromise((_, reject) => reject(opt_reason));
	  }

	  /** @override */
	  toString() {
	    return 'ManagedPromise::' + getUid(this) +
	      ' {[[PromiseStatus]]: "' + this.state_ + '"}';
	  }

	  /**
	   * Resolves this promise. If the new value is itself a promise, this function
	   * will wait for it to be resolved before notifying the registered listeners.
	   * @param {PromiseState} newState The promise's new state.
	   * @param {*} newValue The promise's new value.
	   * @throws {TypeError} If {@code newValue === this}.
	   * @private
	   */
	  resolve_(newState, newValue) {
	    if (PromiseState.PENDING !== this.state_) {
	      return;
	    }

	    if (newValue === this) {
	      // See promise a+, 2.3.1
	      // http://promises-aplus.github.io/promises-spec/#point-48
	      newValue = new TypeError('A promise may not resolve to itself');
	      newState = PromiseState.REJECTED;
	    }

	    this.parent_ = null;
	    this.state_ = PromiseState.BLOCKED;

	    if (newState !== PromiseState.REJECTED) {
	      if (Thenable.isImplementation(newValue)) {
	        // 2.3.2
	        newValue = /** @type {!Thenable} */(newValue);
	        this.parent_ = newValue;
	        newValue.then(
	            this.unblockAndResolve_.bind(this, PromiseState.FULFILLED),
	            this.unblockAndResolve_.bind(this, PromiseState.REJECTED));
	        return;

	      } else if (newValue
	          && (typeof newValue === 'object' || typeof newValue === 'function')) {
	        // 2.3.3

	        try {
	          // 2.3.3.1
	          var then = newValue['then'];
	        } catch (e) {
	          // 2.3.3.2
	          this.state_ = PromiseState.REJECTED;
	          this.value_ = e;
	          this.scheduleNotifications_();
	          return;
	        }

	        if (typeof then === 'function') {
	          // 2.3.3.3
	          this.invokeThen_(/** @type {!Object} */(newValue), then);
	          return;
	        }
	      }
	    }

	    if (newState === PromiseState.REJECTED &&
	        isError(newValue) && newValue.stack && this.stack_) {
	      newValue.stack += '\nFrom: ' + (this.stack_.stack || this.stack_);
	    }

	    // 2.3.3.4 and 2.3.4
	    this.state_ = newState;
	    this.value_ = newValue;
	    this.scheduleNotifications_();
	  }

	  /**
	   * Invokes a thenable's "then" method according to 2.3.3.3 of the promise
	   * A+ spec.
	   * @param {!Object} x The thenable object.
	   * @param {!Function} then The "then" function to invoke.
	   * @private
	   */
	  invokeThen_(x, then) {
	    var called = false;
	    var self = this;

	    var resolvePromise = function(value) {
	      if (!called) {  // 2.3.3.3.3
	        called = true;
	        // 2.3.3.3.1
	        self.unblockAndResolve_(PromiseState.FULFILLED, value);
	      }
	    };

	    var rejectPromise = function(reason) {
	      if (!called) {  // 2.3.3.3.3
	        called = true;
	        // 2.3.3.3.2
	        self.unblockAndResolve_(PromiseState.REJECTED, reason);
	      }
	    };

	    try {
	      // 2.3.3.3
	      then.call(x, resolvePromise, rejectPromise);
	    } catch (e) {
	      // 2.3.3.3.4.2
	      rejectPromise(e);
	    }
	  }

	  /**
	   * @param {PromiseState} newState The promise's new state.
	   * @param {*} newValue The promise's new value.
	   * @private
	   */
	  unblockAndResolve_(newState, newValue) {
	    if (this.state_ === PromiseState.BLOCKED) {
	      this.state_ = PromiseState.PENDING;
	      this.resolve_(newState, newValue);
	    }
	  }

	  /**
	   * @private
	   */
	  scheduleNotifications_() {
	    vlog(2, () => this + ' scheduling notifications', this);

	    ON_CANCEL_HANDLER.delete(this);
	    if (this.value_ instanceof CancellationError
	        && this.value_.silent_) {
	      this.callbacks_ = null;
	    }

	    if (!this.queue_) {
	      this.queue_ = this.flow_.getActiveQueue_();
	    }

	    if (!this.handled_ &&
	        this.state_ === PromiseState.REJECTED &&
	        !(this.value_ instanceof CancellationError)) {
	      this.queue_.addUnhandledRejection(this);
	    }
	    this.queue_.scheduleCallbacks(this);
	  }

	  /** @override */
	  cancel(opt_reason) {
	    if (!canCancel(this)) {
	      return;
	    }

	    if (this.parent_ && canCancel(this.parent_)) {
	      /** @type {!CancellableThenable} */(this.parent_).cancel(opt_reason);
	    } else {
	      var reason = CancellationError.wrap(opt_reason);
	      let onCancel = ON_CANCEL_HANDLER.get(this);
	      if (onCancel) {
	        onCancel(reason);
	        ON_CANCEL_HANDLER.delete(this);
	      }

	      if (this.state_ === PromiseState.BLOCKED) {
	        this.unblockAndResolve_(PromiseState.REJECTED, reason);
	      } else {
	        this.resolve_(PromiseState.REJECTED, reason);
	      }
	    }

	    function canCancel(promise) {
	      if (!(promise instanceof ManagedPromise)) {
	        return CancellableThenable.isImplementation(promise);
	      }
	      return promise.state_ === PromiseState.PENDING
	          || promise.state_ === PromiseState.BLOCKED;
	    }
	  }

	  /** @override */
	  then(opt_callback, opt_errback) {
	    return this.addCallback_(
	        opt_callback, opt_errback, 'then', ManagedPromise.prototype.then);
	  }

	  /** @override */
	  catch(errback) {
	    return this.addCallback_(
	        null, errback, 'catch', ManagedPromise.prototype.catch);
	  }

	  /**
	   * @param {function(): (R|IThenable<R>)} callback
	   * @return {!ManagedPromise<R>}
	   * @template R
	   * @see ./promise.finally()
	   */
	  finally(callback) {
	    let result = thenFinally(this, callback);
	    return /** @type {!ManagedPromise} */(result);
	  }

	  /**
	   * Registers a new callback with this promise
	   * @param {(function(T): (R|IThenable<R>)|null|undefined)} callback The
	   *    fulfillment callback.
	   * @param {(function(*): (R|IThenable<R>)|null|undefined)} errback The
	   *    rejection callback.
	   * @param {string} name The callback name.
	   * @param {!Function} fn The function to use as the top of the stack when
	   *     recording the callback's creation point.
	   * @return {!ManagedPromise<R>} A new promise which will be resolved with the
	   *     esult of the invoked callback.
	   * @template R
	   * @private
	   */
	  addCallback_(callback, errback, name, fn) {
	    if (typeof callback !== 'function' && typeof errback !== 'function') {
	      return this;
	    }

	    this.handled_ = true;
	    if (this.queue_) {
	      this.queue_.clearUnhandledRejection(this);
	    }

	    var cb = new Task(
	        this.flow_,
	        this.invokeCallback_.bind(this, callback, errback),
	        name,
	        LONG_STACK_TRACES ? {name: 'Promise', top: fn} : undefined);
	    cb.promise.parent_ = this;

	    if (this.state_ !== PromiseState.PENDING &&
	        this.state_ !== PromiseState.BLOCKED) {
	      this.flow_.getActiveQueue_().enqueue(cb);
	    } else {
	      if (!this.callbacks_) {
	        this.callbacks_ = [];
	      }
	      this.callbacks_.push(cb);
	      cb.blocked = true;
	      this.flow_.getActiveQueue_().enqueue(cb);
	    }

	    return cb.promise;
	  }

	  /**
	   * Invokes a callback function attached to this promise.
	   * @param {(function(T): (R|IThenable<R>)|null|undefined)} callback The
	   *    fulfillment callback.
	   * @param {(function(*): (R|IThenable<R>)|null|undefined)} errback The
	   *    rejection callback.
	   * @template R
	   * @private
	   */
	  invokeCallback_(callback, errback) {
	    var callbackFn = callback;
	    if (this.state_ === PromiseState.REJECTED) {
	      callbackFn = errback;
	    }

	    if (typeof callbackFn === 'function') {
	      if (isGenerator(callbackFn)) {
	        return consume(callbackFn, null, this.value_);
	      }
	      return callbackFn(this.value_);
	    } else if (this.state_ === PromiseState.REJECTED) {
	      throw this.value_;
	    } else {
	      return this.value_;
	    }
	  }
	}
	CancellableThenable.addImplementation(ManagedPromise);


	/**
	 * @param {!ManagedPromise} promise
	 * @return {boolean}
	 */
	function isPending(promise) {
	  return promise.state_ === PromiseState.PENDING;
	}


	/**
	 * Represents a value that will be resolved at some point in the future. This
	 * class represents the protected "producer" half of a ManagedPromise - each Deferred
	 * has a {@code promise} property that may be returned to consumers for
	 * registering callbacks, reserving the ability to resolve the deferred to the
	 * producer.
	 *
	 * If this Deferred is rejected and there are no listeners registered before
	 * the next turn of the event loop, the rejection will be passed to the
	 * {@link ControlFlow} as an unhandled failure.
	 *
	 * @template T
	 */
	class Deferred {
	  /**
	   * @param {ControlFlow=} opt_flow The control flow this instance was
	   *     created under. This should only be provided during unit tests.
	   */
	  constructor(opt_flow) {
	    var fulfill, reject;

	    /** @type {!ManagedPromise<T>} */
	    this.promise = new ManagedPromise(function(f, r) {
	      fulfill = f;
	      reject = r;
	    }, opt_flow);

	    var self = this;
	    var checkNotSelf = function(value) {
	      if (value === self) {
	        throw new TypeError('May not resolve a Deferred with itself');
	      }
	    };

	    /**
	     * Resolves this deferred with the given value. It is safe to call this as a
	     * normal function (with no bound "this").
	     * @param {(T|IThenable<T>|Thenable)=} opt_value The fulfilled value.
	     */
	    this.fulfill = function(opt_value) {
	      checkNotSelf(opt_value);
	      fulfill(opt_value);
	    };

	    /**
	     * Rejects this promise with the given reason. It is safe to call this as a
	     * normal function (with no bound "this").
	     * @param {*=} opt_reason The rejection reason.
	     */
	    this.reject = function(opt_reason) {
	      checkNotSelf(opt_reason);
	      reject(opt_reason);
	    };
	  }
	}


	/**
	 * Tests if a value is an Error-like object. This is more than an straight
	 * instanceof check since the value may originate from another context.
	 * @param {*} value The value to test.
	 * @return {boolean} Whether the value is an error.
	 */
	function isError(value) {
	  return value instanceof Error ||
	      (!!value && typeof value === 'object'
	          && typeof value.message === 'string');
	}


	/**
	 * Determines whether a {@code value} should be treated as a promise.
	 * Any object whose "then" property is a function will be considered a promise.
	 *
	 * @param {?} value The value to test.
	 * @return {boolean} Whether the value is a promise.
	 */
	function isPromise(value) {
	  try {
	    // Use array notation so the Closure compiler does not obfuscate away our
	    // contract.
	    return value
	        && (typeof value === 'object' || typeof value === 'function')
	        && typeof value['then'] === 'function';
	  } catch (ex) {
	    return false;
	  }
	}


	/**
	 * Creates a promise that will be resolved at a set time in the future.
	 * @param {number} ms The amount of time, in milliseconds, to wait before
	 *     resolving the promise.
	 * @return {!Thenable} The promise.
	 */
	function delayed(ms) {
	  return createPromise(resolve => {
	    setTimeout(() => resolve(), ms);
	  });
	}


	/**
	 * Creates a new deferred object.
	 * @return {!Deferred<T>} The new deferred object.
	 * @template T
	 */
	function defer() {
	  return new Deferred();
	}


	/**
	 * Creates a promise that has been resolved with the given value.
	 * @param {T=} opt_value The resolved value.
	 * @return {!ManagedPromise<T>} The resolved promise.
	 * @deprecated Use {@link ManagedPromise#resolve Promise.resolve(value)}.
	 * @template T
	 */
	function fulfilled(opt_value) {
	  return ManagedPromise.resolve(opt_value);
	}


	/**
	 * Creates a promise that has been rejected with the given reason.
	 * @param {*=} opt_reason The rejection reason; may be any value, but is
	 *     usually an Error or a string.
	 * @return {!ManagedPromise<?>} The rejected promise.
	 * @deprecated Use {@link ManagedPromise#reject Promise.reject(reason)}.
	 */
	function rejected(opt_reason) {
	  return ManagedPromise.reject(opt_reason);
	}


	/**
	 * Wraps a function that expects a node-style callback as its final
	 * argument. This callback expects two arguments: an error value (which will be
	 * null if the call succeeded), and the success value as the second argument.
	 * The callback will the resolve or reject the returned promise, based on its
	 * arguments.
	 * @param {!Function} fn The function to wrap.
	 * @param {...?} var_args The arguments to apply to the function, excluding the
	 *     final callback.
	 * @return {!Thenable} A promise that will be resolved with the
	 *     result of the provided function's callback.
	 */
	function checkedNodeCall(fn, var_args) {
	  let args = Array.prototype.slice.call(arguments, 1);
	  return createPromise(function(fulfill, reject) {
	    try {
	      args.push(function(error, value) {
	        error ? reject(error) : fulfill(value);
	      });
	      fn.apply(undefined, args);
	    } catch (ex) {
	      reject(ex);
	    }
	  });
	}

	/**
	 * Registers a listener to invoke when a promise is resolved, regardless
	 * of whether the promise's value was successfully computed. This function
	 * is synonymous with the {@code finally} clause in a synchronous API:
	 *
	 *     // Synchronous API:
	 *     try {
	 *       doSynchronousWork();
	 *     } finally {
	 *       cleanUp();
	 *     }
	 *
	 *     // Asynchronous promise API:
	 *     doAsynchronousWork().finally(cleanUp);
	 *
	 * __Note:__ similar to the {@code finally} clause, if the registered
	 * callback returns a rejected promise or throws an error, it will silently
	 * replace the rejection error (if any) from this promise:
	 *
	 *     try {
	 *       throw Error('one');
	 *     } finally {
	 *       throw Error('two');  // Hides Error: one
	 *     }
	 *
	 *     let p = Promise.reject(Error('one'));
	 *     promise.finally(p, function() {
	 *       throw Error('two');  // Hides Error: one
	 *     });
	 *
	 * @param {!IThenable<?>} promise The promise to add the listener to.
	 * @param {function(): (R|IThenable<R>)} callback The function to call when
	 *     the promise is resolved.
	 * @return {!IThenable<R>} A promise that will be resolved with the callback
	 *     result.
	 * @template R
	 */
	function thenFinally(promise, callback) {
	  let error;
	  let mustThrow = false;
	  return promise.then(function() {
	    return callback();
	  }, function(err) {
	    error = err;
	    mustThrow = true;
	    return callback();
	  }).then(function() {
	    if (mustThrow) {
	      throw error;
	    }
	  });
	}


	/**
	 * Registers an observer on a promised {@code value}, returning a new promise
	 * that will be resolved when the value is. If {@code value} is not a promise,
	 * then the return promise will be immediately resolved.
	 * @param {*} value The value to observe.
	 * @param {Function=} opt_callback The function to call when the value is
	 *     resolved successfully.
	 * @param {Function=} opt_errback The function to call when the value is
	 *     rejected.
	 * @return {!Thenable} A new promise.
	 */
	function when(value, opt_callback, opt_errback) {
	  if (Thenable.isImplementation(value)) {
	    return value.then(opt_callback, opt_errback);
	  }

	  return createPromise(resolve => resolve(value))
	      .then(opt_callback, opt_errback);
	}


	/**
	 * Invokes the appropriate callback function as soon as a promised `value` is
	 * resolved. This function is similar to `when()`, except it does not return
	 * a new promise.
	 * @param {*} value The value to observe.
	 * @param {Function} callback The function to call when the value is
	 *     resolved successfully.
	 * @param {Function=} opt_errback The function to call when the value is
	 *     rejected.
	 */
	function asap(value, callback, opt_errback) {
	  if (isPromise(value)) {
	    value.then(callback, opt_errback);

	  } else if (callback) {
	    callback(value);
	  }
	}


	/**
	 * Given an array of promises, will return a promise that will be fulfilled
	 * with the fulfillment values of the input array's values. If any of the
	 * input array's promises are rejected, the returned promise will be rejected
	 * with the same reason.
	 *
	 * @param {!Array<(T|!ManagedPromise<T>)>} arr An array of
	 *     promises to wait on.
	 * @return {!Thenable<!Array<T>>} A promise that is
	 *     fulfilled with an array containing the fulfilled values of the
	 *     input array, or rejected with the same reason as the first
	 *     rejected value.
	 * @template T
	 */
	function all(arr) {
	  return createPromise(function(fulfill, reject) {
	    var n = arr.length;
	    var values = [];

	    if (!n) {
	      fulfill(values);
	      return;
	    }

	    var toFulfill = n;
	    var onFulfilled = function(index, value) {
	      values[index] = value;
	      toFulfill--;
	      if (toFulfill == 0) {
	        fulfill(values);
	      }
	    };

	    function processPromise(index) {
	      asap(arr[index], function(value) {
	        onFulfilled(index, value);
	      }, reject);
	    }

	    for (var i = 0; i < n; ++i) {
	      processPromise(i);
	    }
	  });
	}


	/**
	 * Calls a function for each element in an array and inserts the result into a
	 * new array, which is used as the fulfillment value of the promise returned
	 * by this function.
	 *
	 * If the return value of the mapping function is a promise, this function
	 * will wait for it to be fulfilled before inserting it into the new array.
	 *
	 * If the mapping function throws or returns a rejected promise, the
	 * promise returned by this function will be rejected with the same reason.
	 * Only the first failure will be reported; all subsequent errors will be
	 * silently ignored.
	 *
	 * @param {!(Array<TYPE>|ManagedPromise<!Array<TYPE>>)} arr The
	 *     array to iterator over, or a promise that will resolve to said array.
	 * @param {function(this: SELF, TYPE, number, !Array<TYPE>): ?} fn The
	 *     function to call for each element in the array. This function should
	 *     expect three arguments (the element, the index, and the array itself.
	 * @param {SELF=} opt_self The object to be used as the value of 'this' within
	 *     {@code fn}.
	 * @template TYPE, SELF
	 */
	function map(arr, fn, opt_self) {
	  return createPromise(resolve => resolve(arr)).then(v => {
	    if (!Array.isArray(v)) {
	      throw TypeError('not an array');
	    }
	    var arr = /** @type {!Array} */(v);
	    return createPromise(function(fulfill, reject) {
	      var n = arr.length;
	      var values = new Array(n);
	      (function processNext(i) {
	        for (; i < n; i++) {
	          if (i in arr) {
	            break;
	          }
	        }
	        if (i >= n) {
	          fulfill(values);
	          return;
	        }
	        try {
	          asap(
	              fn.call(opt_self, arr[i], i, /** @type {!Array} */(arr)),
	              function(value) {
	                values[i] = value;
	                processNext(i + 1);
	              },
	              reject);
	        } catch (ex) {
	          reject(ex);
	        }
	      })(0);
	    });
	  });
	}


	/**
	 * Calls a function for each element in an array, and if the function returns
	 * true adds the element to a new array.
	 *
	 * If the return value of the filter function is a promise, this function
	 * will wait for it to be fulfilled before determining whether to insert the
	 * element into the new array.
	 *
	 * If the filter function throws or returns a rejected promise, the promise
	 * returned by this function will be rejected with the same reason. Only the
	 * first failure will be reported; all subsequent errors will be silently
	 * ignored.
	 *
	 * @param {!(Array<TYPE>|ManagedPromise<!Array<TYPE>>)} arr The
	 *     array to iterator over, or a promise that will resolve to said array.
	 * @param {function(this: SELF, TYPE, number, !Array<TYPE>): (
	 *             boolean|ManagedPromise<boolean>)} fn The function
	 *     to call for each element in the array.
	 * @param {SELF=} opt_self The object to be used as the value of 'this' within
	 *     {@code fn}.
	 * @template TYPE, SELF
	 */
	function filter(arr, fn, opt_self) {
	  return createPromise(resolve => resolve(arr)).then(v => {
	    if (!Array.isArray(v)) {
	      throw TypeError('not an array');
	    }
	    var arr = /** @type {!Array} */(v);
	    return createPromise(function(fulfill, reject) {
	      var n = arr.length;
	      var values = [];
	      var valuesLength = 0;
	      (function processNext(i) {
	        for (; i < n; i++) {
	          if (i in arr) {
	            break;
	          }
	        }
	        if (i >= n) {
	          fulfill(values);
	          return;
	        }
	        try {
	          var value = arr[i];
	          var include = fn.call(opt_self, value, i, /** @type {!Array} */(arr));
	          asap(include, function(include) {
	            if (include) {
	              values[valuesLength++] = value;
	            }
	            processNext(i + 1);
	            }, reject);
	        } catch (ex) {
	          reject(ex);
	        }
	      })(0);
	    });
	  });
	}


	/**
	 * Returns a promise that will be resolved with the input value in a
	 * fully-resolved state. If the value is an array, each element will be fully
	 * resolved. Likewise, if the value is an object, all keys will be fully
	 * resolved. In both cases, all nested arrays and objects will also be
	 * fully resolved.  All fields are resolved in place; the returned promise will
	 * resolve on {@code value} and not a copy.
	 *
	 * Warning: This function makes no checks against objects that contain
	 * cyclical references:
	 *
	 *     var value = {};
	 *     value['self'] = value;
	 *     promise.fullyResolved(value);  // Stack overflow.
	 *
	 * @param {*} value The value to fully resolve.
	 * @return {!Thenable} A promise for a fully resolved version
	 *     of the input value.
	 */
	function fullyResolved(value) {
	  if (isPromise(value)) {
	    return when(value, fullyResolveValue);
	  }
	  return fullyResolveValue(value);
	}


	/**
	 * @param {*} value The value to fully resolve. If a promise, assumed to
	 *     already be resolved.
	 * @return {!Thenable} A promise for a fully resolved version
	 *     of the input value.
	 */
	function fullyResolveValue(value) {
	  if (Array.isArray(value)) {
	    return fullyResolveKeys(/** @type {!Array} */ (value));
	  }

	  if (isPromise(value)) {
	    if (isPromise(value)) {
	      // We get here when the original input value is a promise that
	      // resolves to itself. When the user provides us with such a promise,
	      // trust that it counts as a "fully resolved" value and return it.
	      // Of course, since it's already a promise, we can just return it
	      // to the user instead of wrapping it in another promise.
	      return /** @type {!ManagedPromise} */ (value);
	    }
	  }

	  if (value && typeof value === 'object') {
	    return fullyResolveKeys(/** @type {!Object} */ (value));
	  }

	  if (typeof value === 'function') {
	    return fullyResolveKeys(/** @type {!Object} */ (value));
	  }

	  return createPromise(resolve => resolve(value));
	}


	/**
	 * @param {!(Array|Object)} obj the object to resolve.
	 * @return {!Thenable} A promise that will be resolved with the
	 *     input object once all of its values have been fully resolved.
	 */
	function fullyResolveKeys(obj) {
	  var isArray = Array.isArray(obj);
	  var numKeys = isArray ? obj.length : (function() {
	    let n = 0;
	    for (let key in obj) {
	      n += 1;
	    }
	    return n;
	  })();

	  if (!numKeys) {
	    return createPromise(resolve => resolve(obj));
	  }

	  function forEachProperty(obj, fn) {
	    for (let key in obj) {
	      fn.call(null, obj[key], key, obj);
	    }
	  }

	  function forEachElement(arr, fn) {
	    arr.forEach(fn);
	  }

	  var numResolved = 0;
	  return createPromise(function(fulfill, reject) {
	    var forEachKey = isArray ? forEachElement: forEachProperty;

	    forEachKey(obj, function(partialValue, key) {
	      if (!Array.isArray(partialValue)
	          && (!partialValue || typeof partialValue !== 'object')) {
	        maybeResolveValue();
	        return;
	      }

	      fullyResolved(partialValue).then(
	          function(resolvedValue) {
	            obj[key] = resolvedValue;
	            maybeResolveValue();
	          },
	          reject);
	    });

	    function maybeResolveValue() {
	      if (++numResolved == numKeys) {
	        fulfill(obj);
	      }
	    }
	  });
	}


	//////////////////////////////////////////////////////////////////////////////
	//
	//  ControlFlow
	//
	//////////////////////////////////////////////////////////////////////////////


	/**
	 * Defines methods for coordinating the execution of asynchronous tasks.
	 * @record
	 */
	class Scheduler {
	  /**
	   * Schedules a task for execution. If the task function is a generator, the
	   * task will be executed using {@link ./promise.consume consume()}.
	   *
	   * @param {function(): (T|IThenable<T>)} fn The function to call to start the
	   *     task.
	   * @param {string=} opt_description A description of the task for debugging
	   *     purposes.
	   * @return {!Thenable<T>} A promise that will be resolved with the task
	   *     result.
	   * @template T
	   */
	  execute(fn, opt_description) {}

	  /**
	   * Creates a new promise using the given resolver function.
	   *
	   * @param {function(
	   *             function((T|IThenable<T>|Thenable|null)=),
	   *             function(*=))} resolver
	   * @return {!Thenable<T>}
	   * @template T
	   */
	  promise(resolver) {}

	  /**
	   * Schedules a `setTimeout` call.
	   *
	   * @param {number} ms The timeout delay, in milliseconds.
	   * @param {string=} opt_description A description to accompany the timeout.
	   * @return {!Thenable<void>} A promise that will be resolved when the timeout
	   *     fires.
	   */
	  timeout(ms, opt_description) {}

	  /**
	   * Schedules a task to wait for a condition to hold.
	   *
	   * If the condition is defined as a function, it may return any value. Promies
	   * will be resolved before testing if the condition holds (resolution time
	   * counts towards the timeout). Once resolved, values are always evaluated as
	   * booleans.
	   *
	   * If the condition function throws, or returns a rejected promise, the
	   * wait task will fail.
	   *
	   * If the condition is defined as a promise, the scheduler will wait for it to
	   * settle. If the timeout expires before the promise settles, the promise
	   * returned by this function will be rejected.
	   *
	   * If this function is invoked with `timeout === 0`, or the timeout is
	   * omitted, this scheduler will wait indefinitely for the condition to be
	   * satisfied.
	   *
	   * @param {(!IThenable<T>|function())} condition The condition to poll,
	   *     or a promise to wait on.
	   * @param {number=} opt_timeout How long to wait, in milliseconds, for the
	   *     condition to hold before timing out. If omitted, the flow will wait
	   *     indefinitely.
	   * @param {string=} opt_message An optional error message to include if the
	   *     wait times out; defaults to the empty string.
	   * @return {!Thenable<T>} A promise that will be fulfilled
	   *     when the condition has been satisified. The promise shall be rejected
	   *     if the wait times out waiting for the condition.
	   * @throws {TypeError} If condition is not a function or promise or if timeout
	   *     is not a number >= 0.
	   * @template T
	   */
	  wait(condition, opt_timeout, opt_message) {}
	}


	let USE_PROMISE_MANAGER;
	function usePromiseManager() {
	  if (typeof USE_PROMISE_MANAGER !== 'undefined') {
	    return !!USE_PROMISE_MANAGER;
	  }
	  return process.env['SELENIUM_PROMISE_MANAGER'] === undefined
	      || !/^0|false$/i.test(process.env['SELENIUM_PROMISE_MANAGER']);
	}


	/**
	 * @param {function(
	 *             function((T|IThenable<T>|Thenable|null)=),
	 *             function(*=))} resolver
	 * @return {!Thenable<T>}
	 * @template T
	 */
	function createPromise(resolver) {
	  let ctor = usePromiseManager() ? ManagedPromise : NativePromise;
	  return new ctor(resolver);
	}


	/**
	 * @param {!Scheduler} scheduler The scheduler to use.
	 * @param {(!IThenable<T>|function())} condition The condition to poll,
	 *     or a promise to wait on.
	 * @param {number=} opt_timeout How long to wait, in milliseconds, for the
	 *     condition to hold before timing out. If omitted, the flow will wait
	 *     indefinitely.
	 * @param {string=} opt_message An optional error message to include if the
	 *     wait times out; defaults to the empty string.
	 * @return {!Thenable<T>} A promise that will be fulfilled
	 *     when the condition has been satisified. The promise shall be rejected
	 *     if the wait times out waiting for the condition.
	 * @throws {TypeError} If condition is not a function or promise or if timeout
	 *     is not a number >= 0.
	 * @template T
	 */
	function scheduleWait(scheduler, condition, opt_timeout, opt_message) {
	  let timeout = opt_timeout || 0;
	  if (typeof timeout !== 'number' || timeout < 0) {
	    throw TypeError('timeout must be a number >= 0: ' + timeout);
	  }

	  if (isPromise(condition)) {
	    return scheduler.execute(function() {
	      if (!timeout) {
	        return condition;
	      }
	      return scheduler.promise(function(fulfill, reject) {
	        let start = Date.now();
	        let timer = setTimeout(function() {
	          timer = null;
	          reject(
	              new error.TimeoutError(
	                  (opt_message ? opt_message + '\n' : '')
	                      + 'Timed out waiting for promise to resolve after '
	                      + (Date.now() - start) + 'ms'));
	        }, timeout);

	        /** @type {Thenable} */(condition).then(
	          function(value) {
	            timer && clearTimeout(timer);
	            fulfill(value);
	          },
	          function(error) {
	            timer && clearTimeout(timer);
	            reject(error);
	          });
	      });
	    }, opt_message || '<anonymous wait: promise resolution>');
	  }

	  if (typeof condition !== 'function') {
	    throw TypeError('Invalid condition; must be a function or promise: ' +
	        typeof condition);
	  }

	  if (isGenerator(condition)) {
	    let original = condition;
	    condition = () => consume(original);
	  }

	  return scheduler.execute(function() {
	    var startTime = Date.now();
	    return scheduler.promise(function(fulfill, reject) {
	      pollCondition();

	      function pollCondition() {
	        var conditionFn = /** @type {function()} */(condition);
	        scheduler.execute(conditionFn).then(function(value) {
	          var elapsed = Date.now() - startTime;
	          if (!!value) {
	            fulfill(value);
	          } else if (timeout && elapsed >= timeout) {
	            reject(
	                new error.TimeoutError(
	                    (opt_message ? opt_message + '\n' : '')
	                        + `Wait timed out after ${elapsed}ms`));
	          } else {
	            // Do not use asyncRun here because we need a non-micro yield
	            // here so the UI thread is given a chance when running in a
	            // browser.
	            setTimeout(pollCondition, 0);
	          }
	        }, reject);
	      }
	    });
	  }, opt_message || '<anonymous wait>');
	}


	/**
	 * A scheduler that executes all tasks immediately, with no coordination. This
	 * class is an event emitter for API compatibility with the {@link ControlFlow},
	 * however, it emits no events.
	 *
	 * @implements {Scheduler}
	 */
	class SimpleScheduler extends events.EventEmitter {
	  /** @override */
	  execute(fn) {
	    return this.promise((resolve, reject) => {
	      try {
	        if (isGenerator(fn)) {
	          consume(fn).then(resolve, reject);
	        } else {
	          resolve(fn.call(undefined));
	        }
	      } catch (ex) {
	        reject(ex);
	      }
	    });
	  }

	  /** @override */
	  promise(resolver) {
	    return new NativePromise(resolver);
	  }

	  /** @override */
	  timeout(ms) {
	    return this.promise(resolve => setTimeout(_ => resolve(), ms));
	  }

	  /** @override */
	  wait(condition, opt_timeout, opt_message) {
	    return scheduleWait(this, condition, opt_timeout, opt_message);
	  }
	}
	const SIMPLE_SCHEDULER = new SimpleScheduler;


	/**
	 * Handles the execution of scheduled tasks, each of which may be an
	 * asynchronous operation. The control flow will ensure tasks are executed in
	 * the ordered scheduled, starting each task only once those before it have
	 * completed.
	 *
	 * Each task scheduled within this flow may return a {@link ManagedPromise} to
	 * indicate it is an asynchronous operation. The ControlFlow will wait for such
	 * promises to be resolved before marking the task as completed.
	 *
	 * Tasks and each callback registered on a {@link ManagedPromise} will be run
	 * in their own ControlFlow frame.  Any tasks scheduled within a frame will take
	 * priority over previously scheduled tasks. Furthermore, if any of the tasks in
	 * the frame fail, the remainder of the tasks in that frame will be discarded
	 * and the failure will be propagated to the user through the callback/task's
	 * promised result.
	 *
	 * Each time a ControlFlow empties its task queue, it will fire an
	 * {@link ControlFlow.EventType.IDLE IDLE} event. Conversely,
	 * whenever the flow terminates due to an unhandled error, it will remove all
	 * remaining tasks in its queue and fire an
	 * {@link ControlFlow.EventType.UNCAUGHT_EXCEPTION UNCAUGHT_EXCEPTION} event.
	 * If there are no listeners registered with the flow, the error will be
	 * rethrown to the global error handler.
	 *
	 * Refer to the {@link ./promise} module documentation for a  detailed
	 * explanation of how the ControlFlow coordinates task execution.
	 *
	 * @implements {Scheduler}
	 * @final
	 */
	class ControlFlow extends events.EventEmitter {
	  constructor() {
	    if (!usePromiseManager()) {
	      throw TypeError(
	          'Cannot instantiate control flow when the promise manager has'
	              + ' been disabled');
	    }

	    super();

	    /** @private {boolean} */
	    this.propagateUnhandledRejections_ = true;

	    /** @private {TaskQueue} */
	    this.activeQueue_ = null;

	    /** @private {Set<TaskQueue>} */
	    this.taskQueues_ = null;

	    /**
	     * Micro task that controls shutting down the control flow. Upon shut down,
	     * the flow will emit an
	     * {@link ControlFlow.EventType.IDLE} event. Idle events
	     * always follow a brief timeout in order to catch latent errors from the
	     * last completed task. If this task had a callback registered, but no
	     * errback, and the task fails, the unhandled failure would not be reported
	     * by the promise system until the next turn of the event loop:
	     *
	     *   // Schedule 1 task that fails.
	     *   var result = promise.controlFlow().schedule('example',
	     *       function() { return promise.rejected('failed'); });
	     *   // Set a callback on the result. This delays reporting the unhandled
	     *   // failure for 1 turn of the event loop.
	     *   result.then(function() {});
	     *
	     * @private {MicroTask}
	     */
	    this.shutdownTask_ = null;

	    /**
	     * ID for a long running interval used to keep a Node.js process running
	     * while a control flow's event loop is still working. This is a cheap hack
	     * required since JS events are only scheduled to run when there is
	     * _actually_ something to run. When a control flow is waiting on a task,
	     * there will be nothing in the JS event loop and the process would
	     * terminate without this.
	     * @private
	     */
	    this.hold_ = null;
	  }

	  /**
	   * Returns a string representation of this control flow, which is its current
	   * {@linkplain #getSchedule() schedule}, sans task stack traces.
	   * @return {string} The string representation of this contorl flow.
	   * @override
	   */
	  toString() {
	    return this.getSchedule();
	  }

	  /**
	   * Sets whether any unhandled rejections should propagate up through the
	   * control flow stack and cause rejections within parent tasks. If error
	   * propagation is disabled, tasks will not be aborted when an unhandled
	   * promise rejection is detected, but the rejection _will_ trigger an
	   * {@link ControlFlow.EventType.UNCAUGHT_EXCEPTION}
	   * event.
	   *
	   * The default behavior is to propagate all unhandled rejections. _The use
	   * of this option is highly discouraged._
	   *
	   * @param {boolean} propagate whether to propagate errors.
	   */
	  setPropagateUnhandledRejections(propagate) {
	    this.propagateUnhandledRejections_ = propagate;
	  }

	  /**
	   * @return {boolean} Whether this flow is currently idle.
	   */
	  isIdle() {
	    return !this.shutdownTask_ && (!this.taskQueues_ || !this.taskQueues_.size);
	  }

	  /**
	   * Resets this instance, clearing its queue and removing all event listeners.
	   */
	  reset() {
	    this.cancelQueues_(new FlowResetError);
	    this.emit(ControlFlow.EventType.RESET);
	    this.removeAllListeners();
	    this.cancelShutdown_();
	  }

	  /**
	   * Generates an annotated string describing the internal state of this control
	   * flow, including the currently executing as well as pending tasks. If
	   * {@code opt_includeStackTraces === true}, the string will include the
	   * stack trace from when each task was scheduled.
	   * @param {string=} opt_includeStackTraces Whether to include the stack traces
	   *     from when each task was scheduled. Defaults to false.
	   * @return {string} String representation of this flow's internal state.
	   */
	  getSchedule(opt_includeStackTraces) {
	    var ret = 'ControlFlow::' + getUid(this);
	    var activeQueue = this.activeQueue_;
	    if (!this.taskQueues_ || !this.taskQueues_.size) {
	      return ret;
	    }
	    var childIndent = '| ';
	    for (var q of this.taskQueues_) {
	      ret += '\n' + printQ(q, childIndent);
	    }
	    return ret;

	    function printQ(q, indent) {
	      var ret = q.toString();
	      if (q === activeQueue) {
	        ret = '(active) ' + ret;
	      }
	      var prefix = indent + childIndent;
	      if (q.pending_) {
	        if (q.pending_.q.state_ !== TaskQueueState.FINISHED) {
	          ret += '\n' + prefix + '(pending) ' + q.pending_.task;
	          ret += '\n' + printQ(q.pending_.q, prefix + childIndent);
	        } else {
	          ret += '\n' + prefix + '(blocked) ' + q.pending_.task;
	        }
	      }
	      if (q.interrupts_) {
	        q.interrupts_.forEach((task) => {
	          ret += '\n' + prefix + task;
	        });
	      }
	      if (q.tasks_) {
	        q.tasks_.forEach((task) => ret += printTask(task, '\n' + prefix));
	      }
	      return indent + ret;
	    }

	    function printTask(task, prefix) {
	      var ret = prefix + task;
	      if (opt_includeStackTraces && task.promise.stack_) {
	        ret += prefix + childIndent
	            + (task.promise.stack_.stack || task.promise.stack_)
	                  .replace(/\n/g, prefix);
	      }
	      return ret;
	    }
	  }

	  /**
	   * Returns the currently actively task queue for this flow. If there is no
	   * active queue, one will be created.
	   * @return {!TaskQueue} the currently active task queue for this flow.
	   * @private
	   */
	  getActiveQueue_() {
	    if (this.activeQueue_) {
	      return this.activeQueue_;
	    }

	    this.activeQueue_ = new TaskQueue(this);
	    if (!this.taskQueues_) {
	      this.taskQueues_ = new Set();
	    }
	    this.taskQueues_.add(this.activeQueue_);
	    this.activeQueue_
	        .once('end', this.onQueueEnd_, this)
	        .once('error', this.onQueueError_, this);

	    asyncRun(() => this.activeQueue_ = null);
	    this.activeQueue_.start();
	    return this.activeQueue_;
	  }

	  /** @override */
	  execute(fn, opt_description) {
	    if (isGenerator(fn)) {
	      let original = fn;
	      fn = () => consume(original);
	    }

	    if (!this.hold_) {
	      var holdIntervalMs = 2147483647;  // 2^31-1; max timer length for Node.js
	      this.hold_ = setInterval(function() {}, holdIntervalMs);
	    }

	    var task = new Task(
	        this, fn, opt_description || '<anonymous>',
	        {name: 'Task', top: ControlFlow.prototype.execute});

	    var q = this.getActiveQueue_();
	    q.enqueue(task);
	    this.emit(ControlFlow.EventType.SCHEDULE_TASK, task.description);
	    return task.promise;
	  }

	  /** @override */
	  promise(resolver) {
	    return new ManagedPromise(resolver, this);
	  }

	  /** @override */
	  timeout(ms, opt_description) {
	    return this.execute(() => {
	      return this.promise(resolve => setTimeout(() => resolve(), ms));
	    }, opt_description);
	  }

	  /** @override */
	  wait(condition, opt_timeout, opt_message) {
	    return scheduleWait(this, condition, opt_timeout, opt_message);
	  }

	  /**
	   * Executes a function in the next available turn of the JavaScript event
	   * loop. This ensures the function runs with its own task queue and any
	   * scheduled tasks will run in "parallel" to those scheduled in the current
	   * function.
	   *
	   *     flow.execute(() => console.log('a'));
	   *     flow.execute(() => console.log('b'));
	   *     flow.execute(() => console.log('c'));
	   *     flow.async(() => {
	   *        flow.execute(() => console.log('d'));
	   *        flow.execute(() => console.log('e'));
	   *     });
	   *     flow.async(() => {
	   *        flow.execute(() => console.log('f'));
	   *        flow.execute(() => console.log('g'));
	   *     });
	   *     flow.once('idle', () => console.log('fin'));
	   *     // a
	   *     // d
	   *     // f
	   *     // b
	   *     // e
	   *     // g
	   *     // c
	   *     // fin
	   *
	   * If the function itself throws, the error will be treated the same as an
	   * unhandled rejection within the control flow.
	   *
	   * __NOTE__: This function is considered _unstable_.
	   *
	   * @param {!Function} fn The function to execute.
	   * @param {Object=} opt_self The object in whose context to run the function.
	   * @param {...*} var_args Any arguments to pass to the function.
	   */
	  async(fn, opt_self, var_args) {
	    asyncRun(() => {
	      // Clear any lingering queues, forces getActiveQueue_ to create a new one.
	      this.activeQueue_ = null;
	      var q = this.getActiveQueue_();
	      try {
	        q.execute_(fn.bind(opt_self, var_args));
	      } catch (ex) {
	        var cancellationError = CancellationError.wrap(ex,
	            'Function passed to ControlFlow.async() threw');
	        cancellationError.silent_ = true;
	        q.abort_(cancellationError);
	      } finally {
	        this.activeQueue_ = null;
	      }
	    });
	  }

	  /**
	   * Event handler for when a task queue is exhausted. This starts the shutdown
	   * sequence for this instance if there are no remaining task queues: after
	   * one turn of the event loop, this object will emit the
	   * {@link ControlFlow.EventType.IDLE IDLE} event to signal
	   * listeners that it has completed. During this wait, if another task is
	   * scheduled, the shutdown will be aborted.
	   *
	   * @param {!TaskQueue} q the completed task queue.
	   * @private
	   */
	  onQueueEnd_(q) {
	    if (!this.taskQueues_) {
	      return;
	    }
	    this.taskQueues_.delete(q);

	    vlog(1, () => q + ' has finished');
	    vlog(1, () => this.taskQueues_.size + ' queues remain\n' + this, this);

	    if (!this.taskQueues_.size) {
	      if (this.shutdownTask_) {
	        throw Error('Already have a shutdown task??');
	      }
	      vlog(1, () => 'Scheduling shutdown\n' + this);
	      this.shutdownTask_ = new MicroTask(() => this.shutdown_());
	    }
	  }

	  /**
	   * Event handler for when a task queue terminates with an error. This triggers
	   * the cancellation of all other task queues and a
	   * {@link ControlFlow.EventType.UNCAUGHT_EXCEPTION} event.
	   * If there are no error event listeners registered with this instance, the
	   * error will be rethrown to the global error handler.
	   *
	   * @param {*} error the error that caused the task queue to terminate.
	   * @param {!TaskQueue} q the task queue.
	   * @private
	   */
	  onQueueError_(error, q) {
	    if (this.taskQueues_) {
	      this.taskQueues_.delete(q);
	    }
	    this.cancelQueues_(CancellationError.wrap(
	        error, 'There was an uncaught error in the control flow'));
	    this.cancelShutdown_();
	    this.cancelHold_();

	    setTimeout(() => {
	      let listeners = this.listeners(ControlFlow.EventType.UNCAUGHT_EXCEPTION);
	      if (!listeners.size) {
	        throw error;
	      } else {
	        this.reportUncaughtException_(error);
	      }
	    }, 0);
	  }

	  /**
	   * Cancels all remaining task queues.
	   * @param {!CancellationError} reason The cancellation reason.
	   * @private
	   */
	  cancelQueues_(reason) {
	    reason.silent_ = true;
	    if (this.taskQueues_) {
	      for (var q of this.taskQueues_) {
	        q.removeAllListeners();
	        q.abort_(reason);
	      }
	      this.taskQueues_.clear();
	      this.taskQueues_ = null;
	    }
	  }

	  /**
	   * Reports an uncaught exception using a
	   * {@link ControlFlow.EventType.UNCAUGHT_EXCEPTION} event.
	   *
	   * @param {*} e the error to report.
	   * @private
	   */
	  reportUncaughtException_(e) {
	    this.emit(ControlFlow.EventType.UNCAUGHT_EXCEPTION, e);
	  }

	  /** @private */
	  cancelHold_() {
	    if (this.hold_) {
	      clearInterval(this.hold_);
	      this.hold_ = null;
	    }
	  }

	  /** @private */
	  shutdown_() {
	    vlog(1, () => 'Going idle: ' + this);
	    this.cancelHold_();
	    this.shutdownTask_ = null;
	    this.emit(ControlFlow.EventType.IDLE);
	  }

	  /**
	   * Cancels the shutdown sequence if it is currently scheduled.
	   * @private
	   */
	  cancelShutdown_() {
	    if (this.shutdownTask_) {
	      this.shutdownTask_.cancel();
	      this.shutdownTask_ = null;
	    }
	  }
	}


	/**
	 * Events that may be emitted by an {@link ControlFlow}.
	 * @enum {string}
	 */
	ControlFlow.EventType = {

	  /** Emitted when all tasks have been successfully executed. */
	  IDLE: 'idle',

	  /** Emitted when a ControlFlow has been reset. */
	  RESET: 'reset',

	  /** Emitted whenever a new task has been scheduled. */
	  SCHEDULE_TASK: 'scheduleTask',

	  /**
	   * Emitted whenever a control flow aborts due to an unhandled promise
	   * rejection. This event will be emitted along with the offending rejection
	   * reason. Upon emitting this event, the control flow will empty its task
	   * queue and revert to its initial state.
	   */
	  UNCAUGHT_EXCEPTION: 'uncaughtException'
	};


	/**
	 * Wraps a function to execute as a cancellable micro task.
	 * @final
	 */
	class MicroTask {
	  /**
	   * @param {function()} fn The function to run as a micro task.
	   */
	  constructor(fn) {
	    /** @private {boolean} */
	    this.cancelled_ = false;
	    asyncRun(() => {
	      if (!this.cancelled_) {
	        fn();
	      }
	    });
	  }

	  /**
	   * Runs the given function after a micro-task yield.
	   * @param {function()} fn The function to run.
	   */
	  static run(fn) {
	    NativePromise.resolve().then(function() {
	      try {
	        fn();
	      } catch (ignored) {
	        // Do nothing.
	      }
	    });
	  }

	  /**
	   * Cancels the execution of this task. Note: this will not prevent the task
	   * timer from firing, just the invocation of the wrapped function.
	   */
	  cancel() {
	    this.cancelled_ = true;
	  }
	}


	/**
	 * A task to be executed by a {@link ControlFlow}.
	 *
	 * @template T
	 * @final
	 */
	class Task extends Deferred {
	  /**
	   * @param {!ControlFlow} flow The flow this instances belongs
	   *     to.
	   * @param {function(): (T|!ManagedPromise<T>)} fn The function to
	   *     call when the task executes. If it returns a
	   *     {@link ManagedPromise}, the flow will wait for it to be
	   *     resolved before starting the next task.
	   * @param {string} description A description of the task for debugging.
	   * @param {{name: string, top: !Function}=} opt_stackOptions Options to use
	   *     when capturing the stacktrace for when this task was created.
	   */
	  constructor(flow, fn, description, opt_stackOptions) {
	    super(flow);
	    getUid(this);

	    /** @type {function(): (T|!ManagedPromise<T>)} */
	    this.execute = fn;

	    /** @type {string} */
	    this.description = description;

	    /** @type {TaskQueue} */
	    this.queue = null;

	    /**
	     * Whether this task is considered block. A blocked task may be registered
	     * in a task queue, but will be dropped if it is still blocked when it
	     * reaches the front of the queue. A dropped task may always be rescheduled.
	     *
	     * Blocked tasks are used when a callback is attached to an unsettled
	     * promise to reserve a spot in line (in a manner of speaking). If the
	     * promise is not settled before the callback reaches the front of the
	     * of the queue, it will be dropped. Once the promise is settled, the
	     * dropped task will be rescheduled as an interrupt on the currently task
	     * queue.
	     *
	     * @type {boolean}
	     */
	    this.blocked = false;

	    if (opt_stackOptions) {
	      this.promise.stack_ = captureStackTrace(
	          opt_stackOptions.name, this.description, opt_stackOptions.top);
	    }
	  }

	  /** @override */
	  toString() {
	    return 'Task::' + getUid(this) + '<' + this.description + '>';
	  }
	}


	/** @enum {string} */
	const TaskQueueState = {
	  NEW: 'new',
	  STARTED: 'started',
	  FINISHED: 'finished'
	};


	/**
	 * @final
	 */
	class TaskQueue extends events.EventEmitter {
	  /** @param {!ControlFlow} flow . */
	  constructor(flow) {
	    super();

	    /** @private {string} */
	    this.name_ = 'TaskQueue::' + getUid(this);

	    /** @private {!ControlFlow} */
	    this.flow_ = flow;

	    /** @private {!Array<!Task>} */
	    this.tasks_ = [];

	    /** @private {Array<!Task>} */
	    this.interrupts_ = null;

	    /** @private {({task: !Task, q: !TaskQueue}|null)} */
	    this.pending_ = null;

	    /** @private {TaskQueue} */
	    this.subQ_ = null;

	    /** @private {TaskQueueState} */
	    this.state_ = TaskQueueState.NEW;

	    /** @private {!Set<!ManagedPromise>} */
	    this.unhandledRejections_ = new Set();
	  }

	  /** @override */
	  toString() {
	    return 'TaskQueue::' + getUid(this);
	  }

	  /**
	   * @param {!ManagedPromise} promise .
	   */
	  addUnhandledRejection(promise) {
	    // TODO: node 4.0.0+
	    vlog(2, () => this + ' registering unhandled rejection: ' + promise, this);
	    this.unhandledRejections_.add(promise);
	  }

	  /**
	   * @param {!ManagedPromise} promise .
	   */
	  clearUnhandledRejection(promise) {
	    var deleted = this.unhandledRejections_.delete(promise);
	    if (deleted) {
	      // TODO: node 4.0.0+
	      vlog(2, () => this + ' clearing unhandled rejection: ' + promise, this);
	    }
	  }

	  /**
	   * Enqueues a new task for execution.
	   * @param {!Task} task The task to enqueue.
	   * @throws {Error} If this instance has already started execution.
	   */
	  enqueue(task) {
	    if (this.state_ !== TaskQueueState.NEW) {
	      throw Error('TaskQueue has started: ' + this);
	    }

	    if (task.queue) {
	      throw Error('Task is already scheduled in another queue');
	    }

	    this.tasks_.push(task);
	    task.queue = this;
	    ON_CANCEL_HANDLER.set(
	        task.promise,
	        (e) => this.onTaskCancelled_(task, e));

	    vlog(1, () => this + '.enqueue(' + task + ')', this);
	    vlog(2, () => this.flow_.toString(), this);
	  }

	  /**
	   * Schedules the callbacks registered on the given promise in this queue.
	   *
	   * @param {!ManagedPromise} promise the promise whose callbacks should be
	   *     registered as interrupts in this task queue.
	   * @throws {Error} if this queue has already finished.
	   */
	  scheduleCallbacks(promise) {
	    if (this.state_ === TaskQueueState.FINISHED) {
	      throw new Error('cannot interrupt a finished q(' + this + ')');
	    }

	    if (this.pending_ && this.pending_.task.promise === promise) {
	      this.pending_.task.promise.queue_ = null;
	      this.pending_ = null;
	      asyncRun(() => this.executeNext_());
	    }

	    if (!promise.callbacks_) {
	      return;
	    }
	    promise.callbacks_.forEach(function(cb) {
	      cb.blocked = false;
	      if (cb.queue) {
	        return;
	      }

	      ON_CANCEL_HANDLER.set(
	          cb.promise,
	          (e) => this.onTaskCancelled_(cb, e));

	      if (cb.queue === this && this.tasks_.indexOf(cb) !== -1) {
	        return;
	      }

	      if (cb.queue) {
	        cb.queue.dropTask_(cb);
	      }

	      cb.queue = this;
	      if (!this.interrupts_) {
	        this.interrupts_ = [];
	      }
	      this.interrupts_.push(cb);
	    }, this);
	    promise.callbacks_ = null;
	    vlog(2, () => this + ' interrupted\n' + this.flow_, this);
	  }

	  /**
	   * Starts executing tasks in this queue. Once called, no further tasks may
	   * be {@linkplain #enqueue() enqueued} with this instance.
	   *
	   * @throws {Error} if this queue has already been started.
	   */
	  start() {
	    if (this.state_ !== TaskQueueState.NEW) {
	      throw new Error('TaskQueue has already started');
	    }
	    // Always asynchronously execute next, even if there doesn't look like
	    // there is anything in the queue. This will catch pending unhandled
	    // rejections that were registered before start was called.
	    asyncRun(() => this.executeNext_());
	  }

	  /**
	   * Aborts this task queue. If there are any scheduled tasks, they are silently
	   * cancelled and discarded (their callbacks will never fire). If this queue
	   * has a _pending_ task, the abortion error is used to cancel that task.
	   * Otherwise, this queue will emit an error event.
	   *
	   * @param {*} error The abortion reason.
	   * @private
	   */
	  abort_(error) {
	    var cancellation;

	    if (error instanceof FlowResetError) {
	      cancellation = error;
	    } else {
	      cancellation = new DiscardedTaskError(error);
	    }

	    if (this.interrupts_ && this.interrupts_.length) {
	      this.interrupts_.forEach((t) => t.reject(cancellation));
	      this.interrupts_ = [];
	    }

	    if (this.tasks_ && this.tasks_.length) {
	      this.tasks_.forEach((t) => t.reject(cancellation));
	      this.tasks_ = [];
	    }

	    // Now that all of the remaining tasks have been silently cancelled (e.g. no
	    // exisitng callbacks on those tasks will fire), clear the silence bit on
	    // the cancellation error. This ensures additional callbacks registered in
	    // the future will actually execute.
	    cancellation.silent_ = false;

	    if (this.pending_) {
	      vlog(2, () => this + '.abort(); cancelling pending task', this);
	      this.pending_.task.promise.cancel(
	          /** @type {!CancellationError} */(error));

	    } else {
	      vlog(2, () => this + '.abort(); emitting error event', this);
	      this.emit('error', error, this);
	    }
	  }

	  /** @private */
	  executeNext_() {
	    if (this.state_ === TaskQueueState.FINISHED) {
	      return;
	    }
	    this.state_ = TaskQueueState.STARTED;

	    if (this.pending_ !== null || this.processUnhandledRejections_()) {
	      return;
	    }

	    var task;
	    do {
	      task = this.getNextTask_();
	    } while (task && !isPending(task.promise));

	    if (!task) {
	      this.state_ = TaskQueueState.FINISHED;
	      this.tasks_ = [];
	      this.interrupts_ = null;
	      vlog(2, () => this + '.emit(end)', this);
	      this.emit('end', this);
	      return;
	    }

	    let result = undefined;
	    this.subQ_ = new TaskQueue(this.flow_);

	    this.subQ_.once('end', () => {  // On task completion.
	      this.subQ_ = null;
	      this.pending_ && this.pending_.task.fulfill(result);
	    });

	    this.subQ_.once('error', e => {  // On task failure.
	      this.subQ_ = null;
	      if (Thenable.isImplementation(result)) {
	        result.cancel(CancellationError.wrap(e));
	      }
	      this.pending_ && this.pending_.task.reject(e);
	    });
	    vlog(2, () => `${this} created ${this.subQ_} for ${task}`);

	    try {
	      this.pending_ = {task: task, q: this.subQ_};
	      task.promise.queue_ = this;
	      result = this.subQ_.execute_(task.execute);
	      this.subQ_.start();
	    } catch (ex) {
	      this.subQ_.abort_(ex);
	    }
	  }

	  /**
	   * @param {!Function} fn .
	   * @return {T} .
	   * @template T
	   * @private
	   */
	  execute_(fn) {
	    try {
	      activeFlows.push(this.flow_);
	      this.flow_.activeQueue_ = this;
	      return fn();
	    } finally {
	      this.flow_.activeQueue_ = null;
	      activeFlows.pop();
	    }
	  }

	  /**
	   * Process any unhandled rejections registered with this task queue. If there
	   * is a rejection, this queue will be aborted with the rejection error. If
	   * there are multiple rejections registered, this queue will be aborted with
	   * a {@link MultipleUnhandledRejectionError}.
	   * @return {boolean} whether there was an unhandled rejection.
	   * @private
	   */
	  processUnhandledRejections_() {
	    if (!this.unhandledRejections_.size) {
	      return false;
	    }

	    var errors = new Set();
	    for (var rejection of this.unhandledRejections_) {
	      errors.add(rejection.value_);
	    }
	    this.unhandledRejections_.clear();

	    var errorToReport = errors.size === 1
	        ? errors.values().next().value
	        : new MultipleUnhandledRejectionError(errors);

	    vlog(1, () => this + ' aborting due to unhandled rejections', this);
	    if (this.flow_.propagateUnhandledRejections_) {
	      this.abort_(errorToReport);
	      return true;
	    } else {
	      vlog(1, 'error propagation disabled; reporting to control flow');
	      this.flow_.reportUncaughtException_(errorToReport);
	      return false;
	    }
	  }

	  /**
	   * @param {!Task} task The task to drop.
	   * @private
	   */
	  dropTask_(task) {
	    var index;
	    if (this.interrupts_) {
	      index = this.interrupts_.indexOf(task);
	      if (index != -1) {
	        task.queue = null;
	        this.interrupts_.splice(index, 1);
	        return;
	      }
	    }

	    index = this.tasks_.indexOf(task);
	    if (index != -1) {
	      task.queue = null;
	      this.tasks_.splice(index, 1);
	    }
	  }

	  /**
	   * @param {!Task} task The task that was cancelled.
	   * @param {!CancellationError} reason The cancellation reason.
	   * @private
	   */
	  onTaskCancelled_(task, reason) {
	    if (this.pending_ && this.pending_.task === task) {
	      this.pending_.q.abort_(reason);
	    } else {
	      this.dropTask_(task);
	    }
	  }

	  /**
	   * @return {(Task|undefined)} the next task scheduled within this queue,
	   *     if any.
	   * @private
	   */
	  getNextTask_() {
	    var task = undefined;
	    while (true) {
	      if (this.interrupts_) {
	        task = this.interrupts_.shift();
	      }
	      if (!task && this.tasks_) {
	        task = this.tasks_.shift();
	      }
	      if (task && task.blocked) {
	        vlog(2, () => this + ' skipping blocked task ' + task, this);
	        task.queue = null;
	        task = null;
	        // TODO: recurse when tail-call optimization is available in node.
	      } else {
	        break;
	      }
	    }
	    return task;
	  }
	};



	/**
	 * The default flow to use if no others are active.
	 * @type {ControlFlow}
	 */
	var defaultFlow;


	/**
	 * A stack of active control flows, with the top of the stack used to schedule
	 * commands. When there are multiple flows on the stack, the flow at index N
	 * represents a callback triggered within a task owned by the flow at index
	 * N-1.
	 * @type {!Array<!ControlFlow>}
	 */
	var activeFlows = [];


	/**
	 * Changes the default flow to use when no others are active.
	 * @param {!ControlFlow} flow The new default flow.
	 * @throws {Error} If the default flow is not currently active.
	 */
	function setDefaultFlow(flow) {
	  if (!usePromiseManager()) {
	    throw Error(
	        'You  may not change set the control flow when the promise'
	            +' manager is disabled');
	  }
	  if (activeFlows.length) {
	    throw Error('You may only change the default flow while it is active');
	  }
	  defaultFlow = flow;
	}


	/**
	 * @return {!ControlFlow} The currently active control flow.
	 * @suppress {checkTypes}
	 */
	function controlFlow() {
	  if (!usePromiseManager()) {
	    return SIMPLE_SCHEDULER;
	  }

	  if (activeFlows.length) {
	    return activeFlows[activeFlows.length - 1];
	  }

	  if (!defaultFlow) {
	    defaultFlow = new ControlFlow;
	  }
	  return defaultFlow;
	}


	/**
	 * Creates a new control flow. The provided callback will be invoked as the
	 * first task within the new flow, with the flow as its sole argument. Returns
	 * a promise that resolves to the callback result.
	 * @param {function(!ControlFlow)} callback The entry point
	 *     to the newly created flow.
	 * @return {!Thenable} A promise that resolves to the callback result.
	 */
	function createFlow(callback) {
	  var flow = new ControlFlow;
	  return flow.execute(function() {
	    return callback(flow);
	  });
	}


	/**
	 * Tests is a function is a generator.
	 * @param {!Function} fn The function to test.
	 * @return {boolean} Whether the function is a generator.
	 */
	function isGenerator(fn) {
	  return fn.constructor.name === 'GeneratorFunction';
	}


	/**
	 * Consumes a {@code GeneratorFunction}. Each time the generator yields a
	 * promise, this function will wait for it to be fulfilled before feeding the
	 * fulfilled value back into {@code next}. Likewise, if a yielded promise is
	 * rejected, the rejection error will be passed to {@code throw}.
	 *
	 * __Example 1:__ the Fibonacci Sequence.
	 *
	 *     promise.consume(function* fibonacci() {
	 *       var n1 = 1, n2 = 1;
	 *       for (var i = 0; i < 4; ++i) {
	 *         var tmp = yield n1 + n2;
	 *         n1 = n2;
	 *         n2 = tmp;
	 *       }
	 *       return n1 + n2;
	 *     }).then(function(result) {
	 *       console.log(result);  // 13
	 *     });
	 *
	 * __Example 2:__ a generator that throws.
	 *
	 *     promise.consume(function* () {
	 *       yield promise.delayed(250).then(function() {
	 *         throw Error('boom');
	 *       });
	 *     }).catch(function(e) {
	 *       console.log(e.toString());  // Error: boom
	 *     });
	 *
	 * @param {!Function} generatorFn The generator function to execute.
	 * @param {Object=} opt_self The object to use as "this" when invoking the
	 *     initial generator.
	 * @param {...*} var_args Any arguments to pass to the initial generator.
	 * @return {!Thenable<?>} A promise that will resolve to the
	 *     generator's final result.
	 * @throws {TypeError} If the given function is not a generator.
	 */
	function consume(generatorFn, opt_self, ...var_args) {
	  if (!isGenerator(generatorFn)) {
	    throw new TypeError('Input is not a GeneratorFunction: ' +
	        generatorFn.constructor.name);
	  }

	  let ret;
	  return ret = createPromise((resolve, reject) => {
	    let generator = generatorFn.apply(opt_self, var_args);
	    callNext();

	    /** @param {*=} opt_value . */
	    function callNext(opt_value) {
	      pump(generator.next, opt_value);
	    }

	    /** @param {*=} opt_error . */
	    function callThrow(opt_error) {
	      pump(generator.throw, opt_error);
	    }

	    function pump(fn, opt_arg) {
	      if (ret instanceof ManagedPromise && !isPending(ret)) {
	        return;  // Defererd was cancelled; silently abort.
	      }

	      try {
	        var result = fn.call(generator, opt_arg);
	      } catch (ex) {
	        reject(ex);
	        return;
	      }

	      if (result.done) {
	        resolve(result.value);
	        return;
	      }

	      asap(result.value, callNext, callThrow);
	    }
	  });
	}


	// PUBLIC API


	module.exports = {
	  CancellableThenable: CancellableThenable,
	  CancellationError: CancellationError,
	  ControlFlow: ControlFlow,
	  Deferred: Deferred,
	  MultipleUnhandledRejectionError: MultipleUnhandledRejectionError,
	  Thenable: Thenable,
	  Promise: ManagedPromise,
	  Scheduler: Scheduler,
	  all: all,
	  asap: asap,
	  captureStackTrace: captureStackTrace,
	  checkedNodeCall: checkedNodeCall,
	  consume: consume,
	  controlFlow: controlFlow,
	  createFlow: createFlow,
	  defer: defer,
	  delayed: delayed,
	  filter: filter,
	  finally: thenFinally,
	  fulfilled: fulfilled,
	  fullyResolved: fullyResolved,
	  isGenerator: isGenerator,
	  isPromise: isPromise,
	  map: map,
	  rejected: rejected,
	  setDefaultFlow: setDefaultFlow,
	  when: when,

	  /**
	   * Indicates whether the promise manager is currently enabled. When disabled,
	   * attempting to use the {@link ControlFlow} or {@link ManagedPromise Promise}
	   * classes will generate an error.
	   *
	   * The promise manager is currently enabled by default, but may be disabled
	   * by setting the environment variable `SELENIUM_PROMISE_MANAGER=0` or by
	   * setting this property to false. Setting this property will always take
	   * precedence ove the use of the environment variable.
	   *
	   * @return {boolean} Whether the promise manager is enabled.
	   * @see <https://github.com/SeleniumHQ/selenium/issues/2969>
	   */
	  get USE_PROMISE_MANAGER() { return usePromiseManager(); },
	  set USE_PROMISE_MANAGER(/** boolean */value) { USE_PROMISE_MANAGER = value; },

	  get LONG_STACK_TRACES() { return LONG_STACK_TRACES; },
	  set LONG_STACK_TRACES(v) { LONG_STACK_TRACES = v; },
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 67 */
/***/ function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * Describes an event listener registered on an {@linkplain EventEmitter}.
	 */
	class Listener {
	  /**
	   * @param {!Function} fn The acutal listener function.
	   * @param {(Object|undefined)} scope The object in whose scope to invoke the
	   *     listener.
	   * @param {boolean} oneshot Whether this listener should only be used once.
	   */
	  constructor(fn, scope, oneshot) {
	    this.fn = fn;
	    this.scope = scope;
	    this.oneshot = oneshot;
	  }
	}


	/** @type {!WeakMap<!EventEmitter, !Map<string, !Set<!Listener>>>} */
	const EVENTS = new WeakMap;


	/**
	 * Object that can emit events for others to listen for.
	 */
	class EventEmitter {
	  /**
	   * Fires an event and calls all listeners.
	   * @param {string} type The type of event to emit.
	   * @param {...*} var_args Any arguments to pass to each listener.
	   */
	  emit(type, var_args) {
	    let events = EVENTS.get(this);
	    if (!events) {
	      return;
	    }

	    let args = Array.prototype.slice.call(arguments, 1);

	    let listeners = events.get(type);
	    if (listeners) {
	      for (let listener of listeners) {
	        listener.fn.apply(listener.scope, args);
	        if (listener.oneshot) {
	          listeners.delete(listener);
	        }
	      }
	    }
	  }

	  /**
	   * Returns a mutable list of listeners for a specific type of event.
	   * @param {string} type The type of event to retrieve the listeners for.
	   * @return {!Set<!Listener>} The registered listeners for the given event
	   *     type.
	   */
	  listeners(type) {
	    let events = EVENTS.get(this);
	    if (!events) {
	      events = new Map;
	      EVENTS.set(this, events);
	    }

	    let listeners = events.get(type);
	    if (!listeners) {
	      listeners = new Set;
	      events.set(type, listeners);
	    }
	    return listeners;
	  }

	  /**
	   * Registers a listener.
	   * @param {string} type The type of event to listen for.
	   * @param {!Function} fn The function to invoke when the event is fired.
	   * @param {Object=} opt_self The object in whose scope to invoke the listener.
	   * @param {boolean=} opt_oneshot Whether the listener should b (e removed after
	   *    the first event is fired.
	   * @return {!EventEmitter} A self reference.
	   * @private
	   */
	  addListener_(type, fn, opt_self, opt_oneshot) {
	    let listeners = this.listeners(type);
	    for (let listener of listeners) {
	      if (listener.fn === fn) {
	        return this;
	      }
	    }
	    listeners.add(new Listener(fn, opt_self || undefined, !!opt_oneshot));
	    return this;
	  }

	  /**
	   * Registers a listener.
	   * @param {string} type The type of event to listen for.
	   * @param {!Function} fn The function to invoke when the event is fired.
	   * @param {Object=} opt_self The object in whose scope to invoke the listener.
	   * @return {!EventEmitter} A self reference.
	   */
	  addListener(type, fn, opt_self) {
	    return this.addListener_(type, fn, opt_self, false);
	  }

	  /**
	   * Registers a one-time listener which will be called only the first time an
	   * event is emitted, after which it will be removed.
	   * @param {string} type The type of event to listen for.
	   * @param {!Function} fn The function to invoke when the event is fired.
	   * @param {Object=} opt_self The object in whose scope to invoke the listener.
	   * @return {!EventEmitter} A self reference.
	   */
	  once(type, fn, opt_self) {
	    return this.addListener_(type, fn, opt_self, true);
	  }

	  /**
	   * An alias for {@link #addListener() addListener()}.
	   * @param {string} type The type of event to listen for.
	   * @param {!Function} fn The function to invoke when the event is fired.
	   * @param {Object=} opt_self The object in whose scope to invoke the listener.
	   * @return {!EventEmitter} A self reference.
	   */
	  on(type, fn, opt_self) {
	    return this.addListener(type, fn, opt_self);
	  }

	  /**
	   * Removes a previously registered event listener.
	   * @param {string} type The type of event to unregister.
	   * @param {!Function} listenerFn The handler function to remove.
	   * @return {!EventEmitter} A self reference.
	   */
	  removeListener(type, listenerFn) {
	    if (typeof type !== 'string' || typeof listenerFn !== 'function') {
	      throw TypeError('invalid args: expected (string, function), got ('
	          + (typeof type) + ', ' + (typeof listenerFn) + ')');
	    }

	    let events = EVENTS.get(this);
	    if (!events) {
	      return this;
	    }

	    let listeners = events.get(type);
	    if (!listeners) {
	      return this;
	    }

	    let match;
	    for (let listener of listeners) {
	      if (listener.fn === listenerFn) {
	        match = listener;
	        break;
	      }
	    }
	    if (match) {
	      listeners.delete(match);
	      if (!listeners.size) {
	        events.delete(type);
	      }
	    }
	    return this;
	  }

	  /**
	   * Removes all listeners for a specific type of event. If no event is
	   * specified, all listeners across all types will be removed.
	   * @param {string=} opt_type The type of event to remove listeners from.
	   * @return {!EventEmitter} A self reference.
	   */
	  removeAllListeners(opt_type) {
	    let events = EVENTS.get(this);
	    if (events) {
	      if (typeof opt_type === 'string') {
	        events.delete(opt_type);
	      } else {
	        EVENTS.delete(this);
	      }
	    }
	    return this;
	  }
	}


	// PUBLIC API


	module.exports = {
	  EventEmitter: EventEmitter,
	  Listener: Listener
	};


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	const {Capabilities} = __webpack_require__(69);


	/**
	 * Contains information about a single WebDriver session.
	 */
	class Session {

	  /**
	   * @param {string} id The session ID.
	   * @param {!(Object|Capabilities)} capabilities The session
	   *     capabilities.
	   */
	  constructor(id, capabilities) {
	    /** @private {string} */
	    this.id_ = id;

	    /** @private {!Capabilities} */
	    this.caps_ = capabilities instanceof Capabilities
	        ? /** @type {!Capabilities} */(capabilities)
	        : new Capabilities(capabilities);
	  }

	  /**
	   * @return {string} This session's ID.
	   */
	  getId() {
	    return this.id_;
	  }

	  /**
	   * @return {!Capabilities} This session's capabilities.
	   */
	  getCapabilities() {
	    return this.caps_;
	  }

	  /**
	   * Retrieves the value of a specific capability.
	   * @param {string} key The capability to retrieve.
	   * @return {*} The capability value.
	   */
	  getCapability(key) {
	    return this.caps_.get(key);
	  }

	  /**
	   * Returns the JSON representation of this object, which is just the string
	   * session ID.
	   * @return {string} The JSON representation of this Session.
	   */
	  toJSON() {
	    return this.getId();
	  }
	}


	// PUBLIC API


	module.exports = {Session: Session};


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * @fileoverview Defines types related to describing the capabilities of a
	 * WebDriver session.
	 */

	const Symbols = __webpack_require__(70);


	/**
	 * Recognized browser names.
	 * @enum {string}
	 */
	const Browser = {
	  ANDROID: 'android',
	  CHROME: 'chrome',
	  EDGE: 'MicrosoftEdge',
	  FIREFOX: 'firefox',
	  IE: 'internet explorer',
	  INTERNET_EXPLORER: 'internet explorer',
	  IPAD: 'iPad',
	  IPHONE: 'iPhone',
	  OPERA: 'opera',
	  PHANTOM_JS: 'phantomjs',
	  SAFARI: 'safari',
	  HTMLUNIT: 'htmlunit'
	};


	/**
	 * Common Capability keys.
	 * @enum {string}
	 */
	const Capability = {

	  /**
	   * Indicates whether a driver should accept all SSL certs by default. This
	   * capability only applies when requesting a new session. To query whether
	   * a driver can handle insecure SSL certs, see {@link #SECURE_SSL}.
	   */
	  ACCEPT_SSL_CERTS: 'acceptSslCerts',


	  /**
	   * The browser name. Common browser names are defined in the {@link Browser}
	   * enum.
	   */
	  BROWSER_NAME: 'browserName',

	  /**
	   * Defines how elements should be scrolled into the viewport for interaction.
	   * This capability will be set to zero (0) if elements are aligned with the
	   * top of the viewport, or one (1) if aligned with the bottom. The default
	   * behavior is to align with the top of the viewport.
	   */
	  ELEMENT_SCROLL_BEHAVIOR: 'elementScrollBehavior',

	  /**
	   * Whether the driver is capable of handling modal alerts (e.g. alert,
	   * confirm, prompt). To define how a driver <i>should</i> handle alerts,
	   * use {@link #UNEXPECTED_ALERT_BEHAVIOR}.
	   */
	  HANDLES_ALERTS: 'handlesAlerts',

	  /**
	   * Key for the logging driver logging preferences.
	   */
	  LOGGING_PREFS: 'loggingPrefs',

	  /**
	   * Whether this session generates native events when simulating user input.
	   */
	  NATIVE_EVENTS: 'nativeEvents',

	  /**
	   * Describes the platform the browser is running on. Will be one of
	   * ANDROID, IOS, LINUX, MAC, UNIX, or WINDOWS. When <i>requesting</i> a
	   * session, ANY may be used to indicate no platform preference (this is
	   * semantically equivalent to omitting the platform capability).
	   */
	  PLATFORM: 'platform',

	  /**
	   * Describes the proxy configuration to use for a new WebDriver session.
	   */
	  PROXY: 'proxy',

	  /** Whether the driver supports changing the brower's orientation. */
	  ROTATABLE: 'rotatable',

	  /**
	   * Whether a driver is only capable of handling secure SSL certs. To request
	   * that a driver accept insecure SSL certs by default, use
	   * {@link #ACCEPT_SSL_CERTS}.
	   */
	  SECURE_SSL: 'secureSsl',

	  /** Whether the driver supports manipulating the app cache. */
	  SUPPORTS_APPLICATION_CACHE: 'applicationCacheEnabled',

	  /** Whether the driver supports locating elements with CSS selectors. */
	  SUPPORTS_CSS_SELECTORS: 'cssSelectorsEnabled',

	  /** Whether the browser supports JavaScript. */
	  SUPPORTS_JAVASCRIPT: 'javascriptEnabled',

	  /** Whether the driver supports controlling the browser's location info. */
	  SUPPORTS_LOCATION_CONTEXT: 'locationContextEnabled',

	  /** Whether the driver supports taking screenshots. */
	  TAKES_SCREENSHOT: 'takesScreenshot',

	  /**
	   * Defines how the driver should handle unexpected alerts. The value should
	   * be one of "accept", "dismiss", or "ignore.
	   */
	  UNEXPECTED_ALERT_BEHAVIOR: 'unexpectedAlertBehavior',

	  /** Defines the browser version. */
	  VERSION: 'version'
	};


	/**
	 * Describes how a proxy should be configured for a WebDriver session.
	 * @record
	 */
	function ProxyConfig() {}

	/**
	 * The proxy type. Must be one of {"manual", "pac", "system"}.
	 * @type {string}
	 */
	ProxyConfig.prototype.proxyType;

	/**
	 * URL for the PAC file to use. Only used if {@link #proxyType} is "pac".
	 * @type {(string|undefined)}
	 */
	ProxyConfig.prototype.proxyAutoconfigUrl;

	/**
	 * The proxy host for FTP requests. Only used if {@link #proxyType} is "manual".
	 * @type {(string|undefined)}
	 */
	ProxyConfig.prototype.ftpProxy;

	/**
	 * The proxy host for HTTP requests. Only used if {@link #proxyType} is
	 * "manual".
	 * @type {(string|undefined)}
	 */
	ProxyConfig.prototype.httpProxy;

	/**
	 * The proxy host for HTTPS requests. Only used if {@link #proxyType} is
	 * "manual".
	 * @type {(string|undefined)}
	 */
	ProxyConfig.prototype.sslProxy;

	/**
	 * A comma delimited list of hosts which should bypass all proxies. Only used if
	 * {@link #proxyType} is "manual".
	 * @type {(string|undefined)}
	 */
	ProxyConfig.prototype.noProxy;


	/**
	 * Converts a generic hash object to a map.
	 * @param {!Object<string, ?>} hash The hash object.
	 * @return {!Map<string, ?>} The converted map.
	 */
	function toMap(hash) {
	  let m = new Map;
	  for (let key in hash) {
	    if (hash.hasOwnProperty(key)) {
	      m.set(key, hash[key]);
	    }
	  }
	  return m;
	}


	/**
	 * Describes a set of capabilities for a WebDriver session.
	 */
	class Capabilities extends Map {
	  /**
	   * @param {(Capabilities|Map<string, ?>|Object)=} opt_other Another set of
	   *     capabilities to initialize this instance from.
	   */
	  constructor(opt_other) {
	    if (opt_other && !(opt_other instanceof Map)) {
	      opt_other = toMap(opt_other);
	    }
	    super(opt_other);
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Android.
	   */
	  static android() {
	    return new Capabilities()
	        .set(Capability.BROWSER_NAME, Browser.ANDROID)
	        .set(Capability.PLATFORM, 'ANDROID');
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Chrome.
	   */
	  static chrome() {
	    return new Capabilities().set(Capability.BROWSER_NAME, Browser.CHROME);
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Microsoft Edge.
	   */
	  static edge() {
	    return new Capabilities()
	        .set(Capability.BROWSER_NAME, Browser.EDGE)
	        .set(Capability.PLATFORM, 'WINDOWS');
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Firefox.
	   */
	  static firefox() {
	    return new Capabilities().set(Capability.BROWSER_NAME, Browser.FIREFOX);
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Internet Explorer.
	   */
	  static ie() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.INTERNET_EXPLORER).
	        set(Capability.PLATFORM, 'WINDOWS');
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for iPad.
	   */
	  static ipad() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.IPAD).
	        set(Capability.PLATFORM, 'MAC');
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for iPhone.
	   */
	  static iphone() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.IPHONE).
	        set(Capability.PLATFORM, 'MAC');
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Opera.
	   */
	  static opera() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.OPERA);
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for PhantomJS.
	   */
	  static phantomjs() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.PHANTOM_JS);
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Safari.
	   */
	  static safari() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.SAFARI).
	        set(Capability.PLATFORM, 'MAC');
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for HTMLUnit.
	   */
	  static htmlunit() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.HTMLUNIT);
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for HTMLUnit
	   *     with enabled Javascript.
	   */
	  static htmlunitwithjs() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.HTMLUNIT).
	        set(Capability.SUPPORTS_JAVASCRIPT, true);
	  }

	  /**
	   * @return {!Object<string, ?>} The JSON representation of this instance.
	   *     Note, the returned object may contain nested promised values.
	   * @suppress {checkTypes} Suppress [] access on a struct (state inherited from
	   *     Map).
	   */
	  [Symbols.serialize]() {
	    return serialize(this);
	  }

	  /**
	   * Merges another set of capabilities into this instance.
	   * @param {!(Capabilities|Map<String, ?>|Object<string, ?>)} other The other
	   *     set of capabilities to merge.
	   * @return {!Capabilities} A self reference.
	   */
	  merge(other) {
	    if (!other) {
	      throw new TypeError('no capabilities provided for merge');
	    }

	    if (!(other instanceof Map)) {
	      other = toMap(other);
	    }

	    for (let key of other.keys()) {
	      this.set(key, other.get(key));
	    }

	    return this;
	  }

	  /**
	   * @param {string} key The capability key.
	   * @param {*} value The capability value.
	   * @return {!Capabilities} A self reference.
	   * @throws {TypeError} If the `key` is not a string.
	   * @override
	   */
	  set(key, value) {
	    if (typeof key !== 'string') {
	      throw new TypeError('Capability keys must be strings: ' + typeof key);
	    }
	    super.set(key, value);
	    return this;
	  }

	  /**
	   * Sets the logging preferences. Preferences may be specified as a
	   * {@link ./logging.Preferences} instance, or a as a map of log-type to
	   * log-level.
	   * @param {!(./logging.Preferences|Object<string>)} prefs The logging
	   *     preferences.
	   * @return {!Capabilities} A self reference.
	   */
	  setLoggingPrefs(prefs) {
	    return this.set(Capability.LOGGING_PREFS, prefs);
	  }

	  /**
	   * Sets the proxy configuration for this instance.
	   * @param {ProxyConfig} proxy The desired proxy configuration.
	   * @return {!Capabilities} A self reference.
	   */
	  setProxy(proxy) {
	    return this.set(Capability.PROXY, proxy);
	  }

	  /**
	   * Sets whether native events should be used.
	   * @param {boolean} enabled Whether to enable native events.
	   * @return {!Capabilities} A self reference.
	   */
	  setEnableNativeEvents(enabled) {
	    return this.set(Capability.NATIVE_EVENTS, enabled);
	  }

	  /**
	   * Sets how elements should be scrolled into view for interaction.
	   * @param {number} behavior The desired scroll behavior: either 0 to align
	   *     with the top of the viewport or 1 to align with the bottom.
	   * @return {!Capabilities} A self reference.
	   */
	  setScrollBehavior(behavior) {
	    return this.set(Capability.ELEMENT_SCROLL_BEHAVIOR, behavior);
	  }

	  /**
	   * Sets the default action to take with an unexpected alert before returning
	   * an error.
	   * @param {string} behavior The desired behavior; should be "accept",
	   *     "dismiss", or "ignore". Defaults to "dismiss".
	   * @return {!Capabilities} A self reference.
	   */
	  setAlertBehavior(behavior) {
	    return this.set(Capability.UNEXPECTED_ALERT_BEHAVIOR, behavior);
	  }
	}


	/**
	 * Serializes a capabilities object. This is defined as a standalone function
	 * so it may be type checked (where Capabilities[Symbols.serialize] has type
	 * checking disabled since it is defined with [] access on a struct).
	 *
	 * @param {!Capabilities} caps The capabilities to serialize.
	 * @return {!Object<string, ?>} The JSON representation of this instance.
	 *     Note, the returned object may contain nested promised values.
	 */
	function serialize(caps) {
	  let ret = {};
	  for (let key of caps.keys()) {
	    let cap = caps.get(key);
	    if (cap !== undefined && cap !== null) {
	      ret[key] = cap;
	    }
	  }
	  return ret;
	}


	// PUBLIC API


	module.exports = {
	  Browser: Browser,
	  Capabilities: Capabilities,
	  Capability: Capability,
	  ProxyConfig: ProxyConfig
	};


/***/ },
/* 70 */
/***/ function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * @fileoverview Defines well-known symbols used within the selenium-webdriver
	 * library.
	 */


	module.exports = {
	  /**
	   * The serialize symbol specifies a method that returns an object's serialized
	   * representation. If an object's serialized form is not immediately
	   * available, the serialize method will return a promise that will be resolved
	   * with the serialized form.
	   *
	   * Note that the described method is analgous to objects that define a
	   * `toJSON()` method, except the serialized result may be a promise, or
	   * another object with a promised property.
	   */
	  serialize: Symbol('serialize')
	};


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview The heart of the WebDriver JavaScript API.
	 */

	'use strict';

	const actions = __webpack_require__(72);
	const by = __webpack_require__(74);
	const Capabilities = __webpack_require__(69).Capabilities;
	const command = __webpack_require__(62);
	const error = __webpack_require__(64);
	const input = __webpack_require__(73);
	const logging = __webpack_require__(65);
	const {Session} = __webpack_require__(68);
	const Symbols = __webpack_require__(70);
	const promise = __webpack_require__(66);


	/**
	 * Defines a condition for use with WebDriver's {@linkplain WebDriver#wait wait
	 * command}.
	 *
	 * @template OUT
	 */
	class Condition {
	  /**
	   * @param {string} message A descriptive error message. Should complete the
	   *     sentence "Waiting [...]"
	   * @param {function(!WebDriver): OUT} fn The condition function to
	   *     evaluate on each iteration of the wait loop.
	   */
	  constructor(message, fn) {
	    /** @private {string} */
	    this.description_ = 'Waiting ' + message;

	    /** @type {function(!WebDriver): OUT} */
	    this.fn = fn;
	  }

	  /** @return {string} A description of this condition. */
	  description() {
	    return this.description_;
	  }
	}


	/**
	 * Defines a condition that will result in a {@link WebElement}.
	 *
	 * @extends {Condition<!(WebElement|IThenable<!WebElement>)>}
	 */
	class WebElementCondition extends Condition {
	  /**
	   * @param {string} message A descriptive error message. Should complete the
	   *     sentence "Waiting [...]"
	   * @param {function(!WebDriver): !(WebElement|IThenable<!WebElement>)}
	   *     fn The condition function to evaluate on each iteration of the wait
	   *     loop.
	   */
	  constructor(message, fn) {
	    super(message, fn);
	  }
	}


	//////////////////////////////////////////////////////////////////////////////
	//
	//  WebDriver
	//
	//////////////////////////////////////////////////////////////////////////////


	/**
	 * Translates a command to its wire-protocol representation before passing it
	 * to the given `executor` for execution.
	 * @param {!command.Executor} executor The executor to use.
	 * @param {!command.Command} command The command to execute.
	 * @return {!Promise} A promise that will resolve with the command response.
	 */
	function executeCommand(executor, command) {
	  return toWireValue(command.getParameters()).
	      then(function(parameters) {
	        command.setParameters(parameters);
	        return executor.execute(command);
	      });
	}


	/**
	 * Converts an object to its JSON representation in the WebDriver wire protocol.
	 * When converting values of type object, the following steps will be taken:
	 * <ol>
	 * <li>if the object is a WebElement, the return value will be the element's
	 *     server ID
	 * <li>if the object defines a {@link Symbols.serialize} method, this algorithm
	 *     will be recursively applied to the object's serialized representation
	 * <li>if the object provides a "toJSON" function, this algorithm will
	 *     recursively be applied to the result of that function
	 * <li>otherwise, the value of each key will be recursively converted according
	 *     to the rules above.
	 * </ol>
	 *
	 * @param {*} obj The object to convert.
	 * @return {!Promise<?>} A promise that will resolve to the input value's JSON
	 *     representation.
	 */
	function toWireValue(obj) {
	  if (promise.isPromise(obj)) {
	    return Promise.resolve(obj).then(toWireValue);
	  }
	  return Promise.resolve(convertValue(obj));
	}


	function convertValue(value) {
	  if (value === void 0 || value === null) {
	    return value;
	  }

	  if (typeof value === 'boolean'
	      || typeof value === 'number'
	      || typeof value === 'string') {
	    return value;
	  }

	  if (Array.isArray(value)) {
	    return convertKeys(value);
	  }

	  if (typeof value === 'function') {
	    return '' + value;
	  }

	  if (typeof value[Symbols.serialize] === 'function') {
	    return toWireValue(value[Symbols.serialize]());
	  } else if (typeof value.toJSON === 'function') {
	    return toWireValue(value.toJSON());
	  }
	  return convertKeys(value);
	}


	function convertKeys(obj) {
	  const isArray = Array.isArray(obj);
	  const numKeys = isArray ? obj.length : Object.keys(obj).length;
	  const ret = isArray ? new Array(numKeys) : {};
	  if (!numKeys) {
	    return Promise.resolve(ret);
	  }

	  let numResolved = 0;

	  function forEachKey(obj, fn) {
	    if (Array.isArray(obj)) {
	      for (let i = 0, n = obj.length; i < n; i++) {
	        fn(obj[i], i);
	      }
	    } else {
	      for (let key in obj) {
	        fn(obj[key], key);
	      }
	    }
	  }

	  return new Promise(function(done, reject) {
	    forEachKey(obj, function(value, key) {
	      if (promise.isPromise(value)) {
	        value.then(toWireValue).then(setValue, reject);
	      } else {
	        value = convertValue(value);
	        if (promise.isPromise(value)) {
	          value.then(toWireValue).then(setValue, reject);
	        } else {
	          setValue(value);
	        }
	      }

	      function setValue(value) {
	        ret[key] = value;
	        maybeFulfill();
	      }
	    });

	    function maybeFulfill() {
	      if (++numResolved === numKeys) {
	        done(ret);
	      }
	    }
	  });
	}


	/**
	 * Converts a value from its JSON representation according to the WebDriver wire
	 * protocol. Any JSON object that defines a WebElement ID will be decoded to a
	 * {@link WebElement} object. All other values will be passed through as is.
	 *
	 * @param {!WebDriver} driver The driver to use as the parent of any unwrapped
	 *     {@link WebElement} values.
	 * @param {*} value The value to convert.
	 * @return {*} The converted value.
	 */
	function fromWireValue(driver, value) {
	  if (Array.isArray(value)) {
	    value = value.map(v => fromWireValue(driver, v));
	  } else if (WebElement.isId(value)) {
	    let id = WebElement.extractId(value);
	    value = new WebElement(driver, id);
	  } else if (value && typeof value === 'object') {
	    let result = {};
	    for (let key in value) {
	      if (value.hasOwnProperty(key)) {
	        result[key] = fromWireValue(driver, value[key]);
	      }
	    }
	    value = result;
	  }
	  return value;
	}


	/**
	 * Structural interface for a WebDriver client.
	 *
	 * @record
	 */
	class IWebDriver {

	  /** @return {!promise.ControlFlow} The control flow used by this instance. */
	  controlFlow() {}

	  /**
	   * Schedules a {@link command.Command} to be executed by this driver's
	   * {@link command.Executor}.
	   *
	   * @param {!command.Command} command The command to schedule.
	   * @param {string} description A description of the command for debugging.
	   * @return {!promise.Thenable<T>} A promise that will be resolved
	   *     with the command result.
	   * @template T
	   */
	  schedule(command, description) {}

	  /**
	   * Sets the {@linkplain input.FileDetector file detector} that should be
	   * used with this instance.
	   * @param {input.FileDetector} detector The detector to use or {@code null}.
	   */
	  setFileDetector(detector) {}

	  /**
	   * @return {!command.Executor} The command executor used by this instance.
	   */
	  getExecutor() {}

	  /**
	   * @return {!promise.Thenable<!Session>} A promise for this client's session.
	   */
	  getSession() {}

	  /**
	   * @return {!promise.Thenable<!Capabilities>} A promise that will resolve with
	   *     the this instance's capabilities.
	   */
	  getCapabilities() {}

	  /**
	   * Terminates the browser session. After calling quit, this instance will be
	   * invalidated and may no longer be used to issue commands against the
	   * browser.
	   *
	   * @return {!promise.Thenable<void>} A promise that will be resolved when the
	   *     command has completed.
	   */
	  quit() {}

	  /**
	   * Creates a new action sequence using this driver. The sequence will not be
	   * scheduled for execution until {@link actions.ActionSequence#perform} is
	   * called. Example:
	   *
	   *     driver.actions().
	   *         mouseDown(element1).
	   *         mouseMove(element2).
	   *         mouseUp().
	   *         perform();
	   *
	   * @return {!actions.ActionSequence} A new action sequence for this instance.
	   */
	  actions() {}

	  /**
	   * Creates a new touch sequence using this driver. The sequence will not be
	   * scheduled for execution until {@link actions.TouchSequence#perform} is
	   * called. Example:
	   *
	   *     driver.touchActions().
	   *         tap(element1).
	   *         doubleTap(element2).
	   *         perform();
	   *
	   * @return {!actions.TouchSequence} A new touch sequence for this instance.
	   */
	  touchActions() {}

	  /**
	   * Schedules a command to execute JavaScript in the context of the currently
	   * selected frame or window. The script fragment will be executed as the body
	   * of an anonymous function. If the script is provided as a function object,
	   * that function will be converted to a string for injection into the target
	   * window.
	   *
	   * Any arguments provided in addition to the script will be included as script
	   * arguments and may be referenced using the {@code arguments} object.
	   * Arguments may be a boolean, number, string, or {@linkplain WebElement}.
	   * Arrays and objects may also be used as script arguments as long as each item
	   * adheres to the types previously mentioned.
	   *
	   * The script may refer to any variables accessible from the current window.
	   * Furthermore, the script will execute in the window's context, thus
	   * {@code document} may be used to refer to the current document. Any local
	   * variables will not be available once the script has finished executing,
	   * though global variables will persist.
	   *
	   * If the script has a return value (i.e. if the script contains a return
	   * statement), then the following steps will be taken for resolving this
	   * functions return value:
	   *
	   * - For a HTML element, the value will resolve to a {@linkplain WebElement}
	   * - Null and undefined return values will resolve to null</li>
	   * - Booleans, numbers, and strings will resolve as is</li>
	   * - Functions will resolve to their string representation</li>
	   * - For arrays and objects, each member item will be converted according to
	   *     the rules above
	   *
	   * @param {!(string|Function)} script The script to execute.
	   * @param {...*} var_args The arguments to pass to the script.
	   * @return {!promise.Thenable<T>} A promise that will resolve to the
	   *    scripts return value.
	   * @template T
	   */
	  executeScript(script, var_args) {}

	  /**
	   * Schedules a command to execute asynchronous JavaScript in the context of the
	   * currently selected frame or window. The script fragment will be executed as
	   * the body of an anonymous function. If the script is provided as a function
	   * object, that function will be converted to a string for injection into the
	   * target window.
	   *
	   * Any arguments provided in addition to the script will be included as script
	   * arguments and may be referenced using the {@code arguments} object.
	   * Arguments may be a boolean, number, string, or {@code WebElement}.
	   * Arrays and objects may also be used as script arguments as long as each item
	   * adheres to the types previously mentioned.
	   *
	   * Unlike executing synchronous JavaScript with {@link #executeScript},
	   * scripts executed with this function must explicitly signal they are finished
	   * by invoking the provided callback. This callback will always be injected
	   * into the executed function as the last argument, and thus may be referenced
	   * with {@code arguments[arguments.length - 1]}. The following steps will be
	   * taken for resolving this functions return value against the first argument
	   * to the script's callback function:
	   *
	   * - For a HTML element, the value will resolve to a
	   *     {@link WebElement}
	   * - Null and undefined return values will resolve to null
	   * - Booleans, numbers, and strings will resolve as is
	   * - Functions will resolve to their string representation
	   * - For arrays and objects, each member item will be converted according to
	   *     the rules above
	   *
	   * __Example #1:__ Performing a sleep that is synchronized with the currently
	   * selected window:
	   *
	   *     var start = new Date().getTime();
	   *     driver.executeAsyncScript(
	   *         'window.setTimeout(arguments[arguments.length - 1], 500);').
	   *         then(function() {
	   *           console.log(
	   *               'Elapsed time: ' + (new Date().getTime() - start) + ' ms');
	   *         });
	   *
	   * __Example #2:__ Synchronizing a test with an AJAX application:
	   *
	   *     var button = driver.findElement(By.id('compose-button'));
	   *     button.click();
	   *     driver.executeAsyncScript(
	   *         'var callback = arguments[arguments.length - 1];' +
	   *         'mailClient.getComposeWindowWidget().onload(callback);');
	   *     driver.switchTo().frame('composeWidget');
	   *     driver.findElement(By.id('to')).sendKeys('dog@example.com');
	   *
	   * __Example #3:__ Injecting a XMLHttpRequest and waiting for the result. In
	   * this example, the inject script is specified with a function literal. When
	   * using this format, the function is converted to a string for injection, so it
	   * should not reference any symbols not defined in the scope of the page under
	   * test.
	   *
	   *     driver.executeAsyncScript(function() {
	   *       var callback = arguments[arguments.length - 1];
	   *       var xhr = new XMLHttpRequest();
	   *       xhr.open("GET", "/resource/data.json", true);
	   *       xhr.onreadystatechange = function() {
	   *         if (xhr.readyState == 4) {
	   *           callback(xhr.responseText);
	   *         }
	   *       };
	   *       xhr.send('');
	   *     }).then(function(str) {
	   *       console.log(JSON.parse(str)['food']);
	   *     });
	   *
	   * @param {!(string|Function)} script The script to execute.
	   * @param {...*} var_args The arguments to pass to the script.
	   * @return {!promise.Thenable<T>} A promise that will resolve to the
	   *    scripts return value.
	   * @template T
	   */
	  executeAsyncScript(script, var_args) {}

	  /**
	   * Schedules a command to execute a custom function.
	   * @param {function(...): (T|IThenable<T>)} fn The function to execute.
	   * @param {Object=} opt_scope The object in whose scope to execute the function.
	   * @param {...*} var_args Any arguments to pass to the function.
	   * @return {!promise.Thenable<T>} A promise that will be resolved'
	   *     with the function's result.
	   * @template T
	   */
	  call(fn, opt_scope, var_args) {}

	  /**
	   * Schedules a command to wait for a condition to hold. The condition may be
	   * specified by a {@link Condition}, as a custom function, or as any
	   * promise-like thenable.
	   *
	   * For a {@link Condition} or function, the wait will repeatedly
	   * evaluate the condition until it returns a truthy value. If any errors occur
	   * while evaluating the condition, they will be allowed to propagate. In the
	   * event a condition returns a {@link promise.Promise promise}, the polling
	   * loop will wait for it to be resolved and use the resolved value for whether
	   * the condition has been satisified. Note the resolution time for a promise
	   * is factored into whether a wait has timed out.
	   *
	   * Note, if the provided condition is a {@link WebElementCondition}, then
	   * the wait will return a {@link WebElementPromise} that will resolve to the
	   * element that satisified the condition.
	   *
	   * _Example:_ waiting up to 10 seconds for an element to be present on the
	   * page.
	   *
	   *     var button = driver.wait(until.elementLocated(By.id('foo')), 10000);
	   *     button.click();
	   *
	   * This function may also be used to block the command flow on the resolution
	   * of any thenable promise object. When given a promise, the command will
	   * simply wait for its resolution before completing. A timeout may be provided
	   * to fail the command if the promise does not resolve before the timeout
	   * expires.
	   *
	   * _Example:_ Suppose you have a function, `startTestServer`, that returns a
	   * promise for when a server is ready for requests. You can block a WebDriver
	   * client on this promise with:
	   *
	   *     var started = startTestServer();
	   *     driver.wait(started, 5 * 1000, 'Server should start within 5 seconds');
	   *     driver.get(getServerUrl());
	   *
	   * @param {!(IThenable<T>|
	   *           Condition<T>|
	   *           function(!WebDriver): T)} condition The condition to
	   *     wait on, defined as a promise, condition object, or  a function to
	   *     evaluate as a condition.
	   * @param {number=} opt_timeout How long to wait for the condition to be true.
	   * @param {string=} opt_message An optional message to use if the wait times
	   *     out.
	   * @return {!(promise.Thenable<T>|WebElementPromise)} A promise that will be
	   *     resolved with the first truthy value returned by the condition
	   *     function, or rejected if the condition times out. If the input
	   *     input condition is an instance of a {@link WebElementCondition},
	   *     the returned value will be a {@link WebElementPromise}.
	   * @throws {TypeError} if the provided `condition` is not a valid type.
	   * @template T
	   */
	  wait(condition, opt_timeout, opt_message) {}

	  /**
	   * Schedules a command to make the driver sleep for the given amount of time.
	   * @param {number} ms The amount of time, in milliseconds, to sleep.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the sleep has finished.
	   */
	  sleep(ms) {}

	  /**
	   * Schedules a command to retrieve the current window handle.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the current window handle.
	   */
	  getWindowHandle() {}

	  /**
	   * Schedules a command to retrieve the current list of available window handles.
	   * @return {!promise.Thenable<!Array<string>>} A promise that will
	   *     be resolved with an array of window handles.
	   */
	  getAllWindowHandles() {}

	  /**
	   * Schedules a command to retrieve the current page's source. The page source
	   * returned is a representation of the underlying DOM: do not expect it to be
	   * formatted or escaped in the same way as the response sent from the web
	   * server.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the current page source.
	   */
	  getPageSource() {}

	  /**
	   * Schedules a command to close the current window.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when this command has completed.
	   */
	  close() {}

	  /**
	   * Schedules a command to navigate to the given URL.
	   * @param {string} url The fully qualified URL to open.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the document has finished loading.
	   */
	  get(url) {}

	  /**
	   * Schedules a command to retrieve the URL of the current page.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the current URL.
	   */
	  getCurrentUrl() {}

	  /**
	   * Schedules a command to retrieve the current page's title.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the current page's title.
	   */
	  getTitle() {}

	  /**
	   * Schedule a command to find an element on the page. If the element cannot be
	   * found, a {@link bot.ErrorCode.NO_SUCH_ELEMENT} result will be returned
	   * by the driver. Unlike other commands, this error cannot be suppressed. In
	   * other words, scheduling a command to find an element doubles as an assert
	   * that the element is present on the page. To test whether an element is
	   * present on the page, use {@link #findElements}:
	   *
	   *     driver.findElements(By.id('foo'))
	   *         .then(found => console.log('Element found? %s', !!found.length));
	   *
	   * The search criteria for an element may be defined using one of the
	   * factories in the {@link webdriver.By} namespace, or as a short-hand
	   * {@link webdriver.By.Hash} object. For example, the following two statements
	   * are equivalent:
	   *
	   *     var e1 = driver.findElement(By.id('foo'));
	   *     var e2 = driver.findElement({id:'foo'});
	   *
	   * You may also provide a custom locator function, which takes as input this
	   * instance and returns a {@link WebElement}, or a promise that will resolve
	   * to a WebElement. If the returned promise resolves to an array of
	   * WebElements, WebDriver will use the first element. For example, to find the
	   * first visible link on a page, you could write:
	   *
	   *     var link = driver.findElement(firstVisibleLink);
	   *
	   *     function firstVisibleLink(driver) {
	   *       var links = driver.findElements(By.tagName('a'));
	   *       return promise.filter(links, function(link) {
	   *         return link.isDisplayed();
	   *       });
	   *     }
	   *
	   * @param {!(by.By|Function)} locator The locator to use.
	   * @return {!WebElementPromise} A WebElement that can be used to issue
	   *     commands against the located element. If the element is not found, the
	   *     element will be invalidated and all scheduled commands aborted.
	   */
	  findElement(locator) {}

	  /**
	   * Schedule a command to search for multiple elements on the page.
	   *
	   * @param {!(by.By|Function)} locator The locator to use.
	   * @return {!promise.Thenable<!Array<!WebElement>>} A
	   *     promise that will resolve to an array of WebElements.
	   */
	  findElements(locator) {}

	  /**
	   * Schedule a command to take a screenshot. The driver makes a best effort to
	   * return a screenshot of the following, in order of preference:
	   *
	   * 1. Entire page
	   * 2. Current window
	   * 3. Visible portion of the current frame
	   * 4. The entire display containing the browser
	   *
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved to the screenshot as a base-64 encoded PNG.
	   */
	  takeScreenshot() {}

	  /**
	   * @return {!Options} The options interface for this instance.
	   */
	  manage() {}

	  /**
	   * @return {!Navigation} The navigation interface for this instance.
	   */
	  navigate() {}

	  /**
	   * @return {!TargetLocator} The target locator interface for this
	   *     instance.
	   */
	  switchTo() {}
	}


	/**
	 * Each WebDriver instance provides automated control over a browser session.
	 *
	 * @implements {IWebDriver}
	 */
	class WebDriver {
	  /**
	   * @param {!(Session|IThenable<!Session>)} session Either a known session or a
	   *     promise that will be resolved to a session.
	   * @param {!command.Executor} executor The executor to use when sending
	   *     commands to the browser.
	   * @param {promise.ControlFlow=} opt_flow The flow to
	   *     schedule commands through. Defaults to the active flow object.
	   * @param {(function(this: void): ?)=} opt_onQuit A function to call, if any,
	   *     when the session is terminated.
	   */
	  constructor(session, executor, opt_flow, opt_onQuit) {
	    /** @private {!promise.ControlFlow} */
	    this.flow_ = opt_flow || promise.controlFlow();

	    /** @private {!promise.Thenable<!Session>} */
	    this.session_ = this.flow_.promise(resolve => resolve(session));

	    /** @private {!command.Executor} */
	    this.executor_ = executor;

	    /** @private {input.FileDetector} */
	    this.fileDetector_ = null;

	    /** @private @const {(function(this: void): ?|undefined)} */
	    this.onQuit_ = opt_onQuit;
	  }

	  /**
	   * Creates a new WebDriver client for an existing session.
	   * @param {!command.Executor} executor Command executor to use when querying
	   *     for session details.
	   * @param {string} sessionId ID of the session to attach to.
	   * @param {promise.ControlFlow=} opt_flow The control flow all
	   *     driver commands should execute under. Defaults to the
	   *     {@link promise.controlFlow() currently active}  control flow.
	   * @return {!WebDriver} A new client for the specified session.
	   */
	  static attachToSession(executor, sessionId, opt_flow) {
	    let flow = opt_flow || promise.controlFlow();
	    let cmd = new command.Command(command.Name.DESCRIBE_SESSION)
	        .setParameter('sessionId', sessionId);
	    let session = flow.execute(
	        () => executeCommand(executor, cmd).catch(err => {
	          // The DESCRIBE_SESSION command is not supported by the W3C spec, so
	          // if we get back an unknown command, just return a session with
	          // unknown capabilities.
	          if (err instanceof error.UnknownCommandError) {
	            return new Session(sessionId, new Capabilities);
	          }
	          throw err;
	        }),
	        'WebDriver.attachToSession()');
	    return new WebDriver(session, executor, flow);
	  }

	  /**
	   * Creates a new WebDriver session.
	   *
	   * By default, the requested session `capabilities` are merely "desired" and
	   * the remote end will still create a new session even if it cannot satisfy
	   * all of the requested capabilities. You can query which capabilities a
	   * session actually has using the
	   * {@linkplain #getCapabilities() getCapabilities()} method on the returned
	   * WebDriver instance.
	   *
	   * To define _required capabilities_, provide the `capabilities` as an object
	   * literal with `required` and `desired` keys. The `desired` key may be
	   * omitted if all capabilities are required, and vice versa. If the server
	   * cannot create a session with all of the required capabilities, it will
	   * return an {@linkplain error.SessionNotCreatedError}.
	   *
	   *     let required = new Capabilities().set('browserName', 'firefox');
	   *     let desired = new Capabilities().set('version', '45');
	   *     let driver = WebDriver.createSession(executor, {required, desired});
	   *
	   * This function will always return a WebDriver instance. If there is an error
	   * creating the session, such as the aforementioned SessionNotCreatedError,
	   * the driver will have a rejected {@linkplain #getSession session} promise.
	   * It is recommended that this promise is left _unhandled_ so it will
	   * propagate through the {@linkplain promise.ControlFlow control flow} and
	   * cause subsequent commands to fail.
	   *
	   *     let required = Capabilities.firefox();
	   *     let driver = WebDriver.createSession(executor, {required});
	   *
	   *     // If the createSession operation failed, then this command will also
	   *     // also fail, propagating the creation failure.
	   *     driver.get('http://www.google.com').catch(e => console.log(e));
	   *
	   * @param {!command.Executor} executor The executor to create the new session
	   *     with.
	   * @param {(!Capabilities|
	   *          {desired: (Capabilities|undefined),
	   *           required: (Capabilities|undefined)})} capabilities The desired
	   *     capabilities for the new session.
	   * @param {promise.ControlFlow=} opt_flow The control flow all driver
	   *     commands should execute under, including the initial session creation.
	   *     Defaults to the {@link promise.controlFlow() currently active}
	   *     control flow.
	   * @param {(function(new: WebDriver,
	   *                   !IThenable<!Session>,
	   *                   !command.Executor,
	   *                   promise.ControlFlow=))=} opt_ctor
	   *    A reference to the constructor of the specific type of WebDriver client
	   *    to instantiate. Will create a vanilla {@linkplain WebDriver} instance
	   *    if a constructor is not provided.
	   * @param {(function(this: void): ?)=} opt_onQuit A callback to invoke when
	   *    the newly created session is terminated. This should be used to clean
	   *    up any resources associated with the session.
	   * @return {!WebDriver} The driver for the newly created session.
	   */
	  static createSession(
	        executor, capabilities, opt_flow, opt_ctor, opt_onQuit) {
	    let flow = opt_flow || promise.controlFlow();
	    let cmd = new command.Command(command.Name.NEW_SESSION);

	    if (capabilities && (capabilities.desired || capabilities.required)) {
	      cmd.setParameter('desiredCapabilities', capabilities.desired);
	      cmd.setParameter('requiredCapabilities', capabilities.required);
	    } else {
	      cmd.setParameter('desiredCapabilities', capabilities);
	    }

	    let session = flow.execute(
	        () => executeCommand(executor, cmd),
	        'WebDriver.createSession()');
	    if (typeof opt_onQuit === 'function') {
	      session = session.catch(err => {
	        return Promise.resolve(opt_onQuit.call(void 0)).then(_ => {throw err});
	      });
	    }
	    const ctor = opt_ctor || WebDriver;
	    return new ctor(session, executor, flow, opt_onQuit);
	  }

	  /** @override */
	  controlFlow() {
	    return this.flow_;
	  }

	  /** @override */
	  schedule(command, description) {
	    command.setParameter('sessionId', this.session_);

	    // If any of the command parameters are rejected promises, those
	    // rejections may be reported as unhandled before the control flow
	    // attempts to execute the command. To ensure parameters errors
	    // propagate through the command itself, we resolve all of the
	    // command parameters now, but suppress any errors until the ControlFlow
	    // actually executes the command. This addresses scenarios like catching
	    // an element not found error in:
	    //
	    //     driver.findElement(By.id('foo')).click().catch(function(e) {
	    //       if (e instanceof NoSuchElementError) {
	    //         // Do something.
	    //       }
	    //     });
	    var prepCommand = toWireValue(command.getParameters());
	    prepCommand.catch(function() {});

	    var flow = this.flow_;
	    var executor = this.executor_;
	    return flow.execute(() => {
	      // Retrieve resolved command parameters; any previously suppressed errors
	      // will now propagate up through the control flow as part of the command
	      // execution.
	      return prepCommand.then(function(parameters) {
	        command.setParameters(parameters);
	        return executor.execute(command);
	      }).then(value => fromWireValue(this, value));
	    }, description);
	  }

	  /** @override */
	  setFileDetector(detector) {
	    this.fileDetector_ = detector;
	  }

	  /** @override */
	  getExecutor() {
	    return this.executor_;
	  }

	  /** @override */
	  getSession() {
	    return this.session_;
	  }

	  /** @override */
	  getCapabilities() {
	    return this.session_.then(s => s.getCapabilities());
	  }

	  /** @override */
	  quit() {
	    var result = this.schedule(
	        new command.Command(command.Name.QUIT),
	        'WebDriver.quit()');
	    // Delete our session ID when the quit command finishes; this will allow us
	    // to throw an error when attemnpting to use a driver post-quit.
	    return /** @type {!promise.Thenable} */(promise.finally(result, () => {
	      this.session_ = this.flow_.promise((_, reject) => {
	        reject(new error.NoSuchSessionError(
	            'This driver instance does not have a valid session ID ' +
	            '(did you call WebDriver.quit()?) and may no longer be used.'));
	      });

	      // Only want the session rejection to bubble if accessed.
	      this.session_.catch(function() {});

	      if (this.onQuit_) {
	        return this.onQuit_.call(void 0);
	      }
	    }));
	  }

	  /** @override */
	  actions() {
	    return new actions.ActionSequence(this);
	  }

	  /** @override */
	  touchActions() {
	    return new actions.TouchSequence(this);
	  }

	  /** @override */
	  executeScript(script, var_args) {
	    if (typeof script === 'function') {
	      script = 'return (' + script + ').apply(null, arguments);';
	    }
	    let args =
	        arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : [];
	   return this.schedule(
	        new command.Command(command.Name.EXECUTE_SCRIPT).
	            setParameter('script', script).
	            setParameter('args', args),
	        'WebDriver.executeScript()');
	  }

	  /** @override */
	  executeAsyncScript(script, var_args) {
	    if (typeof script === 'function') {
	      script = 'return (' + script + ').apply(null, arguments);';
	    }
	    let args = Array.prototype.slice.call(arguments, 1);
	    return this.schedule(
	        new command.Command(command.Name.EXECUTE_ASYNC_SCRIPT).
	            setParameter('script', script).
	            setParameter('args', args),
	        'WebDriver.executeScript()');
	  }

	  /** @override */
	  call(fn, opt_scope, var_args) {
	    let args = Array.prototype.slice.call(arguments, 2);
	    return this.flow_.execute(function() {
	      return promise.fullyResolved(args).then(function(args) {
	        if (promise.isGenerator(fn)) {
	          args.unshift(fn, opt_scope);
	          return promise.consume.apply(null, args);
	        }
	        return fn.apply(opt_scope, args);
	      });
	    }, 'WebDriver.call(' + (fn.name || 'function') + ')');
	  }

	  /** @override */
	  wait(condition, opt_timeout, opt_message) {
	    if (promise.isPromise(condition)) {
	      return this.flow_.wait(
	          /** @type {!IThenable} */(condition),
	          opt_timeout, opt_message);
	    }

	    var message = opt_message;
	    var fn = /** @type {!Function} */(condition);
	    if (condition instanceof Condition) {
	      message = message || condition.description();
	      fn = condition.fn;
	    }

	    if (typeof fn !== 'function') {
	      throw TypeError(
	          'Wait condition must be a promise-like object, function, or a '
	              + 'Condition object');
	    }

	    var driver = this;
	    var result = this.flow_.wait(function() {
	      if (promise.isGenerator(fn)) {
	        return promise.consume(fn, null, [driver]);
	      }
	      return fn(driver);
	    }, opt_timeout, message);

	    if (condition instanceof WebElementCondition) {
	      result = new WebElementPromise(this, result.then(function(value) {
	        if (!(value instanceof WebElement)) {
	          throw TypeError(
	              'WebElementCondition did not resolve to a WebElement: '
	                  + Object.prototype.toString.call(value));
	        }
	        return value;
	      }));
	    }
	    return result;
	  }

	  /** @override */
	  sleep(ms) {
	    return this.flow_.timeout(ms, 'WebDriver.sleep(' + ms + ')');
	  }

	  /** @override */
	  getWindowHandle() {
	    return this.schedule(
	        new command.Command(command.Name.GET_CURRENT_WINDOW_HANDLE),
	        'WebDriver.getWindowHandle()');
	  }

	  /** @override */
	  getAllWindowHandles() {
	    return this.schedule(
	        new command.Command(command.Name.GET_WINDOW_HANDLES),
	        'WebDriver.getAllWindowHandles()');
	  }

	  /** @override */
	  getPageSource() {
	    return this.schedule(
	        new command.Command(command.Name.GET_PAGE_SOURCE),
	        'WebDriver.getPageSource()');
	  }

	  /** @override */
	  close() {
	    return this.schedule(new command.Command(command.Name.CLOSE),
	                         'WebDriver.close()');
	  }

	  /** @override */
	  get(url) {
	    return this.navigate().to(url);
	  }

	  /** @override */
	  getCurrentUrl() {
	    return this.schedule(
	        new command.Command(command.Name.GET_CURRENT_URL),
	        'WebDriver.getCurrentUrl()');
	  }

	  /** @override */
	  getTitle() {
	    return this.schedule(new command.Command(command.Name.GET_TITLE),
	                         'WebDriver.getTitle()');
	  }

	  /** @override */
	  findElement(locator) {
	    let id;
	    locator = by.checkedLocator(locator);
	    if (typeof locator === 'function') {
	      id = this.findElementInternal_(locator, this);
	    } else {
	      let cmd = new command.Command(command.Name.FIND_ELEMENT).
	          setParameter('using', locator.using).
	          setParameter('value', locator.value);
	      id = this.schedule(cmd, 'WebDriver.findElement(' + locator + ')');
	    }
	    return new WebElementPromise(this, id);
	  }

	  /**
	   * @param {!Function} locatorFn The locator function to use.
	   * @param {!(WebDriver|WebElement)} context The search
	   *     context.
	   * @return {!promise.Thenable<!WebElement>} A
	   *     promise that will resolve to a list of WebElements.
	   * @private
	   */
	  findElementInternal_(locatorFn, context) {
	    return this.call(() => locatorFn(context)).then(function(result) {
	      if (Array.isArray(result)) {
	        result = result[0];
	      }
	      if (!(result instanceof WebElement)) {
	        throw new TypeError('Custom locator did not return a WebElement');
	      }
	      return result;
	    });
	  }

	  /** @override */
	  findElements(locator) {
	    locator = by.checkedLocator(locator);
	    if (typeof locator === 'function') {
	      return this.findElementsInternal_(locator, this);
	    } else {
	      let cmd = new command.Command(command.Name.FIND_ELEMENTS).
	          setParameter('using', locator.using).
	          setParameter('value', locator.value);
	      let res = this.schedule(cmd, 'WebDriver.findElements(' + locator + ')');
	      return res.catch(function(e) {
	        if (e instanceof error.NoSuchElementError) {
	          return [];
	        }
	        throw e;
	      });
	    }
	  }

	  /**
	   * @param {!Function} locatorFn The locator function to use.
	   * @param {!(WebDriver|WebElement)} context The search context.
	   * @return {!promise.Thenable<!Array<!WebElement>>} A promise that
	   *     will resolve to an array of WebElements.
	   * @private
	   */
	  findElementsInternal_(locatorFn, context) {
	    return this.call(() => locatorFn(context)).then(function(result) {
	      if (result instanceof WebElement) {
	        return [result];
	      }

	      if (!Array.isArray(result)) {
	        return [];
	      }

	      return result.filter(function(item) {
	        return item instanceof WebElement;
	      });
	    });
	  }

	  /** @override */
	  takeScreenshot() {
	    return this.schedule(new command.Command(command.Name.SCREENSHOT),
	        'WebDriver.takeScreenshot()');
	  }

	  /** @override */
	  manage() {
	    return new Options(this);
	  }

	  /** @override */
	  navigate() {
	    return new Navigation(this);
	  }

	  /** @override */
	  switchTo() {
	    return new TargetLocator(this);
	  }
	}


	/**
	 * Interface for navigating back and forth in the browser history.
	 *
	 * This class should never be instantiated directly. Instead, obtain an instance
	 * with
	 *
	 *    webdriver.navigate()
	 *
	 * @see WebDriver#navigate()
	 */
	class Navigation {
	  /**
	   * @param {!WebDriver} driver The parent driver.
	   * @private
	   */
	  constructor(driver) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;
	  }

	  /**
	   * Schedules a command to navigate to a new URL.
	   * @param {string} url The URL to navigate to.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the URL has been loaded.
	   */
	  to(url) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GET).
	            setParameter('url', url),
	        'WebDriver.navigate().to(' + url + ')');
	  }

	  /**
	   * Schedules a command to move backwards in the browser history.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the navigation event has completed.
	   */
	  back() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GO_BACK),
	        'WebDriver.navigate().back()');
	  }

	  /**
	   * Schedules a command to move forwards in the browser history.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the navigation event has completed.
	   */
	  forward() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GO_FORWARD),
	        'WebDriver.navigate().forward()');
	  }

	  /**
	   * Schedules a command to refresh the current page.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the navigation event has completed.
	   */
	  refresh() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.REFRESH),
	        'WebDriver.navigate().refresh()');
	  }
	}


	/**
	 * Provides methods for managing browser and driver state.
	 *
	 * This class should never be instantiated directly. Insead, obtain an instance
	 * with {@linkplain WebDriver#manage() webdriver.manage()}.
	 */
	class Options {
	  /**
	   * @param {!WebDriver} driver The parent driver.
	   * @private
	   */
	  constructor(driver) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;
	  }

	  /**
	   * Schedules a command to add a cookie.
	   *
	   * __Sample Usage:__
	   *
	   *     // Set a basic cookie.
	   *     driver.options().addCookie({name: 'foo', value: 'bar'});
	   *
	   *     // Set a cookie that expires in 10 minutes.
	   *     let expiry = new Date(Date.now() + (10 * 60 * 1000));
	   *     driver.options().addCookie({name: 'foo', value: 'bar', expiry});
	   *
	   *     // The cookie expiration may also be specified in seconds since epoch.
	   *     driver.options().addCookie({
	   *       name: 'foo',
	   *       value: 'bar',
	   *       expiry: Math.floor(Date.now() / 1000)
	   *     });
	   *
	   * @param {!Options.Cookie} spec Defines the cookie to add.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the cookie has been added to the page.
	   * @throws {error.InvalidArgumentError} if any of the cookie parameters are
	   *     invalid.
	   * @throws {TypeError} if `spec` is not a cookie object.
	   */
	  addCookie(spec) {
	    if (!spec || typeof spec !== 'object') {
	      throw TypeError('addCookie called with non-cookie parameter');
	    }

	    // We do not allow '=' or ';' in the name.
	    let name = spec.name;
	    if (/[;=]/.test(name)) {
	      throw new error.InvalidArgumentError(
	          'Invalid cookie name "' + name + '"');
	    }

	    // We do not allow ';' in value.
	    let value = spec.value;
	    if (/;/.test(value)) {
	      throw new error.InvalidArgumentError(
	          'Invalid cookie value "' + value + '"');
	    }

	    let cookieString = name + '=' + value +
	        (spec.domain ? ';domain=' + spec.domain : '') +
	        (spec.path ? ';path=' + spec.path : '') +
	        (spec.secure ? ';secure' : '');

	    let expiry;
	    if (typeof spec.expiry === 'number') {
	      expiry = Math.floor(spec.expiry);
	      cookieString += ';expires=' + new Date(spec.expiry * 1000).toUTCString();
	    } else if (spec.expiry instanceof Date) {
	      let date = /** @type {!Date} */(spec.expiry);
	      expiry = Math.floor(date.getTime() / 1000);
	      cookieString += ';expires=' + date.toUTCString();
	    }

	    return this.driver_.schedule(
	        new command.Command(command.Name.ADD_COOKIE).
	            setParameter('cookie', {
	              'name': name,
	              'value': value,
	              'path': spec.path,
	              'domain': spec.domain,
	              'secure': !!spec.secure,
	              'expiry': expiry
	            }),
	        'WebDriver.manage().addCookie(' + cookieString + ')');
	  }

	  /**
	   * Schedules a command to delete all cookies visible to the current page.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when all cookies have been deleted.
	   */
	  deleteAllCookies() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.DELETE_ALL_COOKIES),
	        'WebDriver.manage().deleteAllCookies()');
	  }

	  /**
	   * Schedules a command to delete the cookie with the given name. This command
	   * is a no-op if there is no cookie with the given name visible to the current
	   * page.
	   * @param {string} name The name of the cookie to delete.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the cookie has been deleted.
	   */
	  deleteCookie(name) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.DELETE_COOKIE).
	            setParameter('name', name),
	        'WebDriver.manage().deleteCookie(' + name + ')');
	  }

	  /**
	   * Schedules a command to retrieve all cookies visible to the current page.
	   * Each cookie will be returned as a JSON object as described by the WebDriver
	   * wire protocol.
	   * @return {!promise.Thenable<!Array<!Options.Cookie>>} A promise that will be
	   *     resolved with the cookies visible to the current browsing context.
	   */
	  getCookies() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GET_ALL_COOKIES),
	        'WebDriver.manage().getCookies()');
	  }

	  /**
	   * Schedules a command to retrieve the cookie with the given name. Returns null
	   * if there is no such cookie. The cookie will be returned as a JSON object as
	   * described by the WebDriver wire protocol.
	   *
	   * @param {string} name The name of the cookie to retrieve.
	   * @return {!promise.Thenable<?Options.Cookie>} A promise that will be resolved
	   *     with the named cookie, or `null` if there is no such cookie.
	   */
	  getCookie(name) {
	    return this.getCookies().then(function(cookies) {
	      for (let cookie of cookies) {
	        if (cookie && cookie['name'] === name) {
	          return cookie;
	        }
	      }
	      return null;
	    });
	  }

	  /**
	   * @return {!Logs} The interface for managing driver
	   *     logs.
	   */
	  logs() {
	    return new Logs(this.driver_);
	  }

	  /**
	   * @return {!Timeouts} The interface for managing driver timeouts.
	   */
	  timeouts() {
	    return new Timeouts(this.driver_);
	  }

	  /**
	   * @return {!Window} The interface for managing the current window.
	   */
	  window() {
	    return new Window(this.driver_);
	  }
	}


	/**
	 * A record object describing a browser cookie.
	 *
	 * @record
	 */
	Options.Cookie = function() {};


	/**
	 * The name of the cookie.
	 *
	 * @type {string}
	 */
	Options.Cookie.prototype.name;


	/**
	 * The cookie value.
	 *
	 * @type {string}
	 */
	Options.Cookie.prototype.value;


	/**
	 * The cookie path. Defaults to "/" when adding a cookie.
	 *
	 * @type {(string|undefined)}
	 */
	Options.Cookie.prototype.path;


	/**
	 * The domain the cookie is visible to. Defaults to the current browsing
	 * context's document's URL when adding a cookie.
	 *
	 * @type {(string|undefined)}
	 */
	Options.Cookie.prototype.domain;


	/**
	 * Whether the cookie is a secure cookie. Defaults to false when adding a new
	 * cookie.
	 *
	 * @type {(boolean|undefined)}
	 */
	Options.Cookie.prototype.secure;


	/**
	 * Whether the cookie is an HTTP only cookie. Defaults to false when adding a
	 * new cookie.
	 *
	 * @type {(boolean|undefined)}
	 */
	Options.Cookie.prototype.httpOnly;


	/**
	 * When the cookie expires.
	 *
	 * When {@linkplain Options#addCookie() adding a cookie}, this may be specified
	 * in _seconds_ since Unix epoch (January 1, 1970). The expiry will default to
	 * 20 years in the future if omitted.
	 *
	 * The expiry is always returned in seconds since epoch when
	 * {@linkplain Options#getCookies() retrieving cookies} from the browser.
	 *
	 * @type {(!Date|number|undefined)}
	 */
	Options.Cookie.prototype.expiry;


	/**
	 * An interface for managing timeout behavior for WebDriver instances.
	 *
	 * This class should never be instantiated directly. Insead, obtain an instance
	 * with
	 *
	 *    webdriver.manage().timeouts()
	 *
	 * @see WebDriver#manage()
	 * @see Options#timeouts()
	 */
	class Timeouts {
	  /**
	   * @param {!WebDriver} driver The parent driver.
	   * @private
	   */
	  constructor(driver) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;
	  }

	  /**
	   * Specifies the amount of time the driver should wait when searching for an
	   * element if it is not immediately present.
	   *
	   * When searching for a single element, the driver should poll the page
	   * until the element has been found, or this timeout expires before failing
	   * with a {@link bot.ErrorCode.NO_SUCH_ELEMENT} error. When searching
	   * for multiple elements, the driver should poll the page until at least one
	   * element has been found or this timeout has expired.
	   *
	   * Setting the wait timeout to 0 (its default value), disables implicit
	   * waiting.
	   *
	   * Increasing the implicit wait timeout should be used judiciously as it
	   * will have an adverse effect on test run time, especially when used with
	   * slower location strategies like XPath.
	   *
	   * @param {number} ms The amount of time to wait, in milliseconds.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the implicit wait timeout has been set.
	   */
	  implicitlyWait(ms) {
	    return this._scheduleCommand(ms, 'implicit', 'implicitlyWait');
	  }

	  /**
	   * Sets the amount of time to wait, in milliseconds, for an asynchronous
	   * script to finish execution before returning an error. If the timeout is
	   * less than or equal to 0, the script will be allowed to run indefinitely.
	   *
	   * @param {number} ms The amount of time to wait, in milliseconds.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the script timeout has been set.
	   */
	  setScriptTimeout(ms) {
	    return this._scheduleCommand(ms, 'script', 'setScriptTimeout');
	  }

	  /**
	   * Sets the amount of time to wait for a page load to complete before
	   * returning an error.  If the timeout is negative, page loads may be
	   * indefinite.
	   *
	   * @param {number} ms The amount of time to wait, in milliseconds.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the timeout has been set.
	   */
	  pageLoadTimeout(ms) {
	    return this._scheduleCommand(ms, 'page load', 'pageLoadTimeout');
	  }

	  _scheduleCommand(ms, timeoutIdentifier, timeoutName) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SET_TIMEOUT).
	            setParameter('type', timeoutIdentifier).
	            setParameter('ms', ms),
	        `WebDriver.manage().timeouts().${timeoutName}(${ms})`);
	  }
	}


	/**
	 * An interface for managing the current window.
	 *
	 * This class should never be instantiated directly. Instead, obtain an instance
	 * with
	 *
	 *    webdriver.manage().window()
	 *
	 * @see WebDriver#manage()
	 * @see Options#window()
	 */
	class Window {
	  /**
	   * @param {!WebDriver} driver The parent driver.
	   * @private
	   */
	  constructor(driver) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;
	  }

	  /**
	   * Retrieves the window's current position, relative to the top left corner of
	   * the screen.
	   * @return {!promise.Thenable<{x: number, y: number}>} A promise
	   *     that will be resolved with the window's position in the form of a
	   *     {x:number, y:number} object literal.
	   */
	  getPosition() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GET_WINDOW_POSITION).
	            setParameter('windowHandle', 'current'),
	        'WebDriver.manage().window().getPosition()');
	  }

	  /**
	   * Repositions the current window.
	   * @param {number} x The desired horizontal position, relative to the left
	   *     side of the screen.
	   * @param {number} y The desired vertical position, relative to the top of the
	   *     of the screen.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the command has completed.
	   */
	  setPosition(x, y) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SET_WINDOW_POSITION).
	            setParameter('windowHandle', 'current').
	            setParameter('x', x).
	            setParameter('y', y),
	        'WebDriver.manage().window().setPosition(' + x + ', ' + y + ')');
	  }

	  /**
	   * Retrieves the window's current size.
	   * @return {!promise.Thenable<{width: number, height: number}>} A
	   *     promise that will be resolved with the window's size in the form of a
	   *     {width:number, height:number} object literal.
	   */
	  getSize() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GET_WINDOW_SIZE).
	            setParameter('windowHandle', 'current'),
	        'WebDriver.manage().window().getSize()');
	  }

	  /**
	   * Resizes the current window.
	   * @param {number} width The desired window width.
	   * @param {number} height The desired window height.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the command has completed.
	   */
	  setSize(width, height) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SET_WINDOW_SIZE).
	            setParameter('windowHandle', 'current').
	            setParameter('width', width).
	            setParameter('height', height),
	        'WebDriver.manage().window().setSize(' + width + ', ' + height + ')');
	  }

	  /**
	   * Maximizes the current window.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the command has completed.
	   */
	  maximize() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.MAXIMIZE_WINDOW).
	            setParameter('windowHandle', 'current'),
	        'WebDriver.manage().window().maximize()');
	  }
	}


	/**
	 * Interface for managing WebDriver log records.
	 *
	 * This class should never be instantiated directly. Instead, obtain an
	 * instance with
	 *
	 *     webdriver.manage().logs()
	 *
	 * @see WebDriver#manage()
	 * @see Options#logs()
	 */
	class Logs {
	  /**
	   * @param {!WebDriver} driver The parent driver.
	   * @private
	   */
	  constructor(driver) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;
	  }

	  /**
	   * Fetches available log entries for the given type.
	   *
	   * Note that log buffers are reset after each call, meaning that available
	   * log entries correspond to those entries not yet returned for a given log
	   * type. In practice, this means that this call will return the available log
	   * entries since the last call, or from the start of the session.
	   *
	   * @param {!logging.Type} type The desired log type.
	   * @return {!promise.Thenable<!Array.<!logging.Entry>>} A
	   *   promise that will resolve to a list of log entries for the specified
	   *   type.
	   */
	  get(type) {
	    let cmd = new command.Command(command.Name.GET_LOG).
	        setParameter('type', type);
	    return this.driver_.schedule(
	        cmd, 'WebDriver.manage().logs().get(' + type + ')').
	        then(function(entries) {
	          return entries.map(function(entry) {
	            if (!(entry instanceof logging.Entry)) {
	              return new logging.Entry(
	                  entry['level'], entry['message'], entry['timestamp'],
	                  entry['type']);
	            }
	            return entry;
	          });
	        });
	  }

	  /**
	   * Retrieves the log types available to this driver.
	   * @return {!promise.Thenable<!Array<!logging.Type>>} A
	   *     promise that will resolve to a list of available log types.
	   */
	  getAvailableLogTypes() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GET_AVAILABLE_LOG_TYPES),
	        'WebDriver.manage().logs().getAvailableLogTypes()');
	  }
	}


	/**
	 * An interface for changing the focus of the driver to another frame or window.
	 *
	 * This class should never be instantiated directly. Instead, obtain an
	 * instance with
	 *
	 *     webdriver.switchTo()
	 *
	 * @see WebDriver#switchTo()
	 */
	class TargetLocator {
	  /**
	   * @param {!WebDriver} driver The parent driver.
	   * @private
	   */
	  constructor(driver) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;
	  }

	  /**
	   * Schedules a command retrieve the {@code document.activeElement} element on
	   * the current document, or {@code document.body} if activeElement is not
	   * available.
	   * @return {!WebElementPromise} The active element.
	   */
	  activeElement() {
	    var id = this.driver_.schedule(
	        new command.Command(command.Name.GET_ACTIVE_ELEMENT),
	        'WebDriver.switchTo().activeElement()');
	    return new WebElementPromise(this.driver_, id);
	  }

	  /**
	   * Schedules a command to switch focus of all future commands to the topmost
	   * frame on the page.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the driver has changed focus to the default content.
	   */
	  defaultContent() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SWITCH_TO_FRAME).
	            setParameter('id', null),
	        'WebDriver.switchTo().defaultContent()');
	  }

	  /**
	   * Schedules a command to switch the focus of all future commands to another
	   * frame on the page. The target frame may be specified as one of the
	   * following:
	   *
	   * - A number that specifies a (zero-based) index into [window.frames](
	   *   https://developer.mozilla.org/en-US/docs/Web/API/Window.frames).
	   * - A {@link WebElement} reference, which correspond to a `frame` or `iframe`
	   *   DOM element.
	   * - The `null` value, to select the topmost frame on the page. Passing `null`
	   *   is the same as calling {@link #defaultContent defaultContent()}.
	   *
	   * If the specified frame can not be found, the returned promise will be
	   * rejected with a {@linkplain error.NoSuchFrameError}.
	   *
	   * @param {(number|WebElement|null)} id The frame locator.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the driver has changed focus to the specified frame.
	   */
	  frame(id) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SWITCH_TO_FRAME).
	            setParameter('id', id),
	        'WebDriver.switchTo().frame(' + id + ')');
	  }

	  /**
	   * Schedules a command to switch the focus of all future commands to another
	   * window. Windows may be specified by their {@code window.name} attribute or
	   * by its handle (as returned by {@link WebDriver#getWindowHandles}).
	   *
	   * If the specified window cannot be found, the returned promise will be
	   * rejected with a {@linkplain error.NoSuchWindowError}.
	   *
	   * @param {string} nameOrHandle The name or window handle of the window to
	   *     switch focus to.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the driver has changed focus to the specified window.
	   */
	  window(nameOrHandle) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SWITCH_TO_WINDOW).
	            // "name" supports the legacy drivers. "handle" is the W3C
	            // compliant parameter.
	            setParameter('name', nameOrHandle).
	            setParameter('handle', nameOrHandle),
	        'WebDriver.switchTo().window(' + nameOrHandle + ')');
	  }

	  /**
	   * Schedules a command to change focus to the active modal dialog, such as
	   * those opened by `window.alert()`, `window.confirm()`, and
	   * `window.prompt()`. The returned promise will be rejected with a
	   * {@linkplain error.NoSuchAlertError} if there are no open alerts.
	   *
	   * @return {!AlertPromise} The open alert.
	   */
	  alert() {
	    var text = this.driver_.schedule(
	        new command.Command(command.Name.GET_ALERT_TEXT),
	        'WebDriver.switchTo().alert()');
	    var driver = this.driver_;
	    return new AlertPromise(driver, text.then(function(text) {
	      return new Alert(driver, text);
	    }));
	  }
	}


	//////////////////////////////////////////////////////////////////////////////
	//
	//  WebElement
	//
	//////////////////////////////////////////////////////////////////////////////


	const LEGACY_ELEMENT_ID_KEY = 'ELEMENT';
	const ELEMENT_ID_KEY = 'element-6066-11e4-a52e-4f735466cecf';


	/**
	 * Represents a DOM element. WebElements can be found by searching from the
	 * document root using a {@link WebDriver} instance, or by searching
	 * under another WebElement:
	 *
	 *     driver.get('http://www.google.com');
	 *     var searchForm = driver.findElement(By.tagName('form'));
	 *     var searchBox = searchForm.findElement(By.name('q'));
	 *     searchBox.sendKeys('webdriver');
	 */
	class WebElement {
	  /**
	   * @param {!WebDriver} driver the parent WebDriver instance for this element.
	   * @param {(!IThenable<string>|string)} id The server-assigned opaque ID for
	   *     the underlying DOM element.
	   */
	  constructor(driver, id) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;

	    /** @private {!promise.Thenable<string>} */
	    this.id_ = driver.controlFlow().promise(resolve => resolve(id));
	  }

	  /**
	   * @param {string} id The raw ID.
	   * @param {boolean=} opt_noLegacy Whether to exclude the legacy element key.
	   * @return {!Object} The element ID for use with WebDriver's wire protocol.
	   */
	  static buildId(id, opt_noLegacy) {
	    return opt_noLegacy
	        ? {[ELEMENT_ID_KEY]: id}
	        : {[ELEMENT_ID_KEY]: id, [LEGACY_ELEMENT_ID_KEY]: id};
	  }

	  /**
	   * Extracts the encoded WebElement ID from the object.
	   *
	   * @param {?} obj The object to extract the ID from.
	   * @return {string} the extracted ID.
	   * @throws {TypeError} if the object is not a valid encoded ID.
	   */
	  static extractId(obj) {
	    if (obj && typeof obj === 'object') {
	      if (typeof obj[ELEMENT_ID_KEY] === 'string') {
	        return obj[ELEMENT_ID_KEY];
	      } else if (typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string') {
	        return obj[LEGACY_ELEMENT_ID_KEY];
	      }
	    }
	    throw new TypeError('object is not a WebElement ID');
	  }

	  /**
	   * @param {?} obj the object to test.
	   * @return {boolean} whether the object is a valid encoded WebElement ID.
	   */
	  static isId(obj) {
	    return obj && typeof obj === 'object'
	        && (typeof obj[ELEMENT_ID_KEY] === 'string'
	            || typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string');
	  }

	  /**
	   * Compares two WebElements for equality.
	   *
	   * @param {!WebElement} a A WebElement.
	   * @param {!WebElement} b A WebElement.
	   * @return {!promise.Thenable<boolean>} A promise that will be
	   *     resolved to whether the two WebElements are equal.
	   */
	  static equals(a, b) {
	    if (a === b) {
	      return a.driver_.controlFlow().promise(resolve => resolve(true));
	    }
	    let ids = [a.getId(), b.getId()];
	    return promise.all(ids).then(function(ids) {
	      // If the two element's have the same ID, they should be considered
	      // equal. Otherwise, they may still be equivalent, but we'll need to
	      // ask the server to check for us.
	      if (ids[0] === ids[1]) {
	        return true;
	      }

	      let cmd = new command.Command(command.Name.ELEMENT_EQUALS);
	      cmd.setParameter('id', ids[0]);
	      cmd.setParameter('other', ids[1]);
	      return a.driver_.schedule(cmd, 'WebElement.equals()');
	    });
	  }

	  /** @return {!WebDriver} The parent driver for this instance. */
	  getDriver() {
	    return this.driver_;
	  }

	  /**
	   * @return {!promise.Thenable<string>} A promise that resolves to
	   *     the server-assigned opaque ID assigned to this element.
	   */
	  getId() {
	    return this.id_;
	  }

	  /**
	   * @return {!Object} Returns the serialized representation of this WebElement.
	   */
	  [Symbols.serialize]() {
	    return this.getId().then(WebElement.buildId);
	  }

	  /**
	   * Schedules a command that targets this element with the parent WebDriver
	   * instance. Will ensure this element's ID is included in the command
	   * parameters under the "id" key.
	   *
	   * @param {!command.Command} command The command to schedule.
	   * @param {string} description A description of the command for debugging.
	   * @return {!promise.Thenable<T>} A promise that will be resolved
	   *     with the command result.
	   * @template T
	   * @see WebDriver#schedule
	   * @private
	   */
	  schedule_(command, description) {
	    command.setParameter('id', this);
	    return this.driver_.schedule(command, description);
	  }

	  /**
	   * Schedule a command to find a descendant of this element. If the element
	   * cannot be found, the returned promise will be rejected with a
	   * {@linkplain error.NoSuchElementError NoSuchElementError}.
	   *
	   * The search criteria for an element may be defined using one of the static
	   * factories on the {@link by.By} class, or as a short-hand
	   * {@link ./by.ByHash} object. For example, the following two statements
	   * are equivalent:
	   *
	   *     var e1 = element.findElement(By.id('foo'));
	   *     var e2 = element.findElement({id:'foo'});
	   *
	   * You may also provide a custom locator function, which takes as input this
	   * instance and returns a {@link WebElement}, or a promise that will resolve
	   * to a WebElement. If the returned promise resolves to an array of
	   * WebElements, WebDriver will use the first element. For example, to find the
	   * first visible link on a page, you could write:
	   *
	   *     var link = element.findElement(firstVisibleLink);
	   *
	   *     function firstVisibleLink(element) {
	   *       var links = element.findElements(By.tagName('a'));
	   *       return promise.filter(links, function(link) {
	   *         return link.isDisplayed();
	   *       });
	   *     }
	   *
	   * @param {!(by.By|Function)} locator The locator strategy to use when
	   *     searching for the element.
	   * @return {!WebElementPromise} A WebElement that can be used to issue
	   *     commands against the located element. If the element is not found, the
	   *     element will be invalidated and all scheduled commands aborted.
	   */
	  findElement(locator) {
	    locator = by.checkedLocator(locator);
	    let id;
	    if (typeof locator === 'function') {
	      id = this.driver_.findElementInternal_(locator, this);
	    } else {
	      let cmd = new command.Command(
	          command.Name.FIND_CHILD_ELEMENT).
	          setParameter('using', locator.using).
	          setParameter('value', locator.value);
	      id = this.schedule_(cmd, 'WebElement.findElement(' + locator + ')');
	    }
	    return new WebElementPromise(this.driver_, id);
	  }

	  /**
	   * Schedules a command to find all of the descendants of this element that
	   * match the given search criteria.
	   *
	   * @param {!(by.By|Function)} locator The locator strategy to use when
	   *     searching for the element.
	   * @return {!promise.Thenable<!Array<!WebElement>>} A
	   *     promise that will resolve to an array of WebElements.
	   */
	  findElements(locator) {
	    locator = by.checkedLocator(locator);
	    let id;
	    if (typeof locator === 'function') {
	      return this.driver_.findElementsInternal_(locator, this);
	    } else {
	      var cmd = new command.Command(
	          command.Name.FIND_CHILD_ELEMENTS).
	          setParameter('using', locator.using).
	          setParameter('value', locator.value);
	      return this.schedule_(cmd, 'WebElement.findElements(' + locator + ')');
	    }
	  }

	  /**
	   * Schedules a command to click on this element.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the click command has completed.
	   */
	  click() {
	    return this.schedule_(
	        new command.Command(command.Name.CLICK_ELEMENT),
	        'WebElement.click()');
	  }

	  /**
	   * Schedules a command to type a sequence on the DOM element represented by
	   * this instance.
	   *
	   * Modifier keys (SHIFT, CONTROL, ALT, META) are stateful; once a modifier is
	   * processed in the keysequence, that key state is toggled until one of the
	   * following occurs:
	   *
	   * - The modifier key is encountered again in the sequence. At this point the
	   *   state of the key is toggled (along with the appropriate keyup/down
	   *   events).
	   * - The {@link input.Key.NULL} key is encountered in the sequence. When
	   *   this key is encountered, all modifier keys current in the down state are
	   *   released (with accompanying keyup events). The NULL key can be used to
	   *   simulate common keyboard shortcuts:
	   *
	   *         element.sendKeys("text was",
	   *                          Key.CONTROL, "a", Key.NULL,
	   *                          "now text is");
	   *         // Alternatively:
	   *         element.sendKeys("text was",
	   *                          Key.chord(Key.CONTROL, "a"),
	   *                          "now text is");
	   *
	   * - The end of the keysequence is encountered. When there are no more keys
	   *   to type, all depressed modifier keys are released (with accompanying
	   *   keyup events).
	   *
	   * If this element is a file input ({@code <input type="file">}), the
	   * specified key sequence should specify the path to the file to attach to
	   * the element. This is analgous to the user clicking "Browse..." and entering
	   * the path into the file select dialog.
	   *
	   *     var form = driver.findElement(By.css('form'));
	   *     var element = form.findElement(By.css('input[type=file]'));
	   *     element.sendKeys('/path/to/file.txt');
	   *     form.submit();
	   *
	   * For uploads to function correctly, the entered path must reference a file
	   * on the _browser's_ machine, not the local machine running this script. When
	   * running against a remote Selenium server, a {@link input.FileDetector}
	   * may be used to transparently copy files to the remote machine before
	   * attempting to upload them in the browser.
	   *
	   * __Note:__ On browsers where native keyboard events are not supported
	   * (e.g. Firefox on OS X), key events will be synthesized. Special
	   * punctionation keys will be synthesized according to a standard QWERTY en-us
	   * keyboard layout.
	   *
	   * @param {...(number|string|!IThenable<(number|string)>)} var_args The
	   *     sequence of keys to type. Number keys may be referenced numerically or
	   *     by string (1 or '1'). All arguments will be joined into a single
	   *     sequence.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when all keys have been typed.
	   */
	  sendKeys(var_args) {
	    let keys = Promise.all(Array.prototype.slice.call(arguments, 0)).
	        then(keys => {
	          let ret = [];
	          keys.forEach(key => {
	            let type = typeof key;
	            if (type === 'number') {
	              key = String(key);
	            } else if (type !== 'string') {
	              throw TypeError(
	                  'each key must be a number of string; got ' + type);
	            }

	            // The W3C protocol requires keys to be specified as an array where
	            // each element is a single key.
	            ret.push.apply(ret, key.split(''));
	          });
	          return ret;
	        });

	    if (!this.driver_.fileDetector_) {
	      return this.schedule_(
	          new command.Command(command.Name.SEND_KEYS_TO_ELEMENT).
	              setParameter('value', keys),
	          'WebElement.sendKeys()');
	    }

	    // Suppress unhandled rejection errors until the flow executes the command.
	    keys.catch(function() {});

	    var element = this;
	    return this.getDriver().controlFlow().execute(function() {
	      return keys.then(function(keys) {
	        return element.driver_.fileDetector_
	            .handleFile(element.driver_, keys.join(''));
	      }).then(function(keys) {
	        return element.schedule_(
	            new command.Command(command.Name.SEND_KEYS_TO_ELEMENT).
	                setParameter('value', keys.split('')),
	            'WebElement.sendKeys()');
	      });
	    }, 'WebElement.sendKeys()');
	  }

	  /**
	   * Schedules a command to query for the tag/node name of this element.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the element's tag name.
	   */
	  getTagName() {
	    return this.schedule_(
	        new command.Command(command.Name.GET_ELEMENT_TAG_NAME),
	        'WebElement.getTagName()');
	  }

	  /**
	   * Schedules a command to query for the computed style of the element
	   * represented by this instance. If the element inherits the named style from
	   * its parent, the parent will be queried for its value.  Where possible, color
	   * values will be converted to their hex representation (e.g. #00ff00 instead
	   * of rgb(0, 255, 0)).
	   *
	   * _Warning:_ the value returned will be as the browser interprets it, so
	   * it may be tricky to form a proper assertion.
	   *
	   * @param {string} cssStyleProperty The name of the CSS style property to look
	   *     up.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the requested CSS value.
	   */
	  getCssValue(cssStyleProperty) {
	    var name = command.Name.GET_ELEMENT_VALUE_OF_CSS_PROPERTY;
	    return this.schedule_(
	        new command.Command(name).
	            setParameter('propertyName', cssStyleProperty),
	        'WebElement.getCssValue(' + cssStyleProperty + ')');
	  }

	  /**
	   * Schedules a command to query for the value of the given attribute of the
	   * element. Will return the current value, even if it has been modified after
	   * the page has been loaded. More exactly, this method will return the value
	   * of the given attribute, unless that attribute is not present, in which case
	   * the value of the property with the same name is returned. If neither value
	   * is set, null is returned (for example, the "value" property of a textarea
	   * element). The "style" attribute is converted as best can be to a
	   * text representation with a trailing semi-colon. The following are deemed to
	   * be "boolean" attributes and will return either "true" or null:
	   *
	   * async, autofocus, autoplay, checked, compact, complete, controls, declare,
	   * defaultchecked, defaultselected, defer, disabled, draggable, ended,
	   * formnovalidate, hidden, indeterminate, iscontenteditable, ismap, itemscope,
	   * loop, multiple, muted, nohref, noresize, noshade, novalidate, nowrap, open,
	   * paused, pubdate, readonly, required, reversed, scoped, seamless, seeking,
	   * selected, spellcheck, truespeed, willvalidate
	   *
	   * Finally, the following commonly mis-capitalized attribute/property names
	   * are evaluated as expected:
	   *
	   * - "class"
	   * - "readonly"
	   *
	   * @param {string} attributeName The name of the attribute to query.
	   * @return {!promise.Thenable<?string>} A promise that will be
	   *     resolved with the attribute's value. The returned value will always be
	   *     either a string or null.
	   */
	  getAttribute(attributeName) {
	    return this.schedule_(
	        new command.Command(command.Name.GET_ELEMENT_ATTRIBUTE).
	            setParameter('name', attributeName),
	        'WebElement.getAttribute(' + attributeName + ')');
	  }

	  /**
	   * Get the visible (i.e. not hidden by CSS) innerText of this element,
	   * including sub-elements, without any leading or trailing whitespace.
	   *
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the element's visible text.
	   */
	  getText() {
	    return this.schedule_(
	        new command.Command(command.Name.GET_ELEMENT_TEXT),
	        'WebElement.getText()');
	  }

	  /**
	   * Schedules a command to compute the size of this element's bounding box, in
	   * pixels.
	   * @return {!promise.Thenable<{width: number, height: number}>} A
	   *     promise that will be resolved with the element's size as a
	   *     {@code {width:number, height:number}} object.
	   */
	  getSize() {
	    return this.schedule_(
	        new command.Command(command.Name.GET_ELEMENT_SIZE),
	        'WebElement.getSize()');
	  }

	  /**
	   * Schedules a command to compute the location of this element in page space.
	   * @return {!promise.Thenable<{x: number, y: number}>} A promise that
	   *     will be resolved to the element's location as a
	   *     {@code {x:number, y:number}} object.
	   */
	  getLocation() {
	    return this.schedule_(
	        new command.Command(command.Name.GET_ELEMENT_LOCATION),
	        'WebElement.getLocation()');
	  }

	  /**
	   * Schedules a command to query whether the DOM element represented by this
	   * instance is enabled, as dicted by the {@code disabled} attribute.
	   * @return {!promise.Thenable<boolean>} A promise that will be
	   *     resolved with whether this element is currently enabled.
	   */
	  isEnabled() {
	    return this.schedule_(
	        new command.Command(command.Name.IS_ELEMENT_ENABLED),
	        'WebElement.isEnabled()');
	  }

	  /**
	   * Schedules a command to query whether this element is selected.
	   * @return {!promise.Thenable<boolean>} A promise that will be
	   *     resolved with whether this element is currently selected.
	   */
	  isSelected() {
	    return this.schedule_(
	        new command.Command(command.Name.IS_ELEMENT_SELECTED),
	        'WebElement.isSelected()');
	  }

	  /**
	   * Schedules a command to submit the form containing this element (or this
	   * element if it is a FORM element). This command is a no-op if the element is
	   * not contained in a form.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the form has been submitted.
	   */
	  submit() {
	    return this.schedule_(
	        new command.Command(command.Name.SUBMIT_ELEMENT),
	        'WebElement.submit()');
	  }

	  /**
	   * Schedules a command to clear the `value` of this element. This command has
	   * no effect if the underlying DOM element is neither a text INPUT element
	   * nor a TEXTAREA element.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the element has been cleared.
	   */
	  clear() {
	    return this.schedule_(
	        new command.Command(command.Name.CLEAR_ELEMENT),
	        'WebElement.clear()');
	  }

	  /**
	   * Schedules a command to test whether this element is currently displayed.
	   * @return {!promise.Thenable<boolean>} A promise that will be
	   *     resolved with whether this element is currently visible on the page.
	   */
	  isDisplayed() {
	    return this.schedule_(
	        new command.Command(command.Name.IS_ELEMENT_DISPLAYED),
	        'WebElement.isDisplayed()');
	  }

	  /**
	   * Take a screenshot of the visible region encompassed by this element's
	   * bounding rectangle.
	   *
	   * @param {boolean=} opt_scroll Optional argument that indicates whether the
	   *     element should be scrolled into view before taking a screenshot.
	   *     Defaults to false.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved to the screenshot as a base-64 encoded PNG.
	   */
	  takeScreenshot(opt_scroll) {
	    var scroll = !!opt_scroll;
	    return this.schedule_(
	        new command.Command(command.Name.TAKE_ELEMENT_SCREENSHOT)
	            .setParameter('scroll', scroll),
	        'WebElement.takeScreenshot(' + scroll + ')');
	  }
	}


	/**
	 * WebElementPromise is a promise that will be fulfilled with a WebElement.
	 * This serves as a forward proxy on WebElement, allowing calls to be
	 * scheduled without directly on this instance before the underlying
	 * WebElement has been fulfilled. In other words, the following two statements
	 * are equivalent:
	 *
	 *     driver.findElement({id: 'my-button'}).click();
	 *     driver.findElement({id: 'my-button'}).then(function(el) {
	 *       return el.click();
	 *     });
	 *
	 * @implements {promise.CancellableThenable<!WebElement>}
	 * @final
	 */
	class WebElementPromise extends WebElement {
	  /**
	   * @param {!WebDriver} driver The parent WebDriver instance for this
	   *     element.
	   * @param {!promise.Thenable<!WebElement>} el A promise
	   *     that will resolve to the promised element.
	   */
	  constructor(driver, el) {
	    super(driver, 'unused');

	    /**
	     * Cancel operation is only supported if the wrapped thenable is also
	     * cancellable.
	     * @param {(string|Error)=} opt_reason
	     * @override
	     */
	    this.cancel = function(opt_reason) {
	      if (promise.CancellableThenable.isImplementation(el)) {
	        /** @type {!promise.CancellableThenable} */(el).cancel(opt_reason);
	      }
	    }

	    /** @override */
	    this.then = el.then.bind(el);

	    /** @override */
	    this.catch = el.catch.bind(el);

	    /**
	     * Defers returning the element ID until the wrapped WebElement has been
	     * resolved.
	     * @override
	     */
	    this.getId = function() {
	      return el.then(function(el) {
	        return el.getId();
	      });
	    };
	  }
	}
	promise.CancellableThenable.addImplementation(WebElementPromise);


	//////////////////////////////////////////////////////////////////////////////
	//
	//  Alert
	//
	//////////////////////////////////////////////////////////////////////////////


	/**
	 * Represents a modal dialog such as {@code alert}, {@code confirm}, or
	 * {@code prompt}. Provides functions to retrieve the message displayed with
	 * the alert, accept or dismiss the alert, and set the response text (in the
	 * case of {@code prompt}).
	 */
	class Alert {
	  /**
	   * @param {!WebDriver} driver The driver controlling the browser this alert
	   *     is attached to.
	   * @param {string} text The message text displayed with this alert.
	   */
	  constructor(driver, text) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;

	    /** @private {!promise.Thenable<string>} */
	    this.text_ = driver.controlFlow().promise(resolve => resolve(text));
	  }

	  /**
	   * Retrieves the message text displayed with this alert. For instance, if the
	   * alert were opened with alert("hello"), then this would return "hello".
	   *
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved to the text displayed with this alert.
	   */
	  getText() {
	    return this.text_;
	  }

	  /**
	   * Sets the username and password in an alert prompting for credentials (such
	   * as a Basic HTTP Auth prompt). This method will implicitly
	   * {@linkplain #accept() submit} the dialog.
	   *
	   * @param {string} username The username to send.
	   * @param {string} password The password to send.
	   * @return {!promise.Thenable<void>} A promise that will be resolved when this
	   *     command has completed.
	   */
	  authenticateAs(username, password) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SET_ALERT_CREDENTIALS),
	        'WebDriver.switchTo().alert()'
	            + `.authenticateAs("${username}", "${password}")`);
	  }

	  /**
	   * Accepts this alert.
	   *
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when this command has completed.
	   */
	  accept() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.ACCEPT_ALERT),
	        'WebDriver.switchTo().alert().accept()');
	  }

	  /**
	   * Dismisses this alert.
	   *
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when this command has completed.
	   */
	  dismiss() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.DISMISS_ALERT),
	        'WebDriver.switchTo().alert().dismiss()');
	  }

	  /**
	   * Sets the response text on this alert. This command will return an error if
	   * the underlying alert does not support response text (e.g. window.alert and
	   * window.confirm).
	   *
	   * @param {string} text The text to set.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when this command has completed.
	   */
	  sendKeys(text) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SET_ALERT_TEXT).
	            setParameter('text', text),
	        'WebDriver.switchTo().alert().sendKeys(' + text + ')');
	  }
	}


	/**
	 * AlertPromise is a promise that will be fulfilled with an Alert. This promise
	 * serves as a forward proxy on an Alert, allowing calls to be scheduled
	 * directly on this instance before the underlying Alert has been fulfilled. In
	 * other words, the following two statements are equivalent:
	 *
	 *     driver.switchTo().alert().dismiss();
	 *     driver.switchTo().alert().then(function(alert) {
	 *       return alert.dismiss();
	 *     });
	 *
	 * @implements {promise.CancellableThenable<!webdriver.Alert>}
	 * @final
	 */
	class AlertPromise extends Alert {
	  /**
	   * @param {!WebDriver} driver The driver controlling the browser this
	   *     alert is attached to.
	   * @param {!promise.Thenable<!Alert>} alert A thenable
	   *     that will be fulfilled with the promised alert.
	   */
	  constructor(driver, alert) {
	    super(driver, 'unused');

	    /**
	     * Cancel operation is only supported if the wrapped thenable is also
	     * cancellable.
	     * @param {(string|Error)=} opt_reason
	     * @override
	     */
	    this.cancel = function(opt_reason) {
	      if (promise.CancellableThenable.isImplementation(alert)) {
	        /** @type {!promise.CancellableThenable} */(alert).cancel(opt_reason);
	      }
	    };

	    /** @override */
	    this.then = alert.then.bind(alert);

	    /** @override */
	    this.catch = alert.catch.bind(alert);

	    /**
	     * Defer returning text until the promised alert has been resolved.
	     * @override
	     */
	    this.getText = function() {
	      return alert.then(function(alert) {
	        return alert.getText();
	      });
	    };

	    /**
	     * Defers action until the alert has been located.
	     * @override
	     */
	    this.authenticateAs = function(username, password) {
	      return alert.then(function(alert) {
	        return alert.authenticateAs(username, password);
	      });
	    };

	    /**
	     * Defers action until the alert has been located.
	     * @override
	     */
	    this.accept = function() {
	      return alert.then(function(alert) {
	        return alert.accept();
	      });
	    };

	    /**
	     * Defers action until the alert has been located.
	     * @override
	     */
	    this.dismiss = function() {
	      return alert.then(function(alert) {
	        return alert.dismiss();
	      });
	    };

	    /**
	     * Defers action until the alert has been located.
	     * @override
	     */
	    this.sendKeys = function(text) {
	      return alert.then(function(alert) {
	        return alert.sendKeys(text);
	      });
	    };
	  }
	}
	promise.CancellableThenable.addImplementation(AlertPromise);


	// PUBLIC API


	module.exports = {
	  Alert: Alert,
	  AlertPromise: AlertPromise,
	  Condition: Condition,
	  Logs: Logs,
	  Navigation: Navigation,
	  Options: Options,
	  TargetLocator: TargetLocator,
	  Timeouts: Timeouts,
	  IWebDriver: IWebDriver,
	  WebDriver: WebDriver,
	  WebElement: WebElement,
	  WebElementCondition: WebElementCondition,
	  WebElementPromise: WebElementPromise,
	  Window: Window
	};


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	const command = __webpack_require__(62);
	const error = __webpack_require__(64);
	const input = __webpack_require__(73);


	/**
	 * @param {!IArrayLike} args .
	 * @return {!Array} .
	 */
	function flatten(args) {
	  let result = [];
	  for (let i = 0; i < args.length; i++) {
	    let element = args[i];
	    if (Array.isArray(element)) {
	      result.push.apply(result, flatten(element));
	    } else {
	      result.push(element);
	    }
	  }
	  return result;
	}


	const MODIFIER_KEYS = new Set([
	  input.Key.ALT,
	  input.Key.CONTROL,
	  input.Key.SHIFT,
	  input.Key.COMMAND
	]);


	/**
	 * Checks that a key is a modifier key.
	 * @param {!input.Key} key The key to check.
	 * @throws {error.InvalidArgumentError} If the key is not a modifier key.
	 * @private
	 */
	function checkModifierKey(key) {
	  if (!MODIFIER_KEYS.has(key)) {
	    throw new error.InvalidArgumentError('Not a modifier key');
	  }
	}


	/**
	 * Class for defining sequences of complex user interactions. Each sequence
	 * will not be executed until {@link #perform} is called.
	 *
	 * This class should not be instantiated directly. Instead, obtain an instance
	 * using {@link ./webdriver.WebDriver#actions() WebDriver.actions()}.
	 *
	 * Sample usage:
	 *
	 *     driver.actions().
	 *         keyDown(Key.SHIFT).
	 *         click(element1).
	 *         click(element2).
	 *         dragAndDrop(element3, element4).
	 *         keyUp(Key.SHIFT).
	 *         perform();
	 *
	 */
	class ActionSequence {
	  /**
	   * @param {!./webdriver.WebDriver} driver The driver that should be used to
	   *     perform this action sequence.
	   */
	  constructor(driver) {
	    /** @private {!./webdriver.WebDriver} */
	    this.driver_ = driver;

	    /** @private {!Array<{description: string, command: !command.Command}>} */
	    this.actions_ = [];
	  }

	  /**
	   * Schedules an action to be executed each time {@link #perform} is called on
	   * this instance.
	   *
	   * @param {string} description A description of the command.
	   * @param {!command.Command} command The command.
	   * @private
	   */
	  schedule_(description, command) {
	    this.actions_.push({
	      description: description,
	      command: command
	    });
	  }

	  /**
	   * Executes this action sequence.
	   *
	   * @return {!./promise.Thenable} A promise that will be resolved once
	   *     this sequence has completed.
	   */
	  perform() {
	    // Make a protected copy of the scheduled actions. This will protect against
	    // users defining additional commands before this sequence is actually
	    // executed.
	    let actions = this.actions_.concat();
	    let driver = this.driver_;
	    return driver.controlFlow().execute(function() {
	      let results = actions.map(action => {
	        return driver.schedule(action.command, action.description);
	      });
	      return Promise.all(results);
	    }, 'ActionSequence.perform');
	  }

	  /**
	   * Moves the mouse.  The location to move to may be specified in terms of the
	   * mouse's current location, an offset relative to the top-left corner of an
	   * element, or an element (in which case the middle of the element is used).
	   *
	   * @param {(!./webdriver.WebElement|{x: number, y: number})} location The
	   *     location to drag to, as either another WebElement or an offset in
	   *     pixels.
	   * @param {{x: number, y: number}=} opt_offset If the target {@code location}
	   *     is defined as a {@link ./webdriver.WebElement}, this parameter defines
	   *     an offset within that element. The offset should be specified in pixels
	   *     relative to the top-left corner of the element's bounding box. If
	   *     omitted, the element's center will be used as the target offset.
	   * @return {!ActionSequence} A self reference.
	   */
	  mouseMove(location, opt_offset) {
	    let cmd = new command.Command(command.Name.MOVE_TO);

	    if (typeof location.x === 'number') {
	      setOffset(/** @type {{x: number, y: number}} */(location));
	    } else {
	      cmd.setParameter('element', location.getId());
	      if (opt_offset) {
	        setOffset(opt_offset);
	      }
	    }

	    this.schedule_('mouseMove', cmd);
	    return this;

	    /** @param {{x: number, y: number}} offset The offset to use. */
	    function setOffset(offset) {
	      cmd.setParameter('xoffset', offset.x || 0);
	      cmd.setParameter('yoffset', offset.y || 0);
	    }
	  }

	  /**
	   * Schedules a mouse action.
	   * @param {string} description A simple descriptive label for the scheduled
	   *     action.
	   * @param {!command.Name} commandName The name of the command.
	   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either
	   *     the element to interact with or the button to click with.
	   *     Defaults to {@link input.Button.LEFT} if neither an element nor
	   *     button is specified.
	   * @param {input.Button=} opt_button The button to use. Defaults to
	   *     {@link input.Button.LEFT}. Ignored if the previous argument is
	   *     provided as a button.
	   * @return {!ActionSequence} A self reference.
	   * @private
	   */
	  scheduleMouseAction_(
	      description, commandName, opt_elementOrButton, opt_button) {
	    let button;
	    if (typeof opt_elementOrButton === 'number') {
	      button = opt_elementOrButton;
	    } else {
	      if (opt_elementOrButton) {
	        this.mouseMove(
	            /** @type {!./webdriver.WebElement} */ (opt_elementOrButton));
	      }
	      button = opt_button !== void(0) ? opt_button : input.Button.LEFT;
	    }

	    let cmd = new command.Command(commandName).
	        setParameter('button', button);
	    this.schedule_(description, cmd);
	    return this;
	  }

	  /**
	   * Presses a mouse button. The mouse button will not be released until
	   * {@link #mouseUp} is called, regardless of whether that call is made in this
	   * sequence or another. The behavior for out-of-order events (e.g. mouseDown,
	   * click) is undefined.
	   *
	   * If an element is provided, the mouse will first be moved to the center
	   * of that element. This is equivalent to:
	   *
	   *     sequence.mouseMove(element).mouseDown()
	   *
	   * Warning: this method currently only supports the left mouse button. See
	   * [issue 4047](http://code.google.com/p/selenium/issues/detail?id=4047).
	   *
	   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either
	   *     the element to interact with or the button to click with.
	   *     Defaults to {@link input.Button.LEFT} if neither an element nor
	   *     button is specified.
	   * @param {input.Button=} opt_button The button to use. Defaults to
	   *     {@link input.Button.LEFT}. Ignored if a button is provided as the
	   *     first argument.
	   * @return {!ActionSequence} A self reference.
	   */
	  mouseDown(opt_elementOrButton, opt_button) {
	    return this.scheduleMouseAction_('mouseDown',
	        command.Name.MOUSE_DOWN, opt_elementOrButton, opt_button);
	  }

	  /**
	   * Releases a mouse button. Behavior is undefined for calling this function
	   * without a previous call to {@link #mouseDown}.
	   *
	   * If an element is provided, the mouse will first be moved to the center
	   * of that element. This is equivalent to:
	   *
	   *     sequence.mouseMove(element).mouseUp()
	   *
	   * Warning: this method currently only supports the left mouse button. See
	   * [issue 4047](http://code.google.com/p/selenium/issues/detail?id=4047).
	   *
	   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either
	   *     the element to interact with or the button to click with.
	   *     Defaults to {@link input.Button.LEFT} if neither an element nor
	   *     button is specified.
	   * @param {input.Button=} opt_button The button to use. Defaults to
	   *     {@link input.Button.LEFT}. Ignored if a button is provided as the
	   *     first argument.
	   * @return {!ActionSequence} A self reference.
	   */
	  mouseUp(opt_elementOrButton, opt_button) {
	    return this.scheduleMouseAction_('mouseUp',
	        command.Name.MOUSE_UP, opt_elementOrButton, opt_button);
	  }

	  /**
	   * Convenience function for performing a "drag and drop" manuever. The target
	   * element may be moved to the location of another element, or by an offset (in
	   * pixels).
	   *
	   * @param {!./webdriver.WebElement} element The element to drag.
	   * @param {(!./webdriver.WebElement|{x: number, y: number})} location The
	   *     location to drag to, either as another WebElement or an offset in
	   *     pixels.
	   * @return {!ActionSequence} A self reference.
	   */
	  dragAndDrop(element, location) {
	    return this.mouseDown(element).mouseMove(location).mouseUp();
	  }

	  /**
	   * Clicks a mouse button.
	   *
	   * If an element is provided, the mouse will first be moved to the center
	   * of that element. This is equivalent to:
	   *
	   *     sequence.mouseMove(element).click()
	   *
	   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either
	   *     the element to interact with or the button to click with.
	   *     Defaults to {@link input.Button.LEFT} if neither an element nor
	   *     button is specified.
	   * @param {input.Button=} opt_button The button to use. Defaults to
	   *     {@link input.Button.LEFT}. Ignored if a button is provided as the
	   *     first argument.
	   * @return {!ActionSequence} A self reference.
	   */
	  click(opt_elementOrButton, opt_button) {
	    return this.scheduleMouseAction_('click',
	        command.Name.CLICK, opt_elementOrButton, opt_button);
	  }

	  /**
	   * Double-clicks a mouse button.
	   *
	   * If an element is provided, the mouse will first be moved to the center of
	   * that element. This is equivalent to:
	   *
	   *     sequence.mouseMove(element).doubleClick()
	   *
	   * Warning: this method currently only supports the left mouse button. See
	   * [issue 4047](http://code.google.com/p/selenium/issues/detail?id=4047).
	   *
	   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either
	   *     the element to interact with or the button to click with.
	   *     Defaults to {@link input.Button.LEFT} if neither an element nor
	   *     button is specified.
	   * @param {input.Button=} opt_button The button to use. Defaults to
	   *     {@link input.Button.LEFT}. Ignored if a button is provided as the
	   *     first argument.
	   * @return {!ActionSequence} A self reference.
	   */
	  doubleClick(opt_elementOrButton, opt_button) {
	    return this.scheduleMouseAction_('doubleClick',
	        command.Name.DOUBLE_CLICK, opt_elementOrButton, opt_button);
	  }

	  /**
	   * Schedules a keyboard action.
	   *
	   * @param {string} description A simple descriptive label for the scheduled
	   *     action.
	   * @param {!Array<(string|!input.Key)>} keys The keys to send.
	   * @return {!ActionSequence} A self reference.
	   * @private
	   */
	  scheduleKeyboardAction_(description, keys) {
	    let cmd = new command.Command(command.Name.SEND_KEYS_TO_ACTIVE_ELEMENT)
	        .setParameter('value', keys);
	    this.schedule_(description, cmd);
	    return this;
	  }

	  /**
	   * Performs a modifier key press. The modifier key is <em>not released</em>
	   * until {@link #keyUp} or {@link #sendKeys} is called. The key press will be
	   * targetted at the currently focused element.
	   *
	   * @param {!input.Key} key The modifier key to push. Must be one of
	   *     {ALT, CONTROL, SHIFT, COMMAND, META}.
	   * @return {!ActionSequence} A self reference.
	   * @throws {error.InvalidArgumentError} If the key is not a valid modifier
	   *     key.
	   */
	  keyDown(key) {
	    checkModifierKey(key);
	    return this.scheduleKeyboardAction_('keyDown', [key]);
	  }

	  /**
	   * Performs a modifier key release. The release is targetted at the currently
	   * focused element.
	   * @param {!input.Key} key The modifier key to release. Must be one of
	   *     {ALT, CONTROL, SHIFT, COMMAND, META}.
	   * @return {!ActionSequence} A self reference.
	   * @throws {error.InvalidArgumentError} If the key is not a valid modifier
	   *     key.
	   */
	  keyUp(key) {
	    checkModifierKey(key);
	    return this.scheduleKeyboardAction_('keyUp', [key]);
	  }

	  /**
	   * Simulates typing multiple keys. Each modifier key encountered in the
	   * sequence will not be released until it is encountered again. All key events
	   * will be targetted at the currently focused element.
	   *
	   * @param {...(string|!input.Key|!Array<(string|!input.Key)>)} var_args
	   *     The keys to type.
	   * @return {!ActionSequence} A self reference.
	   * @throws {Error} If the key is not a valid modifier key.
	   */
	  sendKeys(var_args) {
	    let keys = flatten(arguments);
	    return this.scheduleKeyboardAction_('sendKeys', keys);
	  }
	}


	/**
	 * Class for defining sequences of user touch interactions. Each sequence
	 * will not be executed until {@link #perform} is called.
	 *
	 * This class should not be instantiated directly. Instead, obtain an instance
	 * using {@link ./webdriver.WebDriver#touchActions() WebDriver.touchActions()}.
	 *
	 * Sample usage:
	 *
	 *     driver.touchActions().
	 *         tapAndHold({x: 0, y: 0}).
	 *         move({x: 3, y: 4}).
	 *         release({x: 10, y: 10}).
	 *         perform();
	 *
	 */
	class TouchSequence {
	  /**
	   * @param {!./webdriver.WebDriver} driver The driver that should be used to
	   *     perform this action sequence.
	   */
	  constructor(driver) {
	    /** @private {!./webdriver.WebDriver} */
	    this.driver_ = driver;

	    /** @private {!Array<{description: string, command: !command.Command}>} */
	    this.actions_ = [];
	  }

	  /**
	   * Schedules an action to be executed each time {@link #perform} is called on
	   * this instance.
	   * @param {string} description A description of the command.
	   * @param {!command.Command} command The command.
	   * @private
	   */
	  schedule_(description, command) {
	    this.actions_.push({
	      description: description,
	      command: command
	    });
	  }

	  /**
	   * Executes this action sequence.
	   * @return {!./promise.Thenable} A promise that will be resolved once
	   *     this sequence has completed.
	   */
	  perform() {
	    // Make a protected copy of the scheduled actions. This will protect against
	    // users defining additional commands before this sequence is actually
	    // executed.
	    let actions = this.actions_.concat();
	    let driver = this.driver_;
	    return driver.controlFlow().execute(function() {
	      let results = actions.map(action => {
	        return driver.schedule(action.command, action.description);
	      });
	      return Promise.all(results);
	    }, 'TouchSequence.perform');
	  }

	  /**
	   * Taps an element.
	   *
	   * @param {!./webdriver.WebElement} elem The element to tap.
	   * @return {!TouchSequence} A self reference.
	   */
	  tap(elem) {
	    let cmd = new command.Command(command.Name.TOUCH_SINGLE_TAP).
	        setParameter('element', elem.getId());

	    this.schedule_('tap', cmd);
	    return this;
	  }

	  /**
	   * Double taps an element.
	   *
	   * @param {!./webdriver.WebElement} elem The element to double tap.
	   * @return {!TouchSequence} A self reference.
	   */
	  doubleTap(elem) {
	    let cmd = new command.Command(command.Name.TOUCH_DOUBLE_TAP).
	        setParameter('element', elem.getId());

	    this.schedule_('doubleTap', cmd);
	    return this;
	  }

	  /**
	   * Long press on an element.
	   *
	   * @param {!./webdriver.WebElement} elem The element to long press.
	   * @return {!TouchSequence} A self reference.
	   */
	  longPress(elem) {
	    let cmd = new command.Command(command.Name.TOUCH_LONG_PRESS).
	        setParameter('element', elem.getId());

	    this.schedule_('longPress', cmd);
	    return this;
	  }

	  /**
	   * Touch down at the given location.
	   *
	   * @param {{x: number, y: number}} location The location to touch down at.
	   * @return {!TouchSequence} A self reference.
	   */
	  tapAndHold(location) {
	    let cmd = new command.Command(command.Name.TOUCH_DOWN).
	        setParameter('x', location.x).
	        setParameter('y', location.y);

	    this.schedule_('tapAndHold', cmd);
	    return this;
	  }

	  /**
	   * Move a held {@linkplain #tapAndHold touch} to the specified location.
	   *
	   * @param {{x: number, y: number}} location The location to move to.
	   * @return {!TouchSequence} A self reference.
	   */
	  move(location) {
	    let cmd = new command.Command(command.Name.TOUCH_MOVE).
	        setParameter('x', location.x).
	        setParameter('y', location.y);

	    this.schedule_('move', cmd);
	    return this;
	  }

	  /**
	   * Release a held {@linkplain #tapAndHold touch} at the specified location.
	   *
	   * @param {{x: number, y: number}} location The location to release at.
	   * @return {!TouchSequence} A self reference.
	   */
	  release(location) {
	    let cmd = new command.Command(command.Name.TOUCH_UP).
	        setParameter('x', location.x).
	        setParameter('y', location.y);

	    this.schedule_('release', cmd);
	    return this;
	  }

	  /**
	   * Scrolls the touch screen by the given offset.
	   *
	   * @param {{x: number, y: number}} offset The offset to scroll to.
	   * @return {!TouchSequence} A self reference.
	   */
	  scroll(offset) {
	    let cmd = new command.Command(command.Name.TOUCH_SCROLL).
	        setParameter('xoffset', offset.x).
	        setParameter('yoffset', offset.y);

	    this.schedule_('scroll', cmd);
	    return this;
	  }

	  /**
	   * Scrolls the touch screen, starting on `elem` and moving by the specified
	   * offset.
	   *
	   * @param {!./webdriver.WebElement} elem The element where scroll starts.
	   * @param {{x: number, y: number}} offset The offset to scroll to.
	   * @return {!TouchSequence} A self reference.
	   */
	  scrollFromElement(elem, offset) {
	    let cmd = new command.Command(command.Name.TOUCH_SCROLL).
	        setParameter('element', elem.getId()).
	        setParameter('xoffset', offset.x).
	        setParameter('yoffset', offset.y);

	    this.schedule_('scrollFromElement', cmd);
	    return this;
	  }

	  /**
	   * Flick, starting anywhere on the screen, at speed xspeed and yspeed.
	   *
	   * @param {{xspeed: number, yspeed: number}} speed The speed to flick in each
	         direction, in pixels per second.
	   * @return {!TouchSequence} A self reference.
	   */
	  flick(speed) {
	    let cmd = new command.Command(command.Name.TOUCH_FLICK).
	        setParameter('xspeed', speed.xspeed).
	        setParameter('yspeed', speed.yspeed);

	    this.schedule_('flick', cmd);
	    return this;
	  }

	  /**
	   * Flick starting at elem and moving by x and y at specified speed.
	   *
	   * @param {!./webdriver.WebElement} elem The element where flick starts.
	   * @param {{x: number, y: number}} offset The offset to flick to.
	   * @param {number} speed The speed to flick at in pixels per second.
	   * @return {!TouchSequence} A self reference.
	   */
	  flickElement(elem, offset, speed) {
	    let cmd = new command.Command(command.Name.TOUCH_FLICK).
	        setParameter('element', elem.getId()).
	        setParameter('xoffset', offset.x).
	        setParameter('yoffset', offset.y).
	        setParameter('speed', speed);

	    this.schedule_('flickElement', cmd);
	    return this;
	  }
	}


	// PUBLIC API

	module.exports = {
	  ActionSequence: ActionSequence,
	  TouchSequence: TouchSequence,
	};


/***/ },
/* 73 */
/***/ function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * @fileoverview Defines types related to user input with the WebDriver API.
	 */


	/**
	 * Enumeration of the buttons used in the advanced interactions API.
	 * @enum {number}
	 */
	const Button = {
	  LEFT: 0,
	  MIDDLE: 1,
	  RIGHT: 2
	};



	/**
	 * Representations of pressable keys that aren't text.  These are stored in
	 * the Unicode PUA (Private Use Area) code points, 0xE000-0xF8FF.  Refer to
	 * http://www.google.com.au/search?&q=unicode+pua&btnG=Search
	 *
	 * @enum {string}
	 */
	const Key = {
	  NULL:         '\uE000',
	  CANCEL:       '\uE001',  // ^break
	  HELP:         '\uE002',
	  BACK_SPACE:   '\uE003',
	  TAB:          '\uE004',
	  CLEAR:        '\uE005',
	  RETURN:       '\uE006',
	  ENTER:        '\uE007',
	  SHIFT:        '\uE008',
	  CONTROL:      '\uE009',
	  ALT:          '\uE00A',
	  PAUSE:        '\uE00B',
	  ESCAPE:       '\uE00C',
	  SPACE:        '\uE00D',
	  PAGE_UP:      '\uE00E',
	  PAGE_DOWN:    '\uE00F',
	  END:          '\uE010',
	  HOME:         '\uE011',
	  ARROW_LEFT:   '\uE012',
	  LEFT:         '\uE012',
	  ARROW_UP:     '\uE013',
	  UP:           '\uE013',
	  ARROW_RIGHT:  '\uE014',
	  RIGHT:        '\uE014',
	  ARROW_DOWN:   '\uE015',
	  DOWN:         '\uE015',
	  INSERT:       '\uE016',
	  DELETE:       '\uE017',
	  SEMICOLON:    '\uE018',
	  EQUALS:       '\uE019',

	  NUMPAD0:      '\uE01A',  // number pad keys
	  NUMPAD1:      '\uE01B',
	  NUMPAD2:      '\uE01C',
	  NUMPAD3:      '\uE01D',
	  NUMPAD4:      '\uE01E',
	  NUMPAD5:      '\uE01F',
	  NUMPAD6:      '\uE020',
	  NUMPAD7:      '\uE021',
	  NUMPAD8:      '\uE022',
	  NUMPAD9:      '\uE023',
	  MULTIPLY:     '\uE024',
	  ADD:          '\uE025',
	  SEPARATOR:    '\uE026',
	  SUBTRACT:     '\uE027',
	  DECIMAL:      '\uE028',
	  DIVIDE:       '\uE029',

	  F1:           '\uE031',  // function keys
	  F2:           '\uE032',
	  F3:           '\uE033',
	  F4:           '\uE034',
	  F5:           '\uE035',
	  F6:           '\uE036',
	  F7:           '\uE037',
	  F8:           '\uE038',
	  F9:           '\uE039',
	  F10:          '\uE03A',
	  F11:          '\uE03B',
	  F12:          '\uE03C',

	  COMMAND:      '\uE03D',  // Apple command key
	  META:         '\uE03D'   // alias for Windows key
	};


	/**
	 * Simulate pressing many keys at once in a "chord". Takes a sequence of
	 * {@linkplain Key keys} or strings, appends each of the values to a string,
	 * adds the chord termination key ({@link Key.NULL}) and returns the resulting
	 * string.
	 *
	 * Note: when the low-level webdriver key handlers see Keys.NULL, active
	 * modifier keys (CTRL/ALT/SHIFT/etc) release via a keyup event.
	 *
	 * @param {...string} var_args The key sequence to concatenate.
	 * @return {string} The null-terminated key sequence.
	 */
	Key.chord = function(var_args) {
	  return Array.prototype.slice.call(arguments, 0).join('') + Key.NULL;
	};


	/**
	 * Used with {@link ./webelement.WebElement#sendKeys WebElement#sendKeys} on
	 * file input elements (`<input type="file">`) to detect when the entered key
	 * sequence defines the path to a file.
	 *
	 * By default, {@linkplain ./webelement.WebElement WebElement's} will enter all
	 * key sequences exactly as entered. You may set a
	 * {@linkplain ./webdriver.WebDriver#setFileDetector file detector} on the
	 * parent WebDriver instance to define custom behavior for handling file
	 * elements. Of particular note is the
	 * {@link selenium-webdriver/remote.FileDetector}, which should be used when
	 * running against a remote
	 * [Selenium Server](http://docs.seleniumhq.org/download/).
	 */
	class FileDetector {

	  /**
	   * Handles the file specified by the given path, preparing it for use with
	   * the current browser. If the path does not refer to a valid file, it will
	   * be returned unchanged, otherwisee a path suitable for use with the current
	   * browser will be returned.
	   *
	   * This default implementation is a no-op. Subtypes may override this function
	   * for custom tailored file handling.
	   *
	   * @param {!./webdriver.WebDriver} driver The driver for the current browser.
	   * @param {string} path The path to process.
	   * @return {!Promise<string>} A promise for the processed file path.
	   * @package
	   */
	  handleFile(driver, path) {
	    return Promise.resolve(path);
	  }
	}


	// PUBLIC API


	module.exports = {
	  Button: Button,
	  Key: Key,
	  FileDetector: FileDetector
	};


/***/ },
/* 74 */
/***/ function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * @fileoverview Factory methods for the supported locator strategies.
	 */

	/**
	 * Short-hand expressions for the primary element locator strategies.
	 * For example the following two statements are equivalent:
	 *
	 *     var e1 = driver.findElement(By.id('foo'));
	 *     var e2 = driver.findElement({id: 'foo'});
	 *
	 * Care should be taken when using JavaScript minifiers (such as the
	 * Closure compiler), as locator hashes will always be parsed using
	 * the un-obfuscated properties listed.
	 *
	 * @typedef {(
	 *     {className: string}|
	 *     {css: string}|
	 *     {id: string}|
	 *     {js: string}|
	 *     {linkText: string}|
	 *     {name: string}|
	 *     {partialLinkText: string}|
	 *     {tagName: string}|
	 *     {xpath: string})}
	 */
	var ByHash;


	/**
	 * Error thrown if an invalid character is encountered while escaping a CSS
	 * identifier.
	 * @see https://drafts.csswg.org/cssom/#serialize-an-identifier
	 */
	class InvalidCharacterError extends Error {
	  constructor() {
	    super();
	    this.name = this.constructor.name;
	  }
	}


	/**
	 * Escapes a CSS string.
	 * @param {string} css the string to escape.
	 * @return {string} the escaped string.
	 * @throws {TypeError} if the input value is not a string.
	 * @throws {InvalidCharacterError} if the string contains an invalid character.
	 * @see https://drafts.csswg.org/cssom/#serialize-an-identifier
	 */
	function escapeCss(css) {
	  if (typeof css !== 'string') {
	    throw new TypeError('input must be a string');
	  }
	  let ret = '';
	  const n = css.length;
	  for (let i = 0; i  < n; i++) {
	    const c = css.charCodeAt(i);
	    if (c == 0x0) {
	      throw new InvalidCharacterError();
	    }

	    if ((c >= 0x0001 && c <= 0x001F)
	        || c == 0x007F
	        || (i == 0 && c >= 0x0030 && c <= 0x0039)
	        || (i == 1 && c >= 0x0030 && c <= 0x0039
	            && css.charCodeAt(0) == 0x002D)) {
	      ret += '\\' + c.toString(16) + ' ';
	      continue;
	    }

	    if (i == 0 && c == 0x002D && n == 1) {
	      ret += '\\' + css.charAt(i);
	      continue;
	    }

	    if (c >= 0x0080
	        || c == 0x002D                      // -
	        || c == 0x005F                      // _
	        || (c >= 0x0030 && c <= 0x0039)     // [0-9]
	        || (c >= 0x0041 && c <= 0x005A)     // [A-Z]
	        || (c >= 0x0061 && c <= 0x007A)) {  // [a-z]
	      ret += css.charAt(i);
	      continue;
	    }

	    ret += '\\' + css.charAt(i);
	  }
	  return ret;
	}


	/**
	 * Describes a mechanism for locating an element on the page.
	 * @final
	 */
	class By {
	  /**
	   * @param {string} using the name of the location strategy to use.
	   * @param {string} value the value to search for.
	   */
	  constructor(using, value) {
	    /** @type {string} */
	    this.using = using;

	    /** @type {string} */
	    this.value = value;
	  }

	  /**
	   * Locates elements that have a specific class name.
	   *
	   * @param {string} name The class name to search for.
	   * @return {!By} The new locator.
	   * @see http://www.w3.org/TR/2011/WD-html5-20110525/elements.html#classes
	   * @see http://www.w3.org/TR/CSS2/selector.html#class-html
	   */
	  static className(name) {
	    let names = name.split(/\s+/g)
	        .filter(s => s.length > 0)
	        .map(s => escapeCss(s));
	    return By.css('.' + names.join('.'));
	  }

	  /**
	   * Locates elements using a CSS selector.
	   *
	   * @param {string} selector The CSS selector to use.
	   * @return {!By} The new locator.
	   * @see http://www.w3.org/TR/CSS2/selector.html
	   */
	  static css(selector) {
	    return new By('css selector', selector);
	  }

	  /**
	   * Locates eleemnts by the ID attribute. This locator uses the CSS selector
	   * `*[id="$ID"]`, _not_ `document.getElementById`.
	   *
	   * @param {string} id The ID to search for.
	   * @return {!By} The new locator.
	   */
	  static id(id) {
	    return By.css('*[id="' + escapeCss(id) + '"]');
	  }

	  /**
	   * Locates link elements whose
	   * {@linkplain webdriver.WebElement#getText visible text} matches the given
	   * string.
	   *
	   * @param {string} text The link text to search for.
	   * @return {!By} The new locator.
	   */
	  static linkText(text) {
	    return new By('link text', text);
	  }

	  /**
	   * Locates an elements by evaluating a
	   * {@linkplain webdriver.WebDriver#executeScript JavaScript expression}.
	   * The result of this expression must be an element or list of elements.
	   *
	   * @param {!(string|Function)} script The script to execute.
	   * @param {...*} var_args The arguments to pass to the script.
	   * @return {function(!./webdriver.WebDriver): !./promise.Promise}
	   *     A new JavaScript-based locator function.
	   */
	  static js(script, var_args) {
	    let args = Array.prototype.slice.call(arguments, 0);
	    return function(driver) {
	      return driver.executeScript.apply(driver, args);
	    };
	  }

	  /**
	   * Locates elements whose `name` attribute has the given value.
	   *
	   * @param {string} name The name attribute to search for.
	   * @return {!By} The new locator.
	   */
	  static name(name) {
	    return By.css('*[name="' + escapeCss(name) + '"]');
	  }

	  /**
	   * Locates link elements whose
	   * {@linkplain webdriver.WebElement#getText visible text} contains the given
	   * substring.
	   *
	   * @param {string} text The substring to check for in a link's visible text.
	   * @return {!By} The new locator.
	   */
	  static partialLinkText(text) {
	    return new By('partial link text', text);
	  }

	  /**
	   * Locates elements with a given tag name.
	   *
	   * @param {string} name The tag name to search for.
	   * @return {!By} The new locator.
	   * @deprecated Use {@link By.css() By.css(tagName)} instead.
	   */
	  static tagName(name) {
	    return By.css(name);
	  }

	  /**
	   * Locates elements matching a XPath selector. Care should be taken when
	   * using an XPath selector with a {@link webdriver.WebElement} as WebDriver
	   * will respect the context in the specified in the selector. For example,
	   * given the selector `//div`, WebDriver will search from the document root
	   * regardless of whether the locator was used with a WebElement.
	   *
	   * @param {string} xpath The XPath selector to use.
	   * @return {!By} The new locator.
	   * @see http://www.w3.org/TR/xpath/
	   */
	  static xpath(xpath) {
	    return new By('xpath', xpath);
	  }

	  /** @override */
	  toString() {
	    // The static By.name() overrides this.constructor.name.  Shame...
	    return `By(${this.using}, ${this.value})`;
	  }
	}


	/**
	 * Checks if a value is a valid locator.
	 * @param {!(By|Function|ByHash)} locator The value to check.
	 * @return {!(By|Function)} The valid locator.
	 * @throws {TypeError} If the given value does not define a valid locator
	 *     strategy.
	 */
	function check(locator) {
	  if (locator instanceof By || typeof locator === 'function') {
	    return locator;
	  }
	  for (let key in locator) {
	    if (locator.hasOwnProperty(key) && By.hasOwnProperty(key)) {
	      return By[key](locator[key]);
	    }
	  }
	  throw new TypeError('Invalid locator');
	}



	// PUBLIC API

	module.exports = {
	  By: By,
	  checkedLocator: check,
	};


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    path = __webpack_require__(61),
	    rimraf = __webpack_require__(76),
	    tmp = __webpack_require__(90);


	/**
	 * @param {!Function} fn .
	 * @return {!Promise<T>} .
	 * @template T
	 */
	function checkedCall(fn) {
	  return new Promise((resolve, reject) => {
	    try {
	      fn((err, value) => {
	        if (err) {
	          reject(err);
	        } else {
	          resolve(value);
	        }
	      });
	    } catch (e) {
	      reject(e);
	    }
	  });
	}



	// PUBLIC API



	/**
	 * Recursively removes a directory and all of its contents. This is equivalent
	 * to {@code rm -rf} on a POSIX system.
	 * @param {string} dirPath Path to the directory to remove.
	 * @return {!Promise} A promise to be resolved when the operation has
	 *     completed.
	 */
	exports.rmDir = function(dirPath) {
	  return new Promise(function(fulfill, reject) {
	    var numAttempts = 0;
	    attemptRm();
	    function attemptRm() {
	      numAttempts += 1;
	      rimraf(dirPath, function(err) {
	        if (err) {
	          if (err.code && err.code === 'ENOTEMPTY' && numAttempts < 2) {
	            attemptRm();
	            return;
	          }
	          reject(err);
	        } else {
	          fulfill();
	        }
	      });
	    }
	  });
	};


	/**
	 * Copies one file to another.
	 * @param {string} src The source file.
	 * @param {string} dst The destination file.
	 * @return {!Promise<string>} A promise for the copied file's path.
	 */
	exports.copy = function(src, dst) {
	  return new Promise(function(fulfill, reject) {
	    var rs = fs.createReadStream(src);
	    rs.on('error', reject);
	    rs.on('end', () => fulfill(dst));

	    var ws = fs.createWriteStream(dst);
	    ws.on('error', reject);

	    rs.pipe(ws);
	  });
	};


	/**
	 * Recursively copies the contents of one directory to another.
	 * @param {string} src The source directory to copy.
	 * @param {string} dst The directory to copy into.
	 * @param {(RegExp|function(string): boolean)=} opt_exclude An exclusion filter
	 *     as either a regex or predicate function. All files matching this filter
	 *     will not be copied.
	 * @return {!Promise<string>} A promise for the destination
	 *     directory's path once all files have been copied.
	 */
	exports.copyDir = function(src, dst, opt_exclude) {
	  var predicate = opt_exclude;
	  if (opt_exclude && typeof opt_exclude !== 'function') {
	    predicate = function(p) {
	      return !opt_exclude.test(p);
	    };
	  }

	  // TODO(jleyba): Make this function completely async.
	  if (!fs.existsSync(dst)) {
	    fs.mkdirSync(dst);
	  }

	  var files = fs.readdirSync(src);
	  files = files.map(function(file) {
	    return path.join(src, file);
	  });

	  if (predicate) {
	    files = files.filter(/** @type {function(string): boolean} */(predicate));
	  }

	  var results = [];
	  files.forEach(function(file) {
	    var stats = fs.statSync(file);
	    var target = path.join(dst, path.basename(file));

	    if (stats.isDirectory()) {
	      if (!fs.existsSync(target)) {
	        fs.mkdirSync(target, stats.mode);
	      }
	      results.push(exports.copyDir(file, target, predicate));
	    } else {
	      results.push(exports.copy(file, target));
	    }
	  });

	  return Promise.all(results).then(() => dst);
	};


	/**
	 * Tests if a file path exists.
	 * @param {string} aPath The path to test.
	 * @return {!Promise<boolean>} A promise for whether the file exists.
	 */
	exports.exists = function(aPath) {
	  return new Promise(function(fulfill, reject) {
	    let type = typeof aPath;
	    if (type !== 'string') {
	      reject(TypeError(`expected string path, but got ${type}`));
	    } else {
	      fs.exists(aPath, fulfill);
	    }
	  });
	};


	/**
	 * Calls `stat(2)`.
	 * @param {string} aPath The path to stat.
	 * @return {!Promise<!fs.Stats>} A promise for the file stats.
	 */
	exports.stat = function stat(aPath) {
	  return checkedCall(callback => fs.stat(aPath, callback));
	};


	/**
	 * Deletes a name from the filesystem and possibly the file it refers to. Has
	 * no effect if the file does not exist.
	 * @param {string} aPath The path to remove.
	 * @return {!Promise} A promise for when the file has been removed.
	 */
	exports.unlink = function(aPath) {
	  return new Promise(function(fulfill, reject) {
	    fs.exists(aPath, function(exists) {
	      if (exists) {
	        fs.unlink(aPath, function(err) {
	          err && reject(err) || fulfill();
	        });
	      } else {
	        fulfill();
	      }
	    });
	  });
	};


	/**
	 * @return {!Promise<string>} A promise for the path to a temporary directory.
	 * @see https://www.npmjs.org/package/tmp
	 */
	exports.tmpDir = function() {
	  return checkedCall(tmp.dir);
	};


	/**
	 * @param {{postfix: string}=} opt_options Temporary file options.
	 * @return {!Promise<string>} A promise for the path to a temporary file.
	 * @see https://www.npmjs.org/package/tmp
	 */
	exports.tmpFile = function(opt_options) {
	  return checkedCall(callback => {
	    // |tmp.file| checks arguments length to detect options rather than doing a
	    // truthy check, so we must only pass options if there are some to pass.
	    if (opt_options) {
	      tmp.file(opt_options, callback);
	    } else {
	      tmp.file(callback);
	    }
	  });
	};


	/**
	 * Searches the {@code PATH} environment variable for the given file.
	 * @param {string} file The file to locate on the PATH.
	 * @param {boolean=} opt_checkCwd Whether to always start with the search with
	 *     the current working directory, regardless of whether it is explicitly
	 *     listed on the PATH.
	 * @return {?string} Path to the located file, or {@code null} if it could
	 *     not be found.
	 */
	exports.findInPath = function(file, opt_checkCwd) {
	  let dirs = [];
	  if (opt_checkCwd) {
	    dirs.push(process.cwd());
	  }
	  dirs.push.apply(dirs, process.env['PATH'].split(path.delimiter));

	  let foundInDir = dirs.find(dir => {
	    let tmp = path.join(dir, file);
	    try {
	      let stats = fs.statSync(tmp);
	      return stats.isFile() && !stats.isDirectory();
	    } catch (ex) {
	      return false;
	    }
	  });

	  return foundInDir ? path.join(foundInDir, file) : null;
	};


	/**
	 * Reads the contents of the given file.
	 *
	 * @param {string} aPath Path to the file to read.
	 * @return {!Promise<!Buffer>} A promise that will resolve with a buffer of the
	 *     file contents.
	 */
	exports.read = function(aPath) {
	  return checkedCall(callback => fs.readFile(aPath, callback));
	};


	/**
	 * Writes to a file.
	 *
	 * @param {string} aPath Path to the file to write to.
	 * @param {(string|!Buffer)} data The data to write.
	 * @return {!Promise} A promise that will resolve when the operation has
	 *     completed.
	 */
	exports.write = function(aPath, data) {
	  return checkedCall(callback => fs.writeFile(aPath, data, callback));
	};


	/**
	 * Creates a directory.
	 *
	 * @param {string} aPath The directory path.
	 * @return {!Promise<string>} A promise that will resolve with the path of the
	 *     created directory.
	 */
	exports.mkdir = function(aPath) {
	  return checkedCall(callback => {
	    fs.mkdir(aPath, undefined, err => {
	      if (err && err.code !== 'EEXIST') {
	        callback(err);
	      } else {
	        callback(null, aPath);
	      }
	    });
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {module.exports = rimraf
	rimraf.sync = rimrafSync

	var assert = __webpack_require__(11)
	var path = __webpack_require__(61)
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	var glob = __webpack_require__(77)

	var defaultGlobOpts = {
	  nosort: true,
	  silent: true
	}

	// for EMFILE handling
	var timeout = 0

	var isWindows = (process.platform === "win32")

	function defaults (options) {
	  var methods = [
	    'unlink',
	    'chmod',
	    'stat',
	    'lstat',
	    'rmdir',
	    'readdir'
	  ]
	  methods.forEach(function(m) {
	    options[m] = options[m] || fs[m]
	    m = m + 'Sync'
	    options[m] = options[m] || fs[m]
	  })

	  options.maxBusyTries = options.maxBusyTries || 3
	  options.emfileWait = options.emfileWait || 1000
	  if (options.glob === false) {
	    options.disableGlob = true
	  }
	  options.disableGlob = options.disableGlob || false
	  options.glob = options.glob || defaultGlobOpts
	}

	function rimraf (p, options, cb) {
	  if (typeof options === 'function') {
	    cb = options
	    options = {}
	  }

	  assert(p, 'rimraf: missing path')
	  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
	  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
	  assert(options, 'rimraf: invalid options argument provided')
	  assert.equal(typeof options, 'object', 'rimraf: options should be object')

	  defaults(options)

	  var busyTries = 0
	  var errState = null
	  var n = 0

	  if (options.disableGlob || !glob.hasMagic(p))
	    return afterGlob(null, [p])

	  options.lstat(p, function (er, stat) {
	    if (!er)
	      return afterGlob(null, [p])

	    glob(p, options.glob, afterGlob)
	  })

	  function next (er) {
	    errState = errState || er
	    if (--n === 0)
	      cb(errState)
	  }

	  function afterGlob (er, results) {
	    if (er)
	      return cb(er)

	    n = results.length
	    if (n === 0)
	      return cb()

	    results.forEach(function (p) {
	      rimraf_(p, options, function CB (er) {
	        if (er) {
	          if (isWindows && (er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
	              busyTries < options.maxBusyTries) {
	            busyTries ++
	            var time = busyTries * 100
	            // try again, with the same exact callback as this one.
	            return setTimeout(function () {
	              rimraf_(p, options, CB)
	            }, time)
	          }

	          // this one won't happen if graceful-fs is used.
	          if (er.code === "EMFILE" && timeout < options.emfileWait) {
	            return setTimeout(function () {
	              rimraf_(p, options, CB)
	            }, timeout ++)
	          }

	          // already gone
	          if (er.code === "ENOENT") er = null
	        }

	        timeout = 0
	        next(er)
	      })
	    })
	  }
	}

	// Two possible strategies.
	// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
	// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
	//
	// Both result in an extra syscall when you guess wrong.  However, there
	// are likely far more normal files in the world than directories.  This
	// is based on the assumption that a the average number of files per
	// directory is >= 1.
	//
	// If anyone ever complains about this, then I guess the strategy could
	// be made configurable somehow.  But until then, YAGNI.
	function rimraf_ (p, options, cb) {
	  assert(p)
	  assert(options)
	  assert(typeof cb === 'function')

	  // sunos lets the root user unlink directories, which is... weird.
	  // so we have to lstat here and make sure it's not a dir.
	  options.lstat(p, function (er, st) {
	    if (er && er.code === "ENOENT")
	      return cb(null)

	    // Windows can EPERM on stat.  Life is suffering.
	    if (er && er.code === "EPERM" && isWindows)
	      fixWinEPERM(p, options, er, cb)

	    if (st && st.isDirectory())
	      return rmdir(p, options, er, cb)

	    options.unlink(p, function (er) {
	      if (er) {
	        if (er.code === "ENOENT")
	          return cb(null)
	        if (er.code === "EPERM")
	          return (isWindows)
	            ? fixWinEPERM(p, options, er, cb)
	            : rmdir(p, options, er, cb)
	        if (er.code === "EISDIR")
	          return rmdir(p, options, er, cb)
	      }
	      return cb(er)
	    })
	  })
	}

	function fixWinEPERM (p, options, er, cb) {
	  assert(p)
	  assert(options)
	  assert(typeof cb === 'function')
	  if (er)
	    assert(er instanceof Error)

	  options.chmod(p, 666, function (er2) {
	    if (er2)
	      cb(er2.code === "ENOENT" ? null : er)
	    else
	      options.stat(p, function(er3, stats) {
	        if (er3)
	          cb(er3.code === "ENOENT" ? null : er)
	        else if (stats.isDirectory())
	          rmdir(p, options, er, cb)
	        else
	          options.unlink(p, cb)
	      })
	  })
	}

	function fixWinEPERMSync (p, options, er) {
	  assert(p)
	  assert(options)
	  if (er)
	    assert(er instanceof Error)

	  try {
	    options.chmodSync(p, 666)
	  } catch (er2) {
	    if (er2.code === "ENOENT")
	      return
	    else
	      throw er
	  }

	  try {
	    var stats = options.statSync(p)
	  } catch (er3) {
	    if (er3.code === "ENOENT")
	      return
	    else
	      throw er
	  }

	  if (stats.isDirectory())
	    rmdirSync(p, options, er)
	  else
	    options.unlinkSync(p)
	}

	function rmdir (p, options, originalEr, cb) {
	  assert(p)
	  assert(options)
	  if (originalEr)
	    assert(originalEr instanceof Error)
	  assert(typeof cb === 'function')

	  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
	  // if we guessed wrong, and it's not a directory, then
	  // raise the original error.
	  options.rmdir(p, function (er) {
	    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
	      rmkids(p, options, cb)
	    else if (er && er.code === "ENOTDIR")
	      cb(originalEr)
	    else
	      cb(er)
	  })
	}

	function rmkids(p, options, cb) {
	  assert(p)
	  assert(options)
	  assert(typeof cb === 'function')

	  options.readdir(p, function (er, files) {
	    if (er)
	      return cb(er)
	    var n = files.length
	    if (n === 0)
	      return options.rmdir(p, cb)
	    var errState
	    files.forEach(function (f) {
	      rimraf(path.join(p, f), options, function (er) {
	        if (errState)
	          return
	        if (er)
	          return cb(errState = er)
	        if (--n === 0)
	          options.rmdir(p, cb)
	      })
	    })
	  })
	}

	// this looks simpler, and is strictly *faster*, but will
	// tie up the JavaScript thread and fail on excessively
	// deep directory trees.
	function rimrafSync (p, options) {
	  options = options || {}
	  defaults(options)

	  assert(p, 'rimraf: missing path')
	  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
	  assert(options, 'rimraf: missing options')
	  assert.equal(typeof options, 'object', 'rimraf: options should be object')

	  var results

	  if (options.disableGlob || !glob.hasMagic(p)) {
	    results = [p]
	  } else {
	    try {
	      options.lstatSync(p)
	      results = [p]
	    } catch (er) {
	      results = glob.sync(p, options.glob)
	    }
	  }

	  if (!results.length)
	    return

	  for (var i = 0; i < results.length; i++) {
	    var p = results[i]

	    try {
	      var st = options.lstatSync(p)
	    } catch (er) {
	      if (er.code === "ENOENT")
	        return

	      // Windows can EPERM on stat.  Life is suffering.
	      if (er.code === "EPERM" && isWindows)
	        fixWinEPERMSync(p, options, er)
	    }

	    try {
	      // sunos lets the root user unlink directories, which is... weird.
	      if (st && st.isDirectory())
	        rmdirSync(p, options, null)
	      else
	        options.unlinkSync(p)
	    } catch (er) {
	      if (er.code === "ENOENT")
	        return
	      if (er.code === "EPERM")
	        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
	      if (er.code !== "EISDIR")
	        throw er
	      rmdirSync(p, options, er)
	    }
	  }
	}

	function rmdirSync (p, options, originalEr) {
	  assert(p)
	  assert(options)
	  if (originalEr)
	    assert(originalEr instanceof Error)

	  try {
	    options.rmdirSync(p)
	  } catch (er) {
	    if (er.code === "ENOENT")
	      return
	    if (er.code === "ENOTDIR")
	      throw originalEr
	    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
	      rmkidsSync(p, options)
	  }
	}

	function rmkidsSync (p, options) {
	  assert(p)
	  assert(options)
	  options.readdirSync(p).forEach(function (f) {
	    rimrafSync(path.join(p, f), options)
	  })
	  options.rmdirSync(p, options)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Approach:
	//
	// 1. Get the minimatch set
	// 2. For each pattern in the set, PROCESS(pattern, false)
	// 3. Store matches per-set, then uniq them
	//
	// PROCESS(pattern, inGlobStar)
	// Get the first [n] items from pattern that are all strings
	// Join these together.  This is PREFIX.
	//   If there is no more remaining, then stat(PREFIX) and
	//   add to matches if it succeeds.  END.
	//
	// If inGlobStar and PREFIX is symlink and points to dir
	//   set ENTRIES = []
	// else readdir(PREFIX) as ENTRIES
	//   If fail, END
	//
	// with ENTRIES
	//   If pattern[n] is GLOBSTAR
	//     // handle the case where the globstar match is empty
	//     // by pruning it out, and testing the resulting pattern
	//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
	//     // handle other cases.
	//     for ENTRY in ENTRIES (not dotfiles)
	//       // attach globstar + tail onto the entry
	//       // Mark that this entry is a globstar match
	//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
	//
	//   else // not globstar
	//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
	//       Test ENTRY against pattern[n]
	//       If fails, continue
	//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
	//
	// Caveat:
	//   Cache all stats and readdirs results to minimize syscall.  Since all
	//   we ever care about is existence and directory-ness, we can just keep
	//   `true` for files, and [children,...] for directories, or `false` for
	//   things that don't exist.

	module.exports = glob

	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	var rp = __webpack_require__(78)
	var minimatch = __webpack_require__(80)
	var Minimatch = minimatch.Minimatch
	var inherits = __webpack_require__(26)
	var EE = __webpack_require__(30).EventEmitter
	var path = __webpack_require__(61)
	var assert = __webpack_require__(11)
	var isAbsolute = __webpack_require__(84)
	var globSync = __webpack_require__(85)
	var common = __webpack_require__(86)
	var alphasort = common.alphasort
	var alphasorti = common.alphasorti
	var setopts = common.setopts
	var ownProp = common.ownProp
	var inflight = __webpack_require__(87)
	var util = __webpack_require__(12)
	var childrenIgnored = common.childrenIgnored
	var isIgnored = common.isIgnored

	var once = __webpack_require__(89)

	function glob (pattern, options, cb) {
	  if (typeof options === 'function') cb = options, options = {}
	  if (!options) options = {}

	  if (options.sync) {
	    if (cb)
	      throw new TypeError('callback provided to sync glob')
	    return globSync(pattern, options)
	  }

	  return new Glob(pattern, options, cb)
	}

	glob.sync = globSync
	var GlobSync = glob.GlobSync = globSync.GlobSync

	// old api surface
	glob.glob = glob

	function extend (origin, add) {
	  if (add === null || typeof add !== 'object') {
	    return origin
	  }

	  var keys = Object.keys(add)
	  var i = keys.length
	  while (i--) {
	    origin[keys[i]] = add[keys[i]]
	  }
	  return origin
	}

	glob.hasMagic = function (pattern, options_) {
	  var options = extend({}, options_)
	  options.noprocess = true

	  var g = new Glob(pattern, options)
	  var set = g.minimatch.set
	  if (set.length > 1)
	    return true

	  for (var j = 0; j < set[0].length; j++) {
	    if (typeof set[0][j] !== 'string')
	      return true
	  }

	  return false
	}

	glob.Glob = Glob
	inherits(Glob, EE)
	function Glob (pattern, options, cb) {
	  if (typeof options === 'function') {
	    cb = options
	    options = null
	  }

	  if (options && options.sync) {
	    if (cb)
	      throw new TypeError('callback provided to sync glob')
	    return new GlobSync(pattern, options)
	  }

	  if (!(this instanceof Glob))
	    return new Glob(pattern, options, cb)

	  setopts(this, pattern, options)
	  this._didRealPath = false

	  // process each pattern in the minimatch set
	  var n = this.minimatch.set.length

	  // The matches are stored as {<filename>: true,...} so that
	  // duplicates are automagically pruned.
	  // Later, we do an Object.keys() on these.
	  // Keep them as a list so we can fill in when nonull is set.
	  this.matches = new Array(n)

	  if (typeof cb === 'function') {
	    cb = once(cb)
	    this.on('error', cb)
	    this.on('end', function (matches) {
	      cb(null, matches)
	    })
	  }

	  var self = this
	  var n = this.minimatch.set.length
	  this._processing = 0
	  this.matches = new Array(n)

	  this._emitQueue = []
	  this._processQueue = []
	  this.paused = false

	  if (this.noprocess)
	    return this

	  if (n === 0)
	    return done()

	  var sync = true
	  for (var i = 0; i < n; i ++) {
	    this._process(this.minimatch.set[i], i, false, done)
	  }
	  sync = false

	  function done () {
	    --self._processing
	    if (self._processing <= 0) {
	      if (sync) {
	        process.nextTick(function () {
	          self._finish()
	        })
	      } else {
	        self._finish()
	      }
	    }
	  }
	}

	Glob.prototype._finish = function () {
	  assert(this instanceof Glob)
	  if (this.aborted)
	    return

	  if (this.realpath && !this._didRealpath)
	    return this._realpath()

	  common.finish(this)
	  this.emit('end', this.found)
	}

	Glob.prototype._realpath = function () {
	  if (this._didRealpath)
	    return

	  this._didRealpath = true

	  var n = this.matches.length
	  if (n === 0)
	    return this._finish()

	  var self = this
	  for (var i = 0; i < this.matches.length; i++)
	    this._realpathSet(i, next)

	  function next () {
	    if (--n === 0)
	      self._finish()
	  }
	}

	Glob.prototype._realpathSet = function (index, cb) {
	  var matchset = this.matches[index]
	  if (!matchset)
	    return cb()

	  var found = Object.keys(matchset)
	  var self = this
	  var n = found.length

	  if (n === 0)
	    return cb()

	  var set = this.matches[index] = Object.create(null)
	  found.forEach(function (p, i) {
	    // If there's a problem with the stat, then it means that
	    // one or more of the links in the realpath couldn't be
	    // resolved.  just return the abs value in that case.
	    p = self._makeAbs(p)
	    rp.realpath(p, self.realpathCache, function (er, real) {
	      if (!er)
	        set[real] = true
	      else if (er.syscall === 'stat')
	        set[p] = true
	      else
	        self.emit('error', er) // srsly wtf right here

	      if (--n === 0) {
	        self.matches[index] = set
	        cb()
	      }
	    })
	  })
	}

	Glob.prototype._mark = function (p) {
	  return common.mark(this, p)
	}

	Glob.prototype._makeAbs = function (f) {
	  return common.makeAbs(this, f)
	}

	Glob.prototype.abort = function () {
	  this.aborted = true
	  this.emit('abort')
	}

	Glob.prototype.pause = function () {
	  if (!this.paused) {
	    this.paused = true
	    this.emit('pause')
	  }
	}

	Glob.prototype.resume = function () {
	  if (this.paused) {
	    this.emit('resume')
	    this.paused = false
	    if (this._emitQueue.length) {
	      var eq = this._emitQueue.slice(0)
	      this._emitQueue.length = 0
	      for (var i = 0; i < eq.length; i ++) {
	        var e = eq[i]
	        this._emitMatch(e[0], e[1])
	      }
	    }
	    if (this._processQueue.length) {
	      var pq = this._processQueue.slice(0)
	      this._processQueue.length = 0
	      for (var i = 0; i < pq.length; i ++) {
	        var p = pq[i]
	        this._processing--
	        this._process(p[0], p[1], p[2], p[3])
	      }
	    }
	  }
	}

	Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
	  assert(this instanceof Glob)
	  assert(typeof cb === 'function')

	  if (this.aborted)
	    return

	  this._processing++
	  if (this.paused) {
	    this._processQueue.push([pattern, index, inGlobStar, cb])
	    return
	  }

	  //console.error('PROCESS %d', this._processing, pattern)

	  // Get the first [n] parts of pattern that are all strings.
	  var n = 0
	  while (typeof pattern[n] === 'string') {
	    n ++
	  }
	  // now n is the index of the first one that is *not* a string.

	  // see if there's anything else
	  var prefix
	  switch (n) {
	    // if not, then this is rather simple
	    case pattern.length:
	      this._processSimple(pattern.join('/'), index, cb)
	      return

	    case 0:
	      // pattern *starts* with some non-trivial item.
	      // going to readdir(cwd), but not include the prefix in matches.
	      prefix = null
	      break

	    default:
	      // pattern has some string bits in the front.
	      // whatever it starts with, whether that's 'absolute' like /foo/bar,
	      // or 'relative' like '../baz'
	      prefix = pattern.slice(0, n).join('/')
	      break
	  }

	  var remain = pattern.slice(n)

	  // get the list of entries.
	  var read
	  if (prefix === null)
	    read = '.'
	  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
	    if (!prefix || !isAbsolute(prefix))
	      prefix = '/' + prefix
	    read = prefix
	  } else
	    read = prefix

	  var abs = this._makeAbs(read)

	  //if ignored, skip _processing
	  if (childrenIgnored(this, read))
	    return cb()

	  var isGlobStar = remain[0] === minimatch.GLOBSTAR
	  if (isGlobStar)
	    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
	  else
	    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
	}

	Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
	  var self = this
	  this._readdir(abs, inGlobStar, function (er, entries) {
	    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
	  })
	}

	Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

	  // if the abs isn't a dir, then nothing can match!
	  if (!entries)
	    return cb()

	  // It will only match dot entries if it starts with a dot, or if
	  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
	  var pn = remain[0]
	  var negate = !!this.minimatch.negate
	  var rawGlob = pn._glob
	  var dotOk = this.dot || rawGlob.charAt(0) === '.'

	  var matchedEntries = []
	  for (var i = 0; i < entries.length; i++) {
	    var e = entries[i]
	    if (e.charAt(0) !== '.' || dotOk) {
	      var m
	      if (negate && !prefix) {
	        m = !e.match(pn)
	      } else {
	        m = e.match(pn)
	      }
	      if (m)
	        matchedEntries.push(e)
	    }
	  }

	  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

	  var len = matchedEntries.length
	  // If there are no matched entries, then nothing matches.
	  if (len === 0)
	    return cb()

	  // if this is the last remaining pattern bit, then no need for
	  // an additional stat *unless* the user has specified mark or
	  // stat explicitly.  We know they exist, since readdir returned
	  // them.

	  if (remain.length === 1 && !this.mark && !this.stat) {
	    if (!this.matches[index])
	      this.matches[index] = Object.create(null)

	    for (var i = 0; i < len; i ++) {
	      var e = matchedEntries[i]
	      if (prefix) {
	        if (prefix !== '/')
	          e = prefix + '/' + e
	        else
	          e = prefix + e
	      }

	      if (e.charAt(0) === '/' && !this.nomount) {
	        e = path.join(this.root, e)
	      }
	      this._emitMatch(index, e)
	    }
	    // This was the last one, and no stats were needed
	    return cb()
	  }

	  // now test all matched entries as stand-ins for that part
	  // of the pattern.
	  remain.shift()
	  for (var i = 0; i < len; i ++) {
	    var e = matchedEntries[i]
	    var newPattern
	    if (prefix) {
	      if (prefix !== '/')
	        e = prefix + '/' + e
	      else
	        e = prefix + e
	    }
	    this._process([e].concat(remain), index, inGlobStar, cb)
	  }
	  cb()
	}

	Glob.prototype._emitMatch = function (index, e) {
	  if (this.aborted)
	    return

	  if (this.matches[index][e])
	    return

	  if (isIgnored(this, e))
	    return

	  if (this.paused) {
	    this._emitQueue.push([index, e])
	    return
	  }

	  var abs = this._makeAbs(e)

	  if (this.nodir) {
	    var c = this.cache[abs]
	    if (c === 'DIR' || Array.isArray(c))
	      return
	  }

	  if (this.mark)
	    e = this._mark(e)

	  this.matches[index][e] = true

	  var st = this.statCache[abs]
	  if (st)
	    this.emit('stat', e, st)

	  this.emit('match', e)
	}

	Glob.prototype._readdirInGlobStar = function (abs, cb) {
	  if (this.aborted)
	    return

	  // follow all symlinked directories forever
	  // just proceed as if this is a non-globstar situation
	  if (this.follow)
	    return this._readdir(abs, false, cb)

	  var lstatkey = 'lstat\0' + abs
	  var self = this
	  var lstatcb = inflight(lstatkey, lstatcb_)

	  if (lstatcb)
	    fs.lstat(abs, lstatcb)

	  function lstatcb_ (er, lstat) {
	    if (er)
	      return cb()

	    var isSym = lstat.isSymbolicLink()
	    self.symlinks[abs] = isSym

	    // If it's not a symlink or a dir, then it's definitely a regular file.
	    // don't bother doing a readdir in that case.
	    if (!isSym && !lstat.isDirectory()) {
	      self.cache[abs] = 'FILE'
	      cb()
	    } else
	      self._readdir(abs, false, cb)
	  }
	}

	Glob.prototype._readdir = function (abs, inGlobStar, cb) {
	  if (this.aborted)
	    return

	  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
	  if (!cb)
	    return

	  //console.error('RD %j %j', +inGlobStar, abs)
	  if (inGlobStar && !ownProp(this.symlinks, abs))
	    return this._readdirInGlobStar(abs, cb)

	  if (ownProp(this.cache, abs)) {
	    var c = this.cache[abs]
	    if (!c || c === 'FILE')
	      return cb()

	    if (Array.isArray(c))
	      return cb(null, c)
	  }

	  var self = this
	  fs.readdir(abs, readdirCb(this, abs, cb))
	}

	function readdirCb (self, abs, cb) {
	  return function (er, entries) {
	    if (er)
	      self._readdirError(abs, er, cb)
	    else
	      self._readdirEntries(abs, entries, cb)
	  }
	}

	Glob.prototype._readdirEntries = function (abs, entries, cb) {
	  if (this.aborted)
	    return

	  // if we haven't asked to stat everything, then just
	  // assume that everything in there exists, so we can avoid
	  // having to stat it a second time.
	  if (!this.mark && !this.stat) {
	    for (var i = 0; i < entries.length; i ++) {
	      var e = entries[i]
	      if (abs === '/')
	        e = abs + e
	      else
	        e = abs + '/' + e
	      this.cache[e] = true
	    }
	  }

	  this.cache[abs] = entries
	  return cb(null, entries)
	}

	Glob.prototype._readdirError = function (f, er, cb) {
	  if (this.aborted)
	    return

	  // handle errors, and cache the information
	  switch (er.code) {
	    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
	    case 'ENOTDIR': // totally normal. means it *does* exist.
	      var abs = this._makeAbs(f)
	      this.cache[abs] = 'FILE'
	      if (abs === this.cwdAbs) {
	        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
	        error.path = this.cwd
	        error.code = er.code
	        this.emit('error', error)
	        this.abort()
	      }
	      break

	    case 'ENOENT': // not terribly unusual
	    case 'ELOOP':
	    case 'ENAMETOOLONG':
	    case 'UNKNOWN':
	      this.cache[this._makeAbs(f)] = false
	      break

	    default: // some unusual error.  Treat as failure.
	      this.cache[this._makeAbs(f)] = false
	      if (this.strict) {
	        this.emit('error', er)
	        // If the error is handled, then we abort
	        // if not, we threw out of here
	        this.abort()
	      }
	      if (!this.silent)
	        console.error('glob error', er)
	      break
	  }

	  return cb()
	}

	Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
	  var self = this
	  this._readdir(abs, inGlobStar, function (er, entries) {
	    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
	  })
	}


	Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
	  //console.error('pgs2', prefix, remain[0], entries)

	  // no entries means not a dir, so it can never have matches
	  // foo.txt/** doesn't match foo.txt
	  if (!entries)
	    return cb()

	  // test without the globstar, and with every child both below
	  // and replacing the globstar.
	  var remainWithoutGlobStar = remain.slice(1)
	  var gspref = prefix ? [ prefix ] : []
	  var noGlobStar = gspref.concat(remainWithoutGlobStar)

	  // the noGlobStar pattern exits the inGlobStar state
	  this._process(noGlobStar, index, false, cb)

	  var isSym = this.symlinks[abs]
	  var len = entries.length

	  // If it's a symlink, and we're in a globstar, then stop
	  if (isSym && inGlobStar)
	    return cb()

	  for (var i = 0; i < len; i++) {
	    var e = entries[i]
	    if (e.charAt(0) === '.' && !this.dot)
	      continue

	    // these two cases enter the inGlobStar state
	    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
	    this._process(instead, index, true, cb)

	    var below = gspref.concat(entries[i], remain)
	    this._process(below, index, true, cb)
	  }

	  cb()
	}

	Glob.prototype._processSimple = function (prefix, index, cb) {
	  // XXX review this.  Shouldn't it be doing the mounting etc
	  // before doing stat?  kinda weird?
	  var self = this
	  this._stat(prefix, function (er, exists) {
	    self._processSimple2(prefix, index, er, exists, cb)
	  })
	}
	Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

	  //console.error('ps2', prefix, exists)

	  if (!this.matches[index])
	    this.matches[index] = Object.create(null)

	  // If it doesn't exist, then just mark the lack of results
	  if (!exists)
	    return cb()

	  if (prefix && isAbsolute(prefix) && !this.nomount) {
	    var trail = /[\/\\]$/.test(prefix)
	    if (prefix.charAt(0) === '/') {
	      prefix = path.join(this.root, prefix)
	    } else {
	      prefix = path.resolve(this.root, prefix)
	      if (trail)
	        prefix += '/'
	    }
	  }

	  if (process.platform === 'win32')
	    prefix = prefix.replace(/\\/g, '/')

	  // Mark this as a match
	  this._emitMatch(index, prefix)
	  cb()
	}

	// Returns either 'DIR', 'FILE', or false
	Glob.prototype._stat = function (f, cb) {
	  var abs = this._makeAbs(f)
	  var needDir = f.slice(-1) === '/'

	  if (f.length > this.maxLength)
	    return cb()

	  if (!this.stat && ownProp(this.cache, abs)) {
	    var c = this.cache[abs]

	    if (Array.isArray(c))
	      c = 'DIR'

	    // It exists, but maybe not how we need it
	    if (!needDir || c === 'DIR')
	      return cb(null, c)

	    if (needDir && c === 'FILE')
	      return cb()

	    // otherwise we have to stat, because maybe c=true
	    // if we know it exists, but not what it is.
	  }

	  var exists
	  var stat = this.statCache[abs]
	  if (stat !== undefined) {
	    if (stat === false)
	      return cb(null, stat)
	    else {
	      var type = stat.isDirectory() ? 'DIR' : 'FILE'
	      if (needDir && type === 'FILE')
	        return cb()
	      else
	        return cb(null, type, stat)
	    }
	  }

	  var self = this
	  var statcb = inflight('stat\0' + abs, lstatcb_)
	  if (statcb)
	    fs.lstat(abs, statcb)

	  function lstatcb_ (er, lstat) {
	    if (lstat && lstat.isSymbolicLink()) {
	      // If it's a symlink, then treat it as the target, unless
	      // the target does not exist, then treat it as a file.
	      return fs.stat(abs, function (er, stat) {
	        if (er)
	          self._stat2(f, abs, null, lstat, cb)
	        else
	          self._stat2(f, abs, er, stat, cb)
	      })
	    } else {
	      self._stat2(f, abs, er, lstat, cb)
	    }
	  }
	}

	Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
	  if (er) {
	    this.statCache[abs] = false
	    return cb()
	  }

	  var needDir = f.slice(-1) === '/'
	  this.statCache[abs] = stat

	  if (abs.slice(-1) === '/' && !stat.isDirectory())
	    return cb(null, false, stat)

	  var c = stat.isDirectory() ? 'DIR' : 'FILE'
	  this.cache[abs] = this.cache[abs] || c

	  if (needDir && c !== 'DIR')
	    return cb()

	  return cb(null, c, stat)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {module.exports = realpath
	realpath.realpath = realpath
	realpath.sync = realpathSync
	realpath.realpathSync = realpathSync
	realpath.monkeypatch = monkeypatch
	realpath.unmonkeypatch = unmonkeypatch

	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	var origRealpath = fs.realpath
	var origRealpathSync = fs.realpathSync

	var version = process.version
	var ok = /^v[0-5]\./.test(version)
	var old = __webpack_require__(79)

	function newError (er) {
	  return er && er.syscall === 'realpath' && (
	    er.code === 'ELOOP' ||
	    er.code === 'ENOMEM' ||
	    er.code === 'ENAMETOOLONG'
	  )
	}

	function realpath (p, cache, cb) {
	  if (ok) {
	    return origRealpath(p, cache, cb)
	  }

	  if (typeof cache === 'function') {
	    cb = cache
	    cache = null
	  }
	  origRealpath(p, cache, function (er, result) {
	    if (newError(er)) {
	      old.realpath(p, cache, cb)
	    } else {
	      cb(er, result)
	    }
	  })
	}

	function realpathSync (p, cache) {
	  if (ok) {
	    return origRealpathSync(p, cache)
	  }

	  try {
	    return origRealpathSync(p, cache)
	  } catch (er) {
	    if (newError(er)) {
	      return old.realpathSync(p, cache)
	    } else {
	      throw er
	    }
	  }
	}

	function monkeypatch () {
	  fs.realpath = realpath
	  fs.realpathSync = realpathSync
	}

	function unmonkeypatch () {
	  fs.realpath = origRealpath
	  fs.realpathSync = origRealpathSync
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var pathModule = __webpack_require__(61);
	var isWindows = process.platform === 'win32';
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	// JavaScript implementation of realpath, ported from node pre-v6

	var DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);

	function rethrow() {
	  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and
	  // is fairly slow to generate.
	  var callback;
	  if (DEBUG) {
	    var backtrace = new Error;
	    callback = debugCallback;
	  } else
	    callback = missingCallback;

	  return callback;

	  function debugCallback(err) {
	    if (err) {
	      backtrace.message = err.message;
	      err = backtrace;
	      missingCallback(err);
	    }
	  }

	  function missingCallback(err) {
	    if (err) {
	      if (process.throwDeprecation)
	        throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs
	      else if (!process.noDeprecation) {
	        var msg = 'fs: missing callback ' + (err.stack || err.message);
	        if (process.traceDeprecation)
	          console.trace(msg);
	        else
	          console.error(msg);
	      }
	    }
	  }
	}

	function maybeCallback(cb) {
	  return typeof cb === 'function' ? cb : rethrow();
	}

	var normalize = pathModule.normalize;

	// Regexp that finds the next partion of a (partial) path
	// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']
	if (isWindows) {
	  var nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
	} else {
	  var nextPartRe = /(.*?)(?:[\/]+|$)/g;
	}

	// Regex to find the device root, including trailing slash. E.g. 'c:\\'.
	if (isWindows) {
	  var splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
	} else {
	  var splitRootRe = /^[\/]*/;
	}

	exports.realpathSync = function realpathSync(p, cache) {
	  // make p is absolute
	  p = pathModule.resolve(p);

	  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
	    return cache[p];
	  }

	  var original = p,
	      seenLinks = {},
	      knownHard = {};

	  // current character position in p
	  var pos;
	  // the partial path so far, including a trailing slash if any
	  var current;
	  // the partial path without a trailing slash (except when pointing at a root)
	  var base;
	  // the partial path scanned in the previous round, with slash
	  var previous;

	  start();

	  function start() {
	    // Skip over roots
	    var m = splitRootRe.exec(p);
	    pos = m[0].length;
	    current = m[0];
	    base = m[0];
	    previous = '';

	    // On windows, check that the root exists. On unix there is no need.
	    if (isWindows && !knownHard[base]) {
	      fs.lstatSync(base);
	      knownHard[base] = true;
	    }
	  }

	  // walk down the path, swapping out linked pathparts for their real
	  // values
	  // NB: p.length changes.
	  while (pos < p.length) {
	    // find the next part
	    nextPartRe.lastIndex = pos;
	    var result = nextPartRe.exec(p);
	    previous = current;
	    current += result[0];
	    base = previous + result[1];
	    pos = nextPartRe.lastIndex;

	    // continue if not a symlink
	    if (knownHard[base] || (cache && cache[base] === base)) {
	      continue;
	    }

	    var resolvedLink;
	    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
	      // some known symbolic link.  no need to stat again.
	      resolvedLink = cache[base];
	    } else {
	      var stat = fs.lstatSync(base);
	      if (!stat.isSymbolicLink()) {
	        knownHard[base] = true;
	        if (cache) cache[base] = base;
	        continue;
	      }

	      // read the link if it wasn't read before
	      // dev/ino always return 0 on windows, so skip the check.
	      var linkTarget = null;
	      if (!isWindows) {
	        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
	        if (seenLinks.hasOwnProperty(id)) {
	          linkTarget = seenLinks[id];
	        }
	      }
	      if (linkTarget === null) {
	        fs.statSync(base);
	        linkTarget = fs.readlinkSync(base);
	      }
	      resolvedLink = pathModule.resolve(previous, linkTarget);
	      // track this, if given a cache.
	      if (cache) cache[base] = resolvedLink;
	      if (!isWindows) seenLinks[id] = linkTarget;
	    }

	    // resolve the link, then start over
	    p = pathModule.resolve(resolvedLink, p.slice(pos));
	    start();
	  }

	  if (cache) cache[original] = p;

	  return p;
	};


	exports.realpath = function realpath(p, cache, cb) {
	  if (typeof cb !== 'function') {
	    cb = maybeCallback(cache);
	    cache = null;
	  }

	  // make p is absolute
	  p = pathModule.resolve(p);

	  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
	    return process.nextTick(cb.bind(null, null, cache[p]));
	  }

	  var original = p,
	      seenLinks = {},
	      knownHard = {};

	  // current character position in p
	  var pos;
	  // the partial path so far, including a trailing slash if any
	  var current;
	  // the partial path without a trailing slash (except when pointing at a root)
	  var base;
	  // the partial path scanned in the previous round, with slash
	  var previous;

	  start();

	  function start() {
	    // Skip over roots
	    var m = splitRootRe.exec(p);
	    pos = m[0].length;
	    current = m[0];
	    base = m[0];
	    previous = '';

	    // On windows, check that the root exists. On unix there is no need.
	    if (isWindows && !knownHard[base]) {
	      fs.lstat(base, function(err) {
	        if (err) return cb(err);
	        knownHard[base] = true;
	        LOOP();
	      });
	    } else {
	      process.nextTick(LOOP);
	    }
	  }

	  // walk down the path, swapping out linked pathparts for their real
	  // values
	  function LOOP() {
	    // stop if scanned past end of path
	    if (pos >= p.length) {
	      if (cache) cache[original] = p;
	      return cb(null, p);
	    }

	    // find the next part
	    nextPartRe.lastIndex = pos;
	    var result = nextPartRe.exec(p);
	    previous = current;
	    current += result[0];
	    base = previous + result[1];
	    pos = nextPartRe.lastIndex;

	    // continue if not a symlink
	    if (knownHard[base] || (cache && cache[base] === base)) {
	      return process.nextTick(LOOP);
	    }

	    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
	      // known symbolic link.  no need to stat again.
	      return gotResolvedLink(cache[base]);
	    }

	    return fs.lstat(base, gotStat);
	  }

	  function gotStat(err, stat) {
	    if (err) return cb(err);

	    // if not a symlink, skip to the next path part
	    if (!stat.isSymbolicLink()) {
	      knownHard[base] = true;
	      if (cache) cache[base] = base;
	      return process.nextTick(LOOP);
	    }

	    // stat & read the link if not read before
	    // call gotTarget as soon as the link target is known
	    // dev/ino always return 0 on windows, so skip the check.
	    if (!isWindows) {
	      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
	      if (seenLinks.hasOwnProperty(id)) {
	        return gotTarget(null, seenLinks[id], base);
	      }
	    }
	    fs.stat(base, function(err) {
	      if (err) return cb(err);

	      fs.readlink(base, function(err, target) {
	        if (!isWindows) seenLinks[id] = target;
	        gotTarget(err, target);
	      });
	    });
	  }

	  function gotTarget(err, target, base) {
	    if (err) return cb(err);

	    var resolvedLink = pathModule.resolve(previous, target);
	    if (cache) cache[base] = resolvedLink;
	    gotResolvedLink(resolvedLink);
	  }

	  function gotResolvedLink(resolvedLink) {
	    // resolve the link, then start over
	    p = pathModule.resolve(resolvedLink, p.slice(pos));
	    start();
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = minimatch
	minimatch.Minimatch = Minimatch

	var path = { sep: '/' }
	try {
	  path = __webpack_require__(61)
	} catch (er) {}

	var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
	var expand = __webpack_require__(81)

	var plTypes = {
	  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
	  '?': { open: '(?:', close: ')?' },
	  '+': { open: '(?:', close: ')+' },
	  '*': { open: '(?:', close: ')*' },
	  '@': { open: '(?:', close: ')' }
	}

	// any single thing other than /
	// don't need to escape / when using new RegExp()
	var qmark = '[^/]'

	// * => any number of characters
	var star = qmark + '*?'

	// ** when dots are allowed.  Anything goes, except .. and .
	// not (^ or / followed by one or two dots followed by $ or /),
	// followed by anything, any number of times.
	var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

	// not a ^ or / followed by a dot,
	// followed by anything, any number of times.
	var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

	// characters that need to be escaped in RegExp.
	var reSpecials = charSet('().*{}+?[]^$\\!')

	// "abc" -> { a:true, b:true, c:true }
	function charSet (s) {
	  return s.split('').reduce(function (set, c) {
	    set[c] = true
	    return set
	  }, {})
	}

	// normalizes slashes.
	var slashSplit = /\/+/

	minimatch.filter = filter
	function filter (pattern, options) {
	  options = options || {}
	  return function (p, i, list) {
	    return minimatch(p, pattern, options)
	  }
	}

	function ext (a, b) {
	  a = a || {}
	  b = b || {}
	  var t = {}
	  Object.keys(b).forEach(function (k) {
	    t[k] = b[k]
	  })
	  Object.keys(a).forEach(function (k) {
	    t[k] = a[k]
	  })
	  return t
	}

	minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return minimatch

	  var orig = minimatch

	  var m = function minimatch (p, pattern, options) {
	    return orig.minimatch(p, pattern, ext(def, options))
	  }

	  m.Minimatch = function Minimatch (pattern, options) {
	    return new orig.Minimatch(pattern, ext(def, options))
	  }

	  return m
	}

	Minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return Minimatch
	  return minimatch.defaults(def).Minimatch
	}

	function minimatch (p, pattern, options) {
	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }

	  if (!options) options = {}

	  // shortcut: comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    return false
	  }

	  // "" only matches ""
	  if (pattern.trim() === '') return p === ''

	  return new Minimatch(pattern, options).match(p)
	}

	function Minimatch (pattern, options) {
	  if (!(this instanceof Minimatch)) {
	    return new Minimatch(pattern, options)
	  }

	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }

	  if (!options) options = {}
	  pattern = pattern.trim()

	  // windows support: need to use /, not \
	  if (path.sep !== '/') {
	    pattern = pattern.split(path.sep).join('/')
	  }

	  this.options = options
	  this.set = []
	  this.pattern = pattern
	  this.regexp = null
	  this.negate = false
	  this.comment = false
	  this.empty = false

	  // make the set of regexps etc.
	  this.make()
	}

	Minimatch.prototype.debug = function () {}

	Minimatch.prototype.make = make
	function make () {
	  // don't do it more than once.
	  if (this._made) return

	  var pattern = this.pattern
	  var options = this.options

	  // empty patterns and comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    this.comment = true
	    return
	  }
	  if (!pattern) {
	    this.empty = true
	    return
	  }

	  // step 1: figure out negation, etc.
	  this.parseNegate()

	  // step 2: expand braces
	  var set = this.globSet = this.braceExpand()

	  if (options.debug) this.debug = console.error

	  this.debug(this.pattern, set)

	  // step 3: now we have a set, so turn each one into a series of path-portion
	  // matching patterns.
	  // These will be regexps, except in the case of "**", which is
	  // set to the GLOBSTAR object for globstar behavior,
	  // and will not contain any / characters
	  set = this.globParts = set.map(function (s) {
	    return s.split(slashSplit)
	  })

	  this.debug(this.pattern, set)

	  // glob --> regexps
	  set = set.map(function (s, si, set) {
	    return s.map(this.parse, this)
	  }, this)

	  this.debug(this.pattern, set)

	  // filter out everything that didn't compile properly.
	  set = set.filter(function (s) {
	    return s.indexOf(false) === -1
	  })

	  this.debug(this.pattern, set)

	  this.set = set
	}

	Minimatch.prototype.parseNegate = parseNegate
	function parseNegate () {
	  var pattern = this.pattern
	  var negate = false
	  var options = this.options
	  var negateOffset = 0

	  if (options.nonegate) return

	  for (var i = 0, l = pattern.length
	    ; i < l && pattern.charAt(i) === '!'
	    ; i++) {
	    negate = !negate
	    negateOffset++
	  }

	  if (negateOffset) this.pattern = pattern.substr(negateOffset)
	  this.negate = negate
	}

	// Brace expansion:
	// a{b,c}d -> abd acd
	// a{b,}c -> abc ac
	// a{0..3}d -> a0d a1d a2d a3d
	// a{b,c{d,e}f}g -> abg acdfg acefg
	// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
	//
	// Invalid sets are not expanded.
	// a{2..}b -> a{2..}b
	// a{b}c -> a{b}c
	minimatch.braceExpand = function (pattern, options) {
	  return braceExpand(pattern, options)
	}

	Minimatch.prototype.braceExpand = braceExpand

	function braceExpand (pattern, options) {
	  if (!options) {
	    if (this instanceof Minimatch) {
	      options = this.options
	    } else {
	      options = {}
	    }
	  }

	  pattern = typeof pattern === 'undefined'
	    ? this.pattern : pattern

	  if (typeof pattern === 'undefined') {
	    throw new TypeError('undefined pattern')
	  }

	  if (options.nobrace ||
	    !pattern.match(/\{.*\}/)) {
	    // shortcut. no need to expand.
	    return [pattern]
	  }

	  return expand(pattern)
	}

	// parse a component of the expanded set.
	// At this point, no pattern may contain "/" in it
	// so we're going to return a 2d array, where each entry is the full
	// pattern, split on '/', and then turned into a regular expression.
	// A regexp is made at the end which joins each array with an
	// escaped /, and another full one which joins each regexp with |.
	//
	// Following the lead of Bash 4.1, note that "**" only has special meaning
	// when it is the *only* thing in a path portion.  Otherwise, any series
	// of * is equivalent to a single *.  Globstar behavior is enabled by
	// default, and can be disabled by setting options.noglobstar.
	Minimatch.prototype.parse = parse
	var SUBPARSE = {}
	function parse (pattern, isSub) {
	  if (pattern.length > 1024 * 64) {
	    throw new TypeError('pattern is too long')
	  }

	  var options = this.options

	  // shortcuts
	  if (!options.noglobstar && pattern === '**') return GLOBSTAR
	  if (pattern === '') return ''

	  var re = ''
	  var hasMagic = !!options.nocase
	  var escaping = false
	  // ? => one single character
	  var patternListStack = []
	  var negativeLists = []
	  var stateChar
	  var inClass = false
	  var reClassStart = -1
	  var classStart = -1
	  // . and .. never match anything that doesn't start with .,
	  // even when options.dot is set.
	  var patternStart = pattern.charAt(0) === '.' ? '' // anything
	  // not (start or / followed by . or .. followed by / or end)
	  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
	  : '(?!\\.)'
	  var self = this

	  function clearStateChar () {
	    if (stateChar) {
	      // we had some state-tracking character
	      // that wasn't consumed by this pass.
	      switch (stateChar) {
	        case '*':
	          re += star
	          hasMagic = true
	        break
	        case '?':
	          re += qmark
	          hasMagic = true
	        break
	        default:
	          re += '\\' + stateChar
	        break
	      }
	      self.debug('clearStateChar %j %j', stateChar, re)
	      stateChar = false
	    }
	  }

	  for (var i = 0, len = pattern.length, c
	    ; (i < len) && (c = pattern.charAt(i))
	    ; i++) {
	    this.debug('%s\t%s %s %j', pattern, i, re, c)

	    // skip over any that are escaped.
	    if (escaping && reSpecials[c]) {
	      re += '\\' + c
	      escaping = false
	      continue
	    }

	    switch (c) {
	      case '/':
	        // completely not allowed, even escaped.
	        // Should already be path-split by now.
	        return false

	      case '\\':
	        clearStateChar()
	        escaping = true
	      continue

	      // the various stateChar values
	      // for the "extglob" stuff.
	      case '?':
	      case '*':
	      case '+':
	      case '@':
	      case '!':
	        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

	        // all of those are literals inside a class, except that
	        // the glob [!a] means [^a] in regexp
	        if (inClass) {
	          this.debug('  in class')
	          if (c === '!' && i === classStart + 1) c = '^'
	          re += c
	          continue
	        }

	        // if we already have a stateChar, then it means
	        // that there was something like ** or +? in there.
	        // Handle the stateChar, then proceed with this one.
	        self.debug('call clearStateChar %j', stateChar)
	        clearStateChar()
	        stateChar = c
	        // if extglob is disabled, then +(asdf|foo) isn't a thing.
	        // just clear the statechar *now*, rather than even diving into
	        // the patternList stuff.
	        if (options.noext) clearStateChar()
	      continue

	      case '(':
	        if (inClass) {
	          re += '('
	          continue
	        }

	        if (!stateChar) {
	          re += '\\('
	          continue
	        }

	        patternListStack.push({
	          type: stateChar,
	          start: i - 1,
	          reStart: re.length,
	          open: plTypes[stateChar].open,
	          close: plTypes[stateChar].close
	        })
	        // negation is (?:(?!js)[^/]*)
	        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
	        this.debug('plType %j %j', stateChar, re)
	        stateChar = false
	      continue

	      case ')':
	        if (inClass || !patternListStack.length) {
	          re += '\\)'
	          continue
	        }

	        clearStateChar()
	        hasMagic = true
	        var pl = patternListStack.pop()
	        // negation is (?:(?!js)[^/]*)
	        // The others are (?:<pattern>)<type>
	        re += pl.close
	        if (pl.type === '!') {
	          negativeLists.push(pl)
	        }
	        pl.reEnd = re.length
	      continue

	      case '|':
	        if (inClass || !patternListStack.length || escaping) {
	          re += '\\|'
	          escaping = false
	          continue
	        }

	        clearStateChar()
	        re += '|'
	      continue

	      // these are mostly the same in regexp and glob
	      case '[':
	        // swallow any state-tracking char before the [
	        clearStateChar()

	        if (inClass) {
	          re += '\\' + c
	          continue
	        }

	        inClass = true
	        classStart = i
	        reClassStart = re.length
	        re += c
	      continue

	      case ']':
	        //  a right bracket shall lose its special
	        //  meaning and represent itself in
	        //  a bracket expression if it occurs
	        //  first in the list.  -- POSIX.2 2.8.3.2
	        if (i === classStart + 1 || !inClass) {
	          re += '\\' + c
	          escaping = false
	          continue
	        }

	        // handle the case where we left a class open.
	        // "[z-a]" is valid, equivalent to "\[z-a\]"
	        if (inClass) {
	          // split where the last [ was, make sure we don't have
	          // an invalid re. if so, re-walk the contents of the
	          // would-be class to re-translate any characters that
	          // were passed through as-is
	          // TODO: It would probably be faster to determine this
	          // without a try/catch and a new RegExp, but it's tricky
	          // to do safely.  For now, this is safe and works.
	          var cs = pattern.substring(classStart + 1, i)
	          try {
	            RegExp('[' + cs + ']')
	          } catch (er) {
	            // not a valid class!
	            var sp = this.parse(cs, SUBPARSE)
	            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
	            hasMagic = hasMagic || sp[1]
	            inClass = false
	            continue
	          }
	        }

	        // finish up the class.
	        hasMagic = true
	        inClass = false
	        re += c
	      continue

	      default:
	        // swallow any state char that wasn't consumed
	        clearStateChar()

	        if (escaping) {
	          // no need
	          escaping = false
	        } else if (reSpecials[c]
	          && !(c === '^' && inClass)) {
	          re += '\\'
	        }

	        re += c

	    } // switch
	  } // for

	  // handle the case where we left a class open.
	  // "[abc" is valid, equivalent to "\[abc"
	  if (inClass) {
	    // split where the last [ was, and escape it
	    // this is a huge pita.  We now have to re-walk
	    // the contents of the would-be class to re-translate
	    // any characters that were passed through as-is
	    cs = pattern.substr(classStart + 1)
	    sp = this.parse(cs, SUBPARSE)
	    re = re.substr(0, reClassStart) + '\\[' + sp[0]
	    hasMagic = hasMagic || sp[1]
	  }

	  // handle the case where we had a +( thing at the *end*
	  // of the pattern.
	  // each pattern list stack adds 3 chars, and we need to go through
	  // and escape any | chars that were passed through as-is for the regexp.
	  // Go through and escape them, taking care not to double-escape any
	  // | chars that were already escaped.
	  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
	    var tail = re.slice(pl.reStart + pl.open.length)
	    this.debug('setting tail', re, pl)
	    // maybe some even number of \, then maybe 1 \, followed by a |
	    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
	      if (!$2) {
	        // the | isn't already escaped, so escape it.
	        $2 = '\\'
	      }

	      // need to escape all those slashes *again*, without escaping the
	      // one that we need for escaping the | character.  As it works out,
	      // escaping an even number of slashes can be done by simply repeating
	      // it exactly after itself.  That's why this trick works.
	      //
	      // I am sorry that you have to see this.
	      return $1 + $1 + $2 + '|'
	    })

	    this.debug('tail=%j\n   %s', tail, tail, pl, re)
	    var t = pl.type === '*' ? star
	      : pl.type === '?' ? qmark
	      : '\\' + pl.type

	    hasMagic = true
	    re = re.slice(0, pl.reStart) + t + '\\(' + tail
	  }

	  // handle trailing things that only matter at the very end.
	  clearStateChar()
	  if (escaping) {
	    // trailing \\
	    re += '\\\\'
	  }

	  // only need to apply the nodot start if the re starts with
	  // something that could conceivably capture a dot
	  var addPatternStart = false
	  switch (re.charAt(0)) {
	    case '.':
	    case '[':
	    case '(': addPatternStart = true
	  }

	  // Hack to work around lack of negative lookbehind in JS
	  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
	  // like 'a.xyz.yz' doesn't match.  So, the first negative
	  // lookahead, has to look ALL the way ahead, to the end of
	  // the pattern.
	  for (var n = negativeLists.length - 1; n > -1; n--) {
	    var nl = negativeLists[n]

	    var nlBefore = re.slice(0, nl.reStart)
	    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
	    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
	    var nlAfter = re.slice(nl.reEnd)

	    nlLast += nlAfter

	    // Handle nested stuff like *(*.js|!(*.json)), where open parens
	    // mean that we should *not* include the ) in the bit that is considered
	    // "after" the negated section.
	    var openParensBefore = nlBefore.split('(').length - 1
	    var cleanAfter = nlAfter
	    for (i = 0; i < openParensBefore; i++) {
	      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
	    }
	    nlAfter = cleanAfter

	    var dollar = ''
	    if (nlAfter === '' && isSub !== SUBPARSE) {
	      dollar = '$'
	    }
	    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
	    re = newRe
	  }

	  // if the re is not "" at this point, then we need to make sure
	  // it doesn't match against an empty path part.
	  // Otherwise a/* will match a/, which it should not.
	  if (re !== '' && hasMagic) {
	    re = '(?=.)' + re
	  }

	  if (addPatternStart) {
	    re = patternStart + re
	  }

	  // parsing just a piece of a larger pattern.
	  if (isSub === SUBPARSE) {
	    return [re, hasMagic]
	  }

	  // skip the regexp for non-magical patterns
	  // unescape anything in it, though, so that it'll be
	  // an exact match against a file etc.
	  if (!hasMagic) {
	    return globUnescape(pattern)
	  }

	  var flags = options.nocase ? 'i' : ''
	  try {
	    var regExp = new RegExp('^' + re + '$', flags)
	  } catch (er) {
	    // If it was an invalid regular expression, then it can't match
	    // anything.  This trick looks for a character after the end of
	    // the string, which is of course impossible, except in multi-line
	    // mode, but it's not a /m regex.
	    return new RegExp('$.')
	  }

	  regExp._glob = pattern
	  regExp._src = re

	  return regExp
	}

	minimatch.makeRe = function (pattern, options) {
	  return new Minimatch(pattern, options || {}).makeRe()
	}

	Minimatch.prototype.makeRe = makeRe
	function makeRe () {
	  if (this.regexp || this.regexp === false) return this.regexp

	  // at this point, this.set is a 2d array of partial
	  // pattern strings, or "**".
	  //
	  // It's better to use .match().  This function shouldn't
	  // be used, really, but it's pretty convenient sometimes,
	  // when you just want to work with a regex.
	  var set = this.set

	  if (!set.length) {
	    this.regexp = false
	    return this.regexp
	  }
	  var options = this.options

	  var twoStar = options.noglobstar ? star
	    : options.dot ? twoStarDot
	    : twoStarNoDot
	  var flags = options.nocase ? 'i' : ''

	  var re = set.map(function (pattern) {
	    return pattern.map(function (p) {
	      return (p === GLOBSTAR) ? twoStar
	      : (typeof p === 'string') ? regExpEscape(p)
	      : p._src
	    }).join('\\\/')
	  }).join('|')

	  // must match entire pattern
	  // ending in a * or ** will make it less strict.
	  re = '^(?:' + re + ')$'

	  // can match anything, as long as it's not this.
	  if (this.negate) re = '^(?!' + re + ').*$'

	  try {
	    this.regexp = new RegExp(re, flags)
	  } catch (ex) {
	    this.regexp = false
	  }
	  return this.regexp
	}

	minimatch.match = function (list, pattern, options) {
	  options = options || {}
	  var mm = new Minimatch(pattern, options)
	  list = list.filter(function (f) {
	    return mm.match(f)
	  })
	  if (mm.options.nonull && !list.length) {
	    list.push(pattern)
	  }
	  return list
	}

	Minimatch.prototype.match = match
	function match (f, partial) {
	  this.debug('match', f, this.pattern)
	  // short-circuit in the case of busted things.
	  // comments, etc.
	  if (this.comment) return false
	  if (this.empty) return f === ''

	  if (f === '/' && partial) return true

	  var options = this.options

	  // windows: need to use /, not \
	  if (path.sep !== '/') {
	    f = f.split(path.sep).join('/')
	  }

	  // treat the test path as a set of pathparts.
	  f = f.split(slashSplit)
	  this.debug(this.pattern, 'split', f)

	  // just ONE of the pattern sets in this.set needs to match
	  // in order for it to be valid.  If negating, then just one
	  // match means that we have failed.
	  // Either way, return on the first hit.

	  var set = this.set
	  this.debug(this.pattern, 'set', set)

	  // Find the basename of the path by looking for the last non-empty segment
	  var filename
	  var i
	  for (i = f.length - 1; i >= 0; i--) {
	    filename = f[i]
	    if (filename) break
	  }

	  for (i = 0; i < set.length; i++) {
	    var pattern = set[i]
	    var file = f
	    if (options.matchBase && pattern.length === 1) {
	      file = [filename]
	    }
	    var hit = this.matchOne(file, pattern, partial)
	    if (hit) {
	      if (options.flipNegate) return true
	      return !this.negate
	    }
	  }

	  // didn't get any hits.  this is success if it's a negative
	  // pattern, failure otherwise.
	  if (options.flipNegate) return false
	  return this.negate
	}

	// set partial to true to test if, for example,
	// "/a/b" matches the start of "/*/b/*/d"
	// Partial means, if you run out of file before you run
	// out of pattern, then that's fine, as long as all
	// the parts match.
	Minimatch.prototype.matchOne = function (file, pattern, partial) {
	  var options = this.options

	  this.debug('matchOne',
	    { 'this': this, file: file, pattern: pattern })

	  this.debug('matchOne', file.length, pattern.length)

	  for (var fi = 0,
	      pi = 0,
	      fl = file.length,
	      pl = pattern.length
	      ; (fi < fl) && (pi < pl)
	      ; fi++, pi++) {
	    this.debug('matchOne loop')
	    var p = pattern[pi]
	    var f = file[fi]

	    this.debug(pattern, p, f)

	    // should be impossible.
	    // some invalid regexp stuff in the set.
	    if (p === false) return false

	    if (p === GLOBSTAR) {
	      this.debug('GLOBSTAR', [pattern, p, f])

	      // "**"
	      // a/**/b/**/c would match the following:
	      // a/b/x/y/z/c
	      // a/x/y/z/b/c
	      // a/b/x/b/x/c
	      // a/b/c
	      // To do this, take the rest of the pattern after
	      // the **, and see if it would match the file remainder.
	      // If so, return success.
	      // If not, the ** "swallows" a segment, and try again.
	      // This is recursively awful.
	      //
	      // a/**/b/**/c matching a/b/x/y/z/c
	      // - a matches a
	      // - doublestar
	      //   - matchOne(b/x/y/z/c, b/**/c)
	      //     - b matches b
	      //     - doublestar
	      //       - matchOne(x/y/z/c, c) -> no
	      //       - matchOne(y/z/c, c) -> no
	      //       - matchOne(z/c, c) -> no
	      //       - matchOne(c, c) yes, hit
	      var fr = fi
	      var pr = pi + 1
	      if (pr === pl) {
	        this.debug('** at the end')
	        // a ** at the end will just swallow the rest.
	        // We have found a match.
	        // however, it will not swallow /.x, unless
	        // options.dot is set.
	        // . and .. are *never* matched by **, for explosively
	        // exponential reasons.
	        for (; fi < fl; fi++) {
	          if (file[fi] === '.' || file[fi] === '..' ||
	            (!options.dot && file[fi].charAt(0) === '.')) return false
	        }
	        return true
	      }

	      // ok, let's see if we can swallow whatever we can.
	      while (fr < fl) {
	        var swallowee = file[fr]

	        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

	        // XXX remove this slice.  Just pass the start index.
	        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
	          this.debug('globstar found match!', fr, fl, swallowee)
	          // found a match.
	          return true
	        } else {
	          // can't swallow "." or ".." ever.
	          // can only swallow ".foo" when explicitly asked.
	          if (swallowee === '.' || swallowee === '..' ||
	            (!options.dot && swallowee.charAt(0) === '.')) {
	            this.debug('dot detected!', file, fr, pattern, pr)
	            break
	          }

	          // ** swallows a segment, and continue.
	          this.debug('globstar swallow a segment, and continue')
	          fr++
	        }
	      }

	      // no match was found.
	      // However, in partial mode, we can't say this is necessarily over.
	      // If there's more *pattern* left, then
	      if (partial) {
	        // ran out of file
	        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
	        if (fr === fl) return true
	      }
	      return false
	    }

	    // something other than **
	    // non-magic patterns just have to match exactly
	    // patterns with magic have been turned into regexps.
	    var hit
	    if (typeof p === 'string') {
	      if (options.nocase) {
	        hit = f.toLowerCase() === p.toLowerCase()
	      } else {
	        hit = f === p
	      }
	      this.debug('string match', p, f, hit)
	    } else {
	      hit = f.match(p)
	      this.debug('pattern match', p, f, hit)
	    }

	    if (!hit) return false
	  }

	  // Note: ending in / means that we'll get a final ""
	  // at the end of the pattern.  This can only match a
	  // corresponding "" at the end of the file.
	  // If the file ends in /, then it can only match a
	  // a pattern that ends in /, unless the pattern just
	  // doesn't have any more for it. But, a/b/ should *not*
	  // match "a/b/*", even though "" matches against the
	  // [^/]*? pattern, except in partial mode, where it might
	  // simply not be reached yet.
	  // However, a/b/ should still satisfy a/*

	  // now either we fell off the end of the pattern, or we're done.
	  if (fi === fl && pi === pl) {
	    // ran out of pattern and filename at the same time.
	    // an exact hit!
	    return true
	  } else if (fi === fl) {
	    // ran out of file, but still had pattern left.
	    // this is ok if we're doing the match as part of
	    // a glob fs traversal.
	    return partial
	  } else if (pi === pl) {
	    // ran out of pattern, still have file left.
	    // this is only acceptable if we're on the very last
	    // empty segment of a file with a trailing slash.
	    // a/* should match a/b/
	    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')
	    return emptyFileEnd
	  }

	  // should be unreachable.
	  throw new Error('wtf?')
	}

	// replace stuff like \* with *
	function globUnescape (s) {
	  return s.replace(/\\(.)/g, '$1')
	}

	function regExpEscape (s) {
	  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
	}


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var concatMap = __webpack_require__(82);
	var balanced = __webpack_require__(83);

	module.exports = expandTop;

	var escSlash = '\0SLASH'+Math.random()+'\0';
	var escOpen = '\0OPEN'+Math.random()+'\0';
	var escClose = '\0CLOSE'+Math.random()+'\0';
	var escComma = '\0COMMA'+Math.random()+'\0';
	var escPeriod = '\0PERIOD'+Math.random()+'\0';

	function numeric(str) {
	  return parseInt(str, 10) == str
	    ? parseInt(str, 10)
	    : str.charCodeAt(0);
	}

	function escapeBraces(str) {
	  return str.split('\\\\').join(escSlash)
	            .split('\\{').join(escOpen)
	            .split('\\}').join(escClose)
	            .split('\\,').join(escComma)
	            .split('\\.').join(escPeriod);
	}

	function unescapeBraces(str) {
	  return str.split(escSlash).join('\\')
	            .split(escOpen).join('{')
	            .split(escClose).join('}')
	            .split(escComma).join(',')
	            .split(escPeriod).join('.');
	}


	// Basically just str.split(","), but handling cases
	// where we have nested braced sections, which should be
	// treated as individual members, like {a,{b,c},d}
	function parseCommaParts(str) {
	  if (!str)
	    return [''];

	  var parts = [];
	  var m = balanced('{', '}', str);

	  if (!m)
	    return str.split(',');

	  var pre = m.pre;
	  var body = m.body;
	  var post = m.post;
	  var p = pre.split(',');

	  p[p.length-1] += '{' + body + '}';
	  var postParts = parseCommaParts(post);
	  if (post.length) {
	    p[p.length-1] += postParts.shift();
	    p.push.apply(p, postParts);
	  }

	  parts.push.apply(parts, p);

	  return parts;
	}

	function expandTop(str) {
	  if (!str)
	    return [];

	  // I don't know why Bash 4.3 does this, but it does.
	  // Anything starting with {} will have the first two bytes preserved
	  // but *only* at the top level, so {},a}b will not expand to anything,
	  // but a{},b}c will be expanded to [a}c,abc].
	  // One could argue that this is a bug in Bash, but since the goal of
	  // this module is to match Bash's rules, we escape a leading {}
	  if (str.substr(0, 2) === '{}') {
	    str = '\\{\\}' + str.substr(2);
	  }

	  return expand(escapeBraces(str), true).map(unescapeBraces);
	}

	function identity(e) {
	  return e;
	}

	function embrace(str) {
	  return '{' + str + '}';
	}
	function isPadded(el) {
	  return /^-?0\d/.test(el);
	}

	function lte(i, y) {
	  return i <= y;
	}
	function gte(i, y) {
	  return i >= y;
	}

	function expand(str, isTop) {
	  var expansions = [];

	  var m = balanced('{', '}', str);
	  if (!m || /\$$/.test(m.pre)) return [str];

	  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
	  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
	  var isSequence = isNumericSequence || isAlphaSequence;
	  var isOptions = /^(.*,)+(.+)?$/.test(m.body);
	  if (!isSequence && !isOptions) {
	    // {a},b}
	    if (m.post.match(/,.*\}/)) {
	      str = m.pre + '{' + m.body + escClose + m.post;
	      return expand(str);
	    }
	    return [str];
	  }

	  var n;
	  if (isSequence) {
	    n = m.body.split(/\.\./);
	  } else {
	    n = parseCommaParts(m.body);
	    if (n.length === 1) {
	      // x{{a,b}}y ==> x{a}y x{b}y
	      n = expand(n[0], false).map(embrace);
	      if (n.length === 1) {
	        var post = m.post.length
	          ? expand(m.post, false)
	          : [''];
	        return post.map(function(p) {
	          return m.pre + n[0] + p;
	        });
	      }
	    }
	  }

	  // at this point, n is the parts, and we know it's not a comma set
	  // with a single entry.

	  // no need to expand pre, since it is guaranteed to be free of brace-sets
	  var pre = m.pre;
	  var post = m.post.length
	    ? expand(m.post, false)
	    : [''];

	  var N;

	  if (isSequence) {
	    var x = numeric(n[0]);
	    var y = numeric(n[1]);
	    var width = Math.max(n[0].length, n[1].length)
	    var incr = n.length == 3
	      ? Math.abs(numeric(n[2]))
	      : 1;
	    var test = lte;
	    var reverse = y < x;
	    if (reverse) {
	      incr *= -1;
	      test = gte;
	    }
	    var pad = n.some(isPadded);

	    N = [];

	    for (var i = x; test(i, y); i += incr) {
	      var c;
	      if (isAlphaSequence) {
	        c = String.fromCharCode(i);
	        if (c === '\\')
	          c = '';
	      } else {
	        c = String(i);
	        if (pad) {
	          var need = width - c.length;
	          if (need > 0) {
	            var z = new Array(need + 1).join('0');
	            if (i < 0)
	              c = '-' + z + c.slice(1);
	            else
	              c = z + c;
	          }
	        }
	      }
	      N.push(c);
	    }
	  } else {
	    N = concatMap(n, function(el) { return expand(el, false) });
	  }

	  for (var j = 0; j < N.length; j++) {
	    for (var k = 0; k < post.length; k++) {
	      var expansion = pre + N[j] + post[k];
	      if (!isTop || isSequence || expansion)
	        expansions.push(expansion);
	    }
	  }

	  return expansions;
	}



/***/ },
/* 82 */
/***/ function(module, exports) {

	module.exports = function (xs, fn) {
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        var x = fn(xs[i], i);
	        if (isArray(x)) res.push.apply(res, x);
	        else res.push(x);
	    }
	    return res;
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 83 */
/***/ function(module, exports) {

	module.exports = balanced;
	function balanced(a, b, str) {
	  if (a instanceof RegExp) a = maybeMatch(a, str);
	  if (b instanceof RegExp) b = maybeMatch(b, str);

	  var r = range(a, b, str);

	  return r && {
	    start: r[0],
	    end: r[1],
	    pre: str.slice(0, r[0]),
	    body: str.slice(r[0] + a.length, r[1]),
	    post: str.slice(r[1] + b.length)
	  };
	}

	function maybeMatch(reg, str) {
	  var m = str.match(reg);
	  return m ? m[0] : null;
	}

	balanced.range = range;
	function range(a, b, str) {
	  var begs, beg, left, right, result;
	  var ai = str.indexOf(a);
	  var bi = str.indexOf(b, ai + 1);
	  var i = ai;

	  if (ai >= 0 && bi > 0) {
	    begs = [];
	    left = str.length;

	    while (i >= 0 && !result) {
	      if (i == ai) {
	        begs.push(i);
	        ai = str.indexOf(a, i + 1);
	      } else if (begs.length == 1) {
	        result = [ begs.pop(), bi ];
	      } else {
	        beg = begs.pop();
	        if (beg < left) {
	          left = beg;
	          right = bi;
	        }

	        bi = str.indexOf(b, i + 1);
	      }

	      i = ai < bi && ai >= 0 ? ai : bi;
	    }

	    if (begs.length) {
	      result = [ left, right ];
	    }
	  }

	  return result;
	}


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	function posix(path) {
		return path.charAt(0) === '/';
	}

	function win32(path) {
		// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
		var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
		var result = splitDeviceRe.exec(path);
		var device = result[1] || '';
		var isUnc = Boolean(device && device.charAt(1) !== ':');

		// UNC paths are always absolute
		return Boolean(result[2] || isUnc);
	}

	module.exports = process.platform === 'win32' ? win32 : posix;
	module.exports.posix = posix;
	module.exports.win32 = win32;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {module.exports = globSync
	globSync.GlobSync = GlobSync

	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	var rp = __webpack_require__(78)
	var minimatch = __webpack_require__(80)
	var Minimatch = minimatch.Minimatch
	var Glob = __webpack_require__(77).Glob
	var util = __webpack_require__(12)
	var path = __webpack_require__(61)
	var assert = __webpack_require__(11)
	var isAbsolute = __webpack_require__(84)
	var common = __webpack_require__(86)
	var alphasort = common.alphasort
	var alphasorti = common.alphasorti
	var setopts = common.setopts
	var ownProp = common.ownProp
	var childrenIgnored = common.childrenIgnored

	function globSync (pattern, options) {
	  if (typeof options === 'function' || arguments.length === 3)
	    throw new TypeError('callback provided to sync glob\n'+
	                        'See: https://github.com/isaacs/node-glob/issues/167')

	  return new GlobSync(pattern, options).found
	}

	function GlobSync (pattern, options) {
	  if (!pattern)
	    throw new Error('must provide pattern')

	  if (typeof options === 'function' || arguments.length === 3)
	    throw new TypeError('callback provided to sync glob\n'+
	                        'See: https://github.com/isaacs/node-glob/issues/167')

	  if (!(this instanceof GlobSync))
	    return new GlobSync(pattern, options)

	  setopts(this, pattern, options)

	  if (this.noprocess)
	    return this

	  var n = this.minimatch.set.length
	  this.matches = new Array(n)
	  for (var i = 0; i < n; i ++) {
	    this._process(this.minimatch.set[i], i, false)
	  }
	  this._finish()
	}

	GlobSync.prototype._finish = function () {
	  assert(this instanceof GlobSync)
	  if (this.realpath) {
	    var self = this
	    this.matches.forEach(function (matchset, index) {
	      var set = self.matches[index] = Object.create(null)
	      for (var p in matchset) {
	        try {
	          p = self._makeAbs(p)
	          var real = rp.realpathSync(p, self.realpathCache)
	          set[real] = true
	        } catch (er) {
	          if (er.syscall === 'stat')
	            set[self._makeAbs(p)] = true
	          else
	            throw er
	        }
	      }
	    })
	  }
	  common.finish(this)
	}


	GlobSync.prototype._process = function (pattern, index, inGlobStar) {
	  assert(this instanceof GlobSync)

	  // Get the first [n] parts of pattern that are all strings.
	  var n = 0
	  while (typeof pattern[n] === 'string') {
	    n ++
	  }
	  // now n is the index of the first one that is *not* a string.

	  // See if there's anything else
	  var prefix
	  switch (n) {
	    // if not, then this is rather simple
	    case pattern.length:
	      this._processSimple(pattern.join('/'), index)
	      return

	    case 0:
	      // pattern *starts* with some non-trivial item.
	      // going to readdir(cwd), but not include the prefix in matches.
	      prefix = null
	      break

	    default:
	      // pattern has some string bits in the front.
	      // whatever it starts with, whether that's 'absolute' like /foo/bar,
	      // or 'relative' like '../baz'
	      prefix = pattern.slice(0, n).join('/')
	      break
	  }

	  var remain = pattern.slice(n)

	  // get the list of entries.
	  var read
	  if (prefix === null)
	    read = '.'
	  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
	    if (!prefix || !isAbsolute(prefix))
	      prefix = '/' + prefix
	    read = prefix
	  } else
	    read = prefix

	  var abs = this._makeAbs(read)

	  //if ignored, skip processing
	  if (childrenIgnored(this, read))
	    return

	  var isGlobStar = remain[0] === minimatch.GLOBSTAR
	  if (isGlobStar)
	    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar)
	  else
	    this._processReaddir(prefix, read, abs, remain, index, inGlobStar)
	}


	GlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {
	  var entries = this._readdir(abs, inGlobStar)

	  // if the abs isn't a dir, then nothing can match!
	  if (!entries)
	    return

	  // It will only match dot entries if it starts with a dot, or if
	  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
	  var pn = remain[0]
	  var negate = !!this.minimatch.negate
	  var rawGlob = pn._glob
	  var dotOk = this.dot || rawGlob.charAt(0) === '.'

	  var matchedEntries = []
	  for (var i = 0; i < entries.length; i++) {
	    var e = entries[i]
	    if (e.charAt(0) !== '.' || dotOk) {
	      var m
	      if (negate && !prefix) {
	        m = !e.match(pn)
	      } else {
	        m = e.match(pn)
	      }
	      if (m)
	        matchedEntries.push(e)
	    }
	  }

	  var len = matchedEntries.length
	  // If there are no matched entries, then nothing matches.
	  if (len === 0)
	    return

	  // if this is the last remaining pattern bit, then no need for
	  // an additional stat *unless* the user has specified mark or
	  // stat explicitly.  We know they exist, since readdir returned
	  // them.

	  if (remain.length === 1 && !this.mark && !this.stat) {
	    if (!this.matches[index])
	      this.matches[index] = Object.create(null)

	    for (var i = 0; i < len; i ++) {
	      var e = matchedEntries[i]
	      if (prefix) {
	        if (prefix.slice(-1) !== '/')
	          e = prefix + '/' + e
	        else
	          e = prefix + e
	      }

	      if (e.charAt(0) === '/' && !this.nomount) {
	        e = path.join(this.root, e)
	      }
	      this.matches[index][e] = true
	    }
	    // This was the last one, and no stats were needed
	    return
	  }

	  // now test all matched entries as stand-ins for that part
	  // of the pattern.
	  remain.shift()
	  for (var i = 0; i < len; i ++) {
	    var e = matchedEntries[i]
	    var newPattern
	    if (prefix)
	      newPattern = [prefix, e]
	    else
	      newPattern = [e]
	    this._process(newPattern.concat(remain), index, inGlobStar)
	  }
	}


	GlobSync.prototype._emitMatch = function (index, e) {
	  var abs = this._makeAbs(e)
	  if (this.mark)
	    e = this._mark(e)

	  if (this.matches[index][e])
	    return

	  if (this.nodir) {
	    var c = this.cache[this._makeAbs(e)]
	    if (c === 'DIR' || Array.isArray(c))
	      return
	  }

	  this.matches[index][e] = true
	  if (this.stat)
	    this._stat(e)
	}


	GlobSync.prototype._readdirInGlobStar = function (abs) {
	  // follow all symlinked directories forever
	  // just proceed as if this is a non-globstar situation
	  if (this.follow)
	    return this._readdir(abs, false)

	  var entries
	  var lstat
	  var stat
	  try {
	    lstat = fs.lstatSync(abs)
	  } catch (er) {
	    // lstat failed, doesn't exist
	    return null
	  }

	  var isSym = lstat.isSymbolicLink()
	  this.symlinks[abs] = isSym

	  // If it's not a symlink or a dir, then it's definitely a regular file.
	  // don't bother doing a readdir in that case.
	  if (!isSym && !lstat.isDirectory())
	    this.cache[abs] = 'FILE'
	  else
	    entries = this._readdir(abs, false)

	  return entries
	}

	GlobSync.prototype._readdir = function (abs, inGlobStar) {
	  var entries

	  if (inGlobStar && !ownProp(this.symlinks, abs))
	    return this._readdirInGlobStar(abs)

	  if (ownProp(this.cache, abs)) {
	    var c = this.cache[abs]
	    if (!c || c === 'FILE')
	      return null

	    if (Array.isArray(c))
	      return c
	  }

	  try {
	    return this._readdirEntries(abs, fs.readdirSync(abs))
	  } catch (er) {
	    this._readdirError(abs, er)
	    return null
	  }
	}

	GlobSync.prototype._readdirEntries = function (abs, entries) {
	  // if we haven't asked to stat everything, then just
	  // assume that everything in there exists, so we can avoid
	  // having to stat it a second time.
	  if (!this.mark && !this.stat) {
	    for (var i = 0; i < entries.length; i ++) {
	      var e = entries[i]
	      if (abs === '/')
	        e = abs + e
	      else
	        e = abs + '/' + e
	      this.cache[e] = true
	    }
	  }

	  this.cache[abs] = entries

	  // mark and cache dir-ness
	  return entries
	}

	GlobSync.prototype._readdirError = function (f, er) {
	  // handle errors, and cache the information
	  switch (er.code) {
	    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
	    case 'ENOTDIR': // totally normal. means it *does* exist.
	      var abs = this._makeAbs(f)
	      this.cache[abs] = 'FILE'
	      if (abs === this.cwdAbs) {
	        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
	        error.path = this.cwd
	        error.code = er.code
	        throw error
	      }
	      break

	    case 'ENOENT': // not terribly unusual
	    case 'ELOOP':
	    case 'ENAMETOOLONG':
	    case 'UNKNOWN':
	      this.cache[this._makeAbs(f)] = false
	      break

	    default: // some unusual error.  Treat as failure.
	      this.cache[this._makeAbs(f)] = false
	      if (this.strict)
	        throw er
	      if (!this.silent)
	        console.error('glob error', er)
	      break
	  }
	}

	GlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {

	  var entries = this._readdir(abs, inGlobStar)

	  // no entries means not a dir, so it can never have matches
	  // foo.txt/** doesn't match foo.txt
	  if (!entries)
	    return

	  // test without the globstar, and with every child both below
	  // and replacing the globstar.
	  var remainWithoutGlobStar = remain.slice(1)
	  var gspref = prefix ? [ prefix ] : []
	  var noGlobStar = gspref.concat(remainWithoutGlobStar)

	  // the noGlobStar pattern exits the inGlobStar state
	  this._process(noGlobStar, index, false)

	  var len = entries.length
	  var isSym = this.symlinks[abs]

	  // If it's a symlink, and we're in a globstar, then stop
	  if (isSym && inGlobStar)
	    return

	  for (var i = 0; i < len; i++) {
	    var e = entries[i]
	    if (e.charAt(0) === '.' && !this.dot)
	      continue

	    // these two cases enter the inGlobStar state
	    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
	    this._process(instead, index, true)

	    var below = gspref.concat(entries[i], remain)
	    this._process(below, index, true)
	  }
	}

	GlobSync.prototype._processSimple = function (prefix, index) {
	  // XXX review this.  Shouldn't it be doing the mounting etc
	  // before doing stat?  kinda weird?
	  var exists = this._stat(prefix)

	  if (!this.matches[index])
	    this.matches[index] = Object.create(null)

	  // If it doesn't exist, then just mark the lack of results
	  if (!exists)
	    return

	  if (prefix && isAbsolute(prefix) && !this.nomount) {
	    var trail = /[\/\\]$/.test(prefix)
	    if (prefix.charAt(0) === '/') {
	      prefix = path.join(this.root, prefix)
	    } else {
	      prefix = path.resolve(this.root, prefix)
	      if (trail)
	        prefix += '/'
	    }
	  }

	  if (process.platform === 'win32')
	    prefix = prefix.replace(/\\/g, '/')

	  // Mark this as a match
	  this.matches[index][prefix] = true
	}

	// Returns either 'DIR', 'FILE', or false
	GlobSync.prototype._stat = function (f) {
	  var abs = this._makeAbs(f)
	  var needDir = f.slice(-1) === '/'

	  if (f.length > this.maxLength)
	    return false

	  if (!this.stat && ownProp(this.cache, abs)) {
	    var c = this.cache[abs]

	    if (Array.isArray(c))
	      c = 'DIR'

	    // It exists, but maybe not how we need it
	    if (!needDir || c === 'DIR')
	      return c

	    if (needDir && c === 'FILE')
	      return false

	    // otherwise we have to stat, because maybe c=true
	    // if we know it exists, but not what it is.
	  }

	  var exists
	  var stat = this.statCache[abs]
	  if (!stat) {
	    var lstat
	    try {
	      lstat = fs.lstatSync(abs)
	    } catch (er) {
	      return false
	    }

	    if (lstat.isSymbolicLink()) {
	      try {
	        stat = fs.statSync(abs)
	      } catch (er) {
	        stat = lstat
	      }
	    } else {
	      stat = lstat
	    }
	  }

	  this.statCache[abs] = stat

	  var c = stat.isDirectory() ? 'DIR' : 'FILE'
	  this.cache[abs] = this.cache[abs] || c

	  if (needDir && c !== 'DIR')
	    return false

	  return c
	}

	GlobSync.prototype._mark = function (p) {
	  return common.mark(this, p)
	}

	GlobSync.prototype._makeAbs = function (f) {
	  return common.makeAbs(this, f)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {exports.alphasort = alphasort
	exports.alphasorti = alphasorti
	exports.setopts = setopts
	exports.ownProp = ownProp
	exports.makeAbs = makeAbs
	exports.finish = finish
	exports.mark = mark
	exports.isIgnored = isIgnored
	exports.childrenIgnored = childrenIgnored

	function ownProp (obj, field) {
	  return Object.prototype.hasOwnProperty.call(obj, field)
	}

	var path = __webpack_require__(61)
	var minimatch = __webpack_require__(80)
	var isAbsolute = __webpack_require__(84)
	var Minimatch = minimatch.Minimatch

	function alphasorti (a, b) {
	  return a.toLowerCase().localeCompare(b.toLowerCase())
	}

	function alphasort (a, b) {
	  return a.localeCompare(b)
	}

	function setupIgnores (self, options) {
	  self.ignore = options.ignore || []

	  if (!Array.isArray(self.ignore))
	    self.ignore = [self.ignore]

	  if (self.ignore.length) {
	    self.ignore = self.ignore.map(ignoreMap)
	  }
	}

	// ignore patterns are always in dot:true mode.
	function ignoreMap (pattern) {
	  var gmatcher = null
	  if (pattern.slice(-3) === '/**') {
	    var gpattern = pattern.replace(/(\/\*\*)+$/, '')
	    gmatcher = new Minimatch(gpattern, { dot: true })
	  }

	  return {
	    matcher: new Minimatch(pattern, { dot: true }),
	    gmatcher: gmatcher
	  }
	}

	function setopts (self, pattern, options) {
	  if (!options)
	    options = {}

	  // base-matching: just use globstar for that.
	  if (options.matchBase && -1 === pattern.indexOf("/")) {
	    if (options.noglobstar) {
	      throw new Error("base matching requires globstar")
	    }
	    pattern = "**/" + pattern
	  }

	  self.silent = !!options.silent
	  self.pattern = pattern
	  self.strict = options.strict !== false
	  self.realpath = !!options.realpath
	  self.realpathCache = options.realpathCache || Object.create(null)
	  self.follow = !!options.follow
	  self.dot = !!options.dot
	  self.mark = !!options.mark
	  self.nodir = !!options.nodir
	  if (self.nodir)
	    self.mark = true
	  self.sync = !!options.sync
	  self.nounique = !!options.nounique
	  self.nonull = !!options.nonull
	  self.nosort = !!options.nosort
	  self.nocase = !!options.nocase
	  self.stat = !!options.stat
	  self.noprocess = !!options.noprocess

	  self.maxLength = options.maxLength || Infinity
	  self.cache = options.cache || Object.create(null)
	  self.statCache = options.statCache || Object.create(null)
	  self.symlinks = options.symlinks || Object.create(null)

	  setupIgnores(self, options)

	  self.changedCwd = false
	  var cwd = process.cwd()
	  if (!ownProp(options, "cwd"))
	    self.cwd = cwd
	  else {
	    self.cwd = path.resolve(options.cwd)
	    self.changedCwd = self.cwd !== cwd
	  }

	  self.root = options.root || path.resolve(self.cwd, "/")
	  self.root = path.resolve(self.root)
	  if (process.platform === "win32")
	    self.root = self.root.replace(/\\/g, "/")

	  self.cwdAbs = makeAbs(self, self.cwd)
	  self.nomount = !!options.nomount

	  // disable comments and negation in Minimatch.
	  // Note that they are not supported in Glob itself anyway.
	  options.nonegate = true
	  options.nocomment = true

	  self.minimatch = new Minimatch(pattern, options)
	  self.options = self.minimatch.options
	}

	function finish (self) {
	  var nou = self.nounique
	  var all = nou ? [] : Object.create(null)

	  for (var i = 0, l = self.matches.length; i < l; i ++) {
	    var matches = self.matches[i]
	    if (!matches || Object.keys(matches).length === 0) {
	      if (self.nonull) {
	        // do like the shell, and spit out the literal glob
	        var literal = self.minimatch.globSet[i]
	        if (nou)
	          all.push(literal)
	        else
	          all[literal] = true
	      }
	    } else {
	      // had matches
	      var m = Object.keys(matches)
	      if (nou)
	        all.push.apply(all, m)
	      else
	        m.forEach(function (m) {
	          all[m] = true
	        })
	    }
	  }

	  if (!nou)
	    all = Object.keys(all)

	  if (!self.nosort)
	    all = all.sort(self.nocase ? alphasorti : alphasort)

	  // at *some* point we statted all of these
	  if (self.mark) {
	    for (var i = 0; i < all.length; i++) {
	      all[i] = self._mark(all[i])
	    }
	    if (self.nodir) {
	      all = all.filter(function (e) {
	        var notDir = !(/\/$/.test(e))
	        var c = self.cache[e] || self.cache[makeAbs(self, e)]
	        if (notDir && c)
	          notDir = c !== 'DIR' && !Array.isArray(c)
	        return notDir
	      })
	    }
	  }

	  if (self.ignore.length)
	    all = all.filter(function(m) {
	      return !isIgnored(self, m)
	    })

	  self.found = all
	}

	function mark (self, p) {
	  var abs = makeAbs(self, p)
	  var c = self.cache[abs]
	  var m = p
	  if (c) {
	    var isDir = c === 'DIR' || Array.isArray(c)
	    var slash = p.slice(-1) === '/'

	    if (isDir && !slash)
	      m += '/'
	    else if (!isDir && slash)
	      m = m.slice(0, -1)

	    if (m !== p) {
	      var mabs = makeAbs(self, m)
	      self.statCache[mabs] = self.statCache[abs]
	      self.cache[mabs] = self.cache[abs]
	    }
	  }

	  return m
	}

	// lotta situps...
	function makeAbs (self, f) {
	  var abs = f
	  if (f.charAt(0) === '/') {
	    abs = path.join(self.root, f)
	  } else if (isAbsolute(f) || f === '') {
	    abs = f
	  } else if (self.changedCwd) {
	    abs = path.resolve(self.cwd, f)
	  } else {
	    abs = path.resolve(f)
	  }

	  if (process.platform === 'win32')
	    abs = abs.replace(/\\/g, '/')

	  return abs
	}


	// Return true, if pattern ends with globstar '**', for the accompanying parent directory.
	// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents
	function isIgnored (self, path) {
	  if (!self.ignore.length)
	    return false

	  return self.ignore.some(function(item) {
	    return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path))
	  })
	}

	function childrenIgnored (self, path) {
	  if (!self.ignore.length)
	    return false

	  return self.ignore.some(function(item) {
	    return !!(item.gmatcher && item.gmatcher.match(path))
	  })
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var wrappy = __webpack_require__(88)
	var reqs = Object.create(null)
	var once = __webpack_require__(89)

	module.exports = wrappy(inflight)

	function inflight (key, cb) {
	  if (reqs[key]) {
	    reqs[key].push(cb)
	    return null
	  } else {
	    reqs[key] = [cb]
	    return makeres(key)
	  }
	}

	function makeres (key) {
	  return once(function RES () {
	    var cbs = reqs[key]
	    var len = cbs.length
	    var args = slice(arguments)

	    // XXX It's somewhat ambiguous whether a new callback added in this
	    // pass should be queued for later execution if something in the
	    // list of callbacks throws, or if it should just be discarded.
	    // However, it's such an edge case that it hardly matters, and either
	    // choice is likely as surprising as the other.
	    // As it happens, we do go ahead and schedule it for later execution.
	    try {
	      for (var i = 0; i < len; i++) {
	        cbs[i].apply(null, args)
	      }
	    } finally {
	      if (cbs.length > len) {
	        // added more in the interim.
	        // de-zalgo, just in case, but don't call again.
	        cbs.splice(0, len)
	        process.nextTick(function () {
	          RES.apply(null, args)
	        })
	      } else {
	        delete reqs[key]
	      }
	    }
	  })
	}

	function slice (args) {
	  var length = args.length
	  var array = []

	  for (var i = 0; i < length; i++) array[i] = args[i]
	  return array
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 88 */
/***/ function(module, exports) {

	// Returns a wrapper function that returns a wrapped callback
	// The wrapper function should do some stuff, and return a
	// presumably different callback function.
	// This makes sure that own properties are retained, so that
	// decorations and such are not lost along the way.
	module.exports = wrappy
	function wrappy (fn, cb) {
	  if (fn && cb) return wrappy(fn)(cb)

	  if (typeof fn !== 'function')
	    throw new TypeError('need wrapper function')

	  Object.keys(fn).forEach(function (k) {
	    wrapper[k] = fn[k]
	  })

	  return wrapper

	  function wrapper() {
	    var args = new Array(arguments.length)
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i]
	    }
	    var ret = fn.apply(this, args)
	    var cb = args[args.length-1]
	    if (typeof ret === 'function' && ret !== cb) {
	      Object.keys(cb).forEach(function (k) {
	        ret[k] = cb[k]
	      })
	    }
	    return ret
	  }
	}


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var wrappy = __webpack_require__(88)
	module.exports = wrappy(once)
	module.exports.strict = wrappy(onceStrict)

	once.proto = once(function () {
	  Object.defineProperty(Function.prototype, 'once', {
	    value: function () {
	      return once(this)
	    },
	    configurable: true
	  })

	  Object.defineProperty(Function.prototype, 'onceStrict', {
	    value: function () {
	      return onceStrict(this)
	    },
	    configurable: true
	  })
	})

	function once (fn) {
	  var f = function () {
	    if (f.called) return f.value
	    f.called = true
	    return f.value = fn.apply(this, arguments)
	  }
	  f.called = false
	  return f
	}

	function onceStrict (fn) {
	  var f = function () {
	    if (f.called)
	      throw new Error(f.onceError)
	    f.called = true
	    return f.value = fn.apply(this, arguments)
	  }
	  var name = fn.name || 'Function wrapped with `once`'
	  f.onceError = name + " shouldn't be called more than once"
	  f.called = false
	  return f
	}


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*!
	 * Tmp
	 *
	 * Copyright (c) 2011-2015 KARASZI Istvan <github@spam.raszi.hu>
	 *
	 * MIT Licensed
	 */

	/**
	 * Module dependencies.
	 */
	var
	  fs     = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  path   = __webpack_require__(61),
	  crypto = __webpack_require__(91),
	  tmpDir = __webpack_require__(120),
	  _c     = process.binding('constants');


	/**
	 * The working inner variables.
	 */
	var
	  // store the actual TMP directory
	  _TMP = tmpDir(),

	  // the random characters to choose from
	  RANDOM_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',

	  TEMPLATE_PATTERN = /XXXXXX/,

	  DEFAULT_TRIES = 3,

	  CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR),

	  DIR_MODE = 448 /* 0700 */,
	  FILE_MODE = 384 /* 0600 */,

	  // this will hold the objects need to be removed on exit
	  _removeObjects = [],

	  _gracefulCleanup = false,
	  _uncaughtException = false;

	/**
	 * Random name generator based on crypto.
	 * Adapted from http://blog.tompawlak.org/how-to-generate-random-values-nodejs-javascript
	 *
	 * @param {Number} howMany
	 * @return {String}
	 * @api private
	 */
	function _randomChars(howMany) {
	  var
	    value = [],
	    rnd = null;

	  // make sure that we do not fail because we ran out of entropy
	  try {
	    rnd = crypto.randomBytes(howMany);
	  } catch (e) {
	    rnd = crypto.pseudoRandomBytes(howMany);
	  }

	  for (var i = 0; i < howMany; i++) {
	    value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);
	  }

	  return value.join('');
	}

	/**
	 * Checks whether the `obj` parameter is defined or not.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */
	function _isUndefined(obj) {
	  return typeof obj === 'undefined';
	}

	/**
	 * Parses the function arguments.
	 *
	 * This function helps to have optional arguments.
	 *
	 * @param {Object} options
	 * @param {Function} callback
	 * @api private
	 */
	function _parseArguments(options, callback) {
	  if (typeof options == 'function') {
	    var
	      tmp = options,
	      options = callback || {},
	      callback = tmp;
	  } else if (typeof options == 'undefined') {
	    options = {};
	  }

	  return [options, callback];
	}

	/**
	 * Generates a new temporary name.
	 *
	 * @param {Object} opts
	 * @returns {String}
	 * @api private
	 */
	function _generateTmpName(opts) {
	  if (opts.name) {
	    return path.join(opts.dir || _TMP, opts.name);
	  }

	  // mkstemps like template
	  if (opts.template) {
	    return opts.template.replace(TEMPLATE_PATTERN, _randomChars(6));
	  }

	  // prefix and postfix
	  var name = [
	    opts.prefix || 'tmp-',
	    process.pid,
	    _randomChars(12),
	    opts.postfix || ''
	  ].join('');

	  return path.join(opts.dir || _TMP, name);
	}

	/**
	 * Gets a temporary file name.
	 *
	 * @param {Object} options
	 * @param {Function} callback
	 * @api private
	 */
	function _getTmpName(options, callback) {
	  var
	    args = _parseArguments(options, callback),
	    opts = args[0],
	    cb = args[1],
	    tries = opts.tries || DEFAULT_TRIES;

	  if (isNaN(tries) || tries < 0)
	    return cb(new Error('Invalid tries'));

	  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))
	    return cb(new Error('Invalid template provided'));

	  (function _getUniqueName() {
	    var name = _generateTmpName(opts);

	    // check whether the path exists then retry if needed
	    fs.stat(name, function (err) {
	      if (!err) {
	        if (tries-- > 0) return _getUniqueName();

	        return cb(new Error('Could not get a unique tmp filename, max tries reached ' + name));
	      }

	      cb(null, name);
	    });
	  }());
	}

	/**
	 * Synchronous version of _getTmpName.
	 *
	 * @param {Object} options
	 * @returns {String}
	 * @api private
	 */
	function _getTmpNameSync(options) {
	  var
	    args = _parseArguments(options),
	    opts = args[0],
	    tries = opts.tries || DEFAULT_TRIES;

	  if (isNaN(tries) || tries < 0)
	    throw new Error('Invalid tries');

	  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))
	    throw new Error('Invalid template provided');

	  do {
	    var name = _generateTmpName(opts);
	    try {
	      fs.statSync(name);
	    } catch (e) {
	      return name;
	    }
	  } while (tries-- > 0);

	  throw new Error('Could not get a unique tmp filename, max tries reached');
	}

	/**
	 * Creates and opens a temporary file.
	 *
	 * @param {Object} options
	 * @param {Function} callback
	 * @api public
	 */
	function _createTmpFile(options, callback) {
	  var
	    args = _parseArguments(options, callback),
	    opts = args[0],
	    cb = args[1];

	  opts.postfix = (_isUndefined(opts.postfix)) ? '.tmp' : opts.postfix;

	  // gets a temporary filename
	  _getTmpName(opts, function _tmpNameCreated(err, name) {
	    if (err) return cb(err);

	    // create and open the file
	    fs.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err, fd) {
	      if (err) return cb(err);

	      cb(null, name, fd, _prepareTmpFileRemoveCallback(name, fd, opts));
	    });
	  });
	}

	/**
	 * Synchronous version of _createTmpFile.
	 *
	 * @param {Object} options
	 * @returns {Object} object consists of name, fd and removeCallback
	 * @api private
	 */
	function _createTmpFileSync(options) {
	  var
	    args = _parseArguments(options),
	    opts = args[0];

	  opts.postfix = opts.postfix || '.tmp';

	  var name = _getTmpNameSync(opts);
	  var fd = fs.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);

	  return {
	    name : name,
	    fd : fd,
	    removeCallback : _prepareTmpFileRemoveCallback(name, fd, opts)
	  };
	}

	/**
	 * Removes files and folders in a directory recursively.
	 *
	 * @param {String} root
	 * @api private
	 */
	function _rmdirRecursiveSync(root) {
	  var dirs = [root];

	  do {
	    var
	      dir = dirs.pop(),
	      deferred = false,
	      files = fs.readdirSync(dir);

	    for (var i = 0, length = files.length; i < length; i++) {
	      var
	        file = path.join(dir, files[i]),
	        stat = fs.lstatSync(file); // lstat so we don't recurse into symlinked directories

	      if (stat.isDirectory()) {
	        if (!deferred) {
	          deferred = true;
	          dirs.push(dir);
	        }
	        dirs.push(file);
	      } else {
	        fs.unlinkSync(file);
	      }
	    }

	    if (!deferred) {
	      fs.rmdirSync(dir);
	    }
	  } while (dirs.length !== 0);
	}

	/**
	 * Creates a temporary directory.
	 *
	 * @param {Object} options
	 * @param {Function} callback
	 * @api public
	 */
	function _createTmpDir(options, callback) {
	  var
	    args = _parseArguments(options, callback),
	    opts = args[0],
	    cb = args[1];

	  // gets a temporary filename
	  _getTmpName(opts, function _tmpNameCreated(err, name) {
	    if (err) return cb(err);

	    // create the directory
	    fs.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err) {
	      if (err) return cb(err);

	      cb(null, name, _prepareTmpDirRemoveCallback(name, opts));
	    });
	  });
	}

	/**
	 * Synchronous version of _createTmpDir.
	 *
	 * @param {Object} options
	 * @returns {Object} object consists of name and removeCallback
	 * @api private
	 */
	function _createTmpDirSync(options) {
	  var
	    args = _parseArguments(options),
	    opts = args[0];

	  var name = _getTmpNameSync(opts);
	  fs.mkdirSync(name, opts.mode || DIR_MODE);

	  return {
	    name : name,
	    removeCallback : _prepareTmpDirRemoveCallback(name, opts)
	  };
	}

	/**
	 * Prepares the callback for removal of the temporary file.
	 *
	 * @param {String} name
	 * @param {int} fd
	 * @param {Object} opts
	 * @api private
	 * @returns {Function} the callback
	 */
	function _prepareTmpFileRemoveCallback(name, fd, opts) {
	  var removeCallback = _prepareRemoveCallback(function _removeCallback(fdPath) {
	    try {
	      fs.closeSync(fdPath[0]);
	    }
	    catch (e) {
	      // under some node/windows related circumstances, a temporary file
	      // may have not be created as expected or the file was already closed
	      // by the user, in which case we will simply ignore the error
	      if (e.errno != -(_c.EBADF || _c.os.errno.EBADF) && e.errno != -(_c.ENOENT || _c.os.errno.ENOENT)) {
	        // reraise any unanticipated error
	        throw e;
	      }
	    }
	    fs.unlinkSync(fdPath[1]);
	  }, [fd, name]);

	  if (!opts.keep) {
	    _removeObjects.unshift(removeCallback);
	  }

	  return removeCallback;
	}

	/**
	 * Prepares the callback for removal of the temporary directory.
	 *
	 * @param {String} name
	 * @param {Object} opts
	 * @returns {Function} the callback
	 * @api private
	 */
	function _prepareTmpDirRemoveCallback(name, opts) {
	  var removeFunction = opts.unsafeCleanup ? _rmdirRecursiveSync : fs.rmdirSync.bind(fs);
	  var removeCallback = _prepareRemoveCallback(removeFunction, name);

	  if (!opts.keep) {
	    _removeObjects.unshift(removeCallback);
	  }

	  return removeCallback;
	}

	/**
	 * Creates a guarded function wrapping the removeFunction call.
	 *
	 * @param {Function} removeFunction
	 * @param {Object} arg
	 * @returns {Function}
	 * @api private
	 */
	function _prepareRemoveCallback(removeFunction, arg) {
	  var called = false;

	  return function _cleanupCallback() {
	    if (called) return;

	    var index = _removeObjects.indexOf(_cleanupCallback);
	    if (index >= 0) {
	      _removeObjects.splice(index, 1);
	    }

	    called = true;
	    removeFunction(arg);
	  };
	}

	/**
	 * The garbage collector.
	 *
	 * @api private
	 */
	function _garbageCollector() {
	  if (_uncaughtException && !_gracefulCleanup) {
	    return;
	  }

	  // the function being called removes itself from _removeObjects,
	  // loop until _removeObjects is empty
	  while (_removeObjects.length) {
	    try {
	      _removeObjects[0].call(null);
	    } catch (e) {
	      // already removed?
	    }
	  }
	}

	function _setGracefulCleanup() {
	  _gracefulCleanup = true;
	}

	var version = process.versions.node.split('.').map(function (value) {
	  return parseInt(value, 10);
	});

	if (version[0] === 0 && (version[1] < 9 || version[1] === 9 && version[2] < 5)) {
	  process.addListener('uncaughtException', function _uncaughtExceptionThrown(err) {
	    _uncaughtException = true;
	    _garbageCollector();

	    throw err;
	  });
	}

	process.addListener('exit', function _exit(code) {
	  if (code) _uncaughtException = true;
	  _garbageCollector();
	});

	// exporting all the needed methods
	module.exports.tmpdir = _TMP;
	module.exports.dir = _createTmpDir;
	module.exports.dirSync = _createTmpDirSync;
	module.exports.file = _createTmpFile;
	module.exports.fileSync = _createTmpFileSync;
	module.exports.tmpName = _getTmpName;
	module.exports.tmpNameSync = _getTmpNameSync;
	module.exports.setGracefulCleanup = _setGracefulCleanup;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(92)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(94)

	exports.createHmac = __webpack_require__(103)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(104)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync
	__webpack_require__(106)(exports, module.exports);

	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(93)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(18).Buffer))

/***/ },
/* 93 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(95)

	var md5 = toConstructor(__webpack_require__(100))
	var rmd160 = toConstructor(__webpack_require__(102))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(18).Buffer
	var Hash   = __webpack_require__(96)(Buffer)

	exports.sha1 = __webpack_require__(97)(Buffer, Hash)
	exports.sha256 = __webpack_require__(98)(Buffer, Hash)
	exports.sha512 = __webpack_require__(99)(Buffer, Hash)


/***/ },
/* 96 */
/***/ function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(12).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(12).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(12).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(101);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(94)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(105)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (crypto, exports) {
	  exports = exports || {};
	  var ciphers = __webpack_require__(107)(crypto);
	  exports.createCipher = ciphers.createCipher;
	  exports.createCipheriv = ciphers.createCipheriv;
	  var deciphers = __webpack_require__(119)(crypto);
	  exports.createDecipher = deciphers.createDecipher;
	  exports.createDecipheriv = deciphers.createDecipheriv;
	  var modes = __webpack_require__(110);
	  function listCiphers () {
	    return Object.keys(modes);
	  }
	  exports.listCiphers = listCiphers;
	};



/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(108);
	var Transform = __webpack_require__(109);
	var inherits = __webpack_require__(26);
	var modes = __webpack_require__(110);
	var ebtk = __webpack_require__(111);
	var StreamCipher = __webpack_require__(112);
	inherits(Cipher, Transform);
	function Cipher(mode, key, iv) {
	  if (!(this instanceof Cipher)) {
	    return new Cipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Cipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.encrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Cipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  this.push(this._mode.encrypt(this, chunk));
	  this._cipher.scrub();
	  next();
	};


	function Splitter() {
	   if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};

	Splitter.prototype.get = function () {
	  if (this.cache.length > 15) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  var len = 16 - this.cache.length;
	  var padBuff = new Buffer(len);

	  var i = -1;
	  while (++i < len) {
	    padBuff.writeUInt8(len, i);
	  }
	  var out = Buffer.concat([this.cache, padBuff]);
	  return out;
	};
	var modelist = {
	  ECB: __webpack_require__(113),
	  CBC: __webpack_require__(114),
	  CFB: __webpack_require__(116),
	  OFB: __webpack_require__(117),
	  CTR: __webpack_require__(118)
	};
	module.exports = function (crypto) {
	  function createCipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key/8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv);
	    }
	    return new Cipher(modelist[config.mode], password, iv);
	  }
	  function createCipher (suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createCipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createCipher: createCipher,
	    createCipheriv: createCipheriv
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var uint_max = Math.pow(2, 32);
	function fixup_uint32(x) {
	    var ret, x_pos;
	    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
	    return ret;
	}
	function scrub_vec(v) {
	  var i, _i, _ref;
	  for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
	    v[i] = 0;
	  }
	  return false;
	}

	function Global() {
	  var i;
	  this.SBOX = [];
	  this.INV_SBOX = [];
	  this.SUB_MIX = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  })();
	  this.INV_SUB_MIX = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  })();
	  this.init();
	  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
	}

	Global.prototype.init = function() {
	  var d, i, sx, t, x, x2, x4, x8, xi, _i;
	  d = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 256; i = ++_i) {
	      if (i < 128) {
	        _results.push(i << 1);
	      } else {
	        _results.push((i << 1) ^ 0x11b);
	      }
	    }
	    return _results;
	  })();
	  x = 0;
	  xi = 0;
	  for (i = _i = 0; _i < 256; i = ++_i) {
	    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	    this.SBOX[x] = sx;
	    this.INV_SBOX[sx] = x;
	    x2 = d[x];
	    x4 = d[x2];
	    x8 = d[x4];
	    t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);
	    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);
	    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);
	    this.SUB_MIX[3][x] = t;
	    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
	    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
	    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
	    this.INV_SUB_MIX[3][sx] = t;
	    if (x === 0) {
	      x = xi = 1;
	    } else {
	      x = x2 ^ d[d[d[x8 ^ x2]]];
	      xi ^= d[d[xi]];
	    }
	  }
	  return true;
	};

	var G = new Global();


	AES.blockSize = 4 * 4;

	AES.prototype.blockSize = AES.blockSize;

	AES.keySize = 256 / 8;

	AES.prototype.keySize = AES.keySize;

	AES.ivSize = AES.blockSize;

	AES.prototype.ivSize = AES.ivSize;

	 function bufferToArray(buf) {
	  var len = buf.length/4;
	  var out = new Array(len);
	  var i = -1;
	  while (++i < len) {
	    out[i] = buf.readUInt32BE(i * 4);
	  }
	  return out;
	 }
	function AES(key) {
	  this._key = bufferToArray(key);
	  this._doReset();
	}

	AES.prototype._doReset = function() {
	  var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;
	  keyWords = this._key;
	  keySize = keyWords.length;
	  this._nRounds = keySize + 6;
	  ksRows = (this._nRounds + 1) * 4;
	  this._keySchedule = [];
	  for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {
	    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);
	  }
	  this._invKeySchedule = [];
	  for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {
	    ksRow = ksRows - invKsRow;
	    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];
	    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
	  }
	  return true;
	};

	AES.prototype.encryptBlock = function(M) {
	  M = bufferToArray(new Buffer(M));
	  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[1], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[3], 12);
	  return buf;
	};

	AES.prototype.decryptBlock = function(M) {
	  M = bufferToArray(new Buffer(M));
	  var temp = [M[3], M[1]];
	  M[1] = temp[0];
	  M[3] = temp[1];
	  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[3], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[1], 12);
	  return buf;
	};

	AES.prototype.scrub = function() {
	  scrub_vec(this._keySchedule);
	  scrub_vec(this._invKeySchedule);
	  scrub_vec(this._key);
	};

	AES.prototype._doCryptBlock = function(M, keySchedule, SUB_MIX, SBOX) {
	  var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;

	  s0 = M[0] ^ keySchedule[0];
	  s1 = M[1] ^ keySchedule[1];
	  s2 = M[2] ^ keySchedule[2];
	  s3 = M[3] ^ keySchedule[3];
	  ksRow = 4;
	  for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {
	    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];
	    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];
	    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];
	    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];
	    s0 = t0;
	    s1 = t1;
	    s2 = t2;
	    s3 = t3;
	  }
	  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
	  return [
	    fixup_uint32(t0),
	    fixup_uint32(t1),
	    fixup_uint32(t2),
	    fixup_uint32(t3)
	  ];

	};




	  exports.AES = AES;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(29).Transform;
	var inherits = __webpack_require__(26);

	module.exports = CipherBase;
	inherits(CipherBase, Transform);
	function CipherBase() {
	  Transform.call(this);
	}
	CipherBase.prototype.update = function (data, inputEnd, outputEnc) {
	  this.write(data, inputEnd);
	  var outData = new Buffer('');
	  var chunk;
	  while ((chunk = this.read())) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	CipherBase.prototype.final = function (outputEnc) {
	  this.end();
	  var outData = new Buffer('');
	  var chunk;
	  while ((chunk = this.read())) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 110 */
/***/ function(module, exports) {

	exports['aes-128-ecb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-192-ecb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-256-ecb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-128-cbc'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-192-cbc'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-256-cbc'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes128'] = exports['aes-128-cbc'];
	exports['aes192'] = exports['aes-192-cbc'];
	exports['aes256'] = exports['aes-256-cbc'];
	exports['aes-128-cfb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-192-cfb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-256-cfb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-128-ofb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-192-ofb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-256-ofb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-128-ctr'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-192-ctr'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-256-ctr'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = function (crypto, password, keyLen, ivLen) {
	  keyLen = keyLen/8;
	  ivLen = ivLen || 0;
	  var ki = 0;
	  var ii = 0;
	  var key = new Buffer(keyLen);
	  var iv = new Buffer(ivLen);
	  var addmd = 0;
	  var md, md_buf;
	  var i;
	  while (true) {
	    md = crypto.createHash('md5');
	    if(addmd++ > 0) {
	       md.update(md_buf);
	    }
	    md.update(password);
	    md_buf = md.digest();
	    i = 0;
	    if(keyLen > 0) {
	      while(true) {
	        if(keyLen === 0) {
	          break;
	        }
	        if(i === md_buf.length) {
	          break;
	        }
	        key[ki++] = md_buf[i];
	        keyLen--;
	        i++;
	       }
	    }
	    if(ivLen > 0 && i !== md_buf.length) {
	      while(true) {
	        if(ivLen === 0) {
	          break;
	        }
	        if(i === md_buf.length) {
	          break;
	        }
	       iv[ii++] = md_buf[i];
	       ivLen--;
	       i++;
	     }
	   }
	   if(keyLen === 0 && ivLen === 0) {
	      break;
	    }
	  }
	  for(i=0;i<md_buf.length;i++) {
	    md_buf[i] = 0;
	  }
	  return {
	    key: key,
	    iv: iv
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(108);
	var Transform = __webpack_require__(109);
	var inherits = __webpack_require__(26);

	inherits(StreamCipher, Transform);
	module.exports = StreamCipher;
	function StreamCipher(mode, key, iv, decrypt) {
	  if (!(this instanceof StreamCipher)) {
	    return new StreamCipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  this._cache = new Buffer('');
	  this._secCache = new Buffer('');
	  this._decrypt = decrypt;
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	StreamCipher.prototype._transform = function (chunk, _, next) {
	  next(null, this._mode.encrypt(this, chunk, this._decrypt));
	};
	StreamCipher.prototype._flush = function (next) {
	  this._cipher.scrub();
	  next();
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 113 */
/***/ function(module, exports) {

	exports.encrypt = function (self, block) {
	  return self._cipher.encryptBlock(block);
	};
	exports.decrypt = function (self, block) {
	  return self._cipher.decryptBlock(block);
	};

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var xor = __webpack_require__(115);
	exports.encrypt = function (self, block) {
	  var data = xor(block, self._prev);
	  self._prev = self._cipher.encryptBlock(data);
	  return self._prev;
	};
	exports.decrypt = function (self, block) {
	  var pad = self._prev;
	  self._prev = block;
	  var out = self._cipher.decryptBlock(block);
	  return xor(out, pad);
	};

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = xor;
	function xor(a, b) {
	  var len = Math.min(a.length, b.length);
	  var out = new Buffer(len);
	  var i = -1;
	  while (++i < len) {
	    out.writeUInt8(a[i] ^ b[i], i);
	  }
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(115);
	exports.encrypt = function (self, data, decrypt) {
	  var out = new Buffer('');
	  var len;
	  while (data.length) {
	    if (self._cache.length === 0) {
	      self._cache = self._cipher.encryptBlock(self._prev);
	      self._prev = new Buffer('');
	    }
	    if (self._cache.length <= data.length) {
	      len = self._cache.length;
	      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
	      data = data.slice(len);
	    } else {
	      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
	      break;
	    }
	  }
	  return out;
	};
	function encryptStart(self, data, decrypt) {
	  var len = data.length;
	  var out = xor(data, self._cache);
	  self._cache = self._cache.slice(len);
	  self._prev = Buffer.concat([self._prev, decrypt?data:out]);
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(115);
	function getBlock(self) {
	  self._prev = self._cipher.encryptBlock(self._prev);
	  return self._prev;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(115);
	function getBlock(self) {
	  var out = self._cipher.encryptBlock(self._prev);
	  incr32(self._prev);
	  return out;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	function incr32(iv) {
	  var len = iv.length;
	  var item;
	  while (len--) {
	    item = iv.readUInt8(len);
	    if (item === 255) {
	      iv.writeUInt8(0, len);
	    } else {
	      item++;
	      iv.writeUInt8(item, len);
	      break;
	    }
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(108);
	var Transform = __webpack_require__(109);
	var inherits = __webpack_require__(26);
	var modes = __webpack_require__(110);
	var StreamCipher = __webpack_require__(112);
	var ebtk = __webpack_require__(111);

	inherits(Decipher, Transform);
	function Decipher(mode, key, iv) {
	  if (!(this instanceof Decipher)) {
	    return new Decipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._last = void 0;
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Decipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.decrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Decipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  if (!chunk) {
	    return next;
	  }

	  this.push(unpad(this._mode.decrypt(this, chunk)));

	  next();
	};

	function Splitter() {
	   if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};

	Splitter.prototype.get = function () {
	  if (this.cache.length > 16) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  if (this.cache.length) {
	    return this.cache;
	  }
	};
	function unpad(last) {
	  var padded = last[15];
	  if (padded === 16) {
	    return;
	  }
	  return last.slice(0, 16 - padded);
	}

	var modelist = {
	  ECB: __webpack_require__(113),
	  CBC: __webpack_require__(114),
	  CFB: __webpack_require__(116),
	  OFB: __webpack_require__(117),
	  CTR: __webpack_require__(118)
	};

	module.exports = function (crypto) {
	  function createDecipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key/8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv, true);
	    }
	    return new Decipher(modelist[config.mode], password, iv);
	  }

	  function createDecipher (suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createDecipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createDecipher: createDecipher,
	    createDecipheriv: createDecipheriv
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	var isWindows = process.platform === 'win32';
	var trailingSlashRe = isWindows ? /[^:]\\$/ : /.\/$/;

	// https://github.com/nodejs/node/blob/3e7a14381497a3b73dda68d05b5130563cdab420/lib/os.js#L25-L43
	module.exports = function () {
		var path;

		if (isWindows) {
			path = process.env.TEMP ||
				process.env.TMP ||
				(process.env.SystemRoot || process.env.windir) + '\\temp';
		} else {
			path = process.env.TMPDIR ||
				process.env.TMP ||
				process.env.TEMP ||
				'/tmp';
		}

		if (trailingSlashRe.test(path)) {
			path = path.slice(0, -1);
		}

		return path;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	var exec = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"child_process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).exec,
	    fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));


	/**
	 * The IANA suggested ephemeral port range.
	 * @type {{min: number, max: number}}
	 * @const
	 * @see http://en.wikipedia.org/wiki/Ephemeral_ports
	 */
	const DEFAULT_IANA_RANGE = {min: 49152, max: 65535};


	/**
	 * The epheremal port range for the current system. Lazily computed on first
	 * access.
	 * @type {Promise.<{min: number, max: number}>}
	 */
	var systemRange = null;


	/**
	 * Computes the ephemeral port range for the current system. This is based on
	 * http://stackoverflow.com/a/924337.
	 * @return {!Promise<{min: number, max: number}>} A promise that will resolve to
	 *     the ephemeral port range of the current system.
	 */
	function findSystemPortRange() {
	  if (systemRange) {
	    return systemRange;
	  }
	  var range = process.platform === 'win32' ?
	      findWindowsPortRange() : findUnixPortRange();
	  return systemRange = range.catch(function() {
	    return DEFAULT_IANA_RANGE;
	  });
	}


	/**
	 * Executes a command and returns its output if it succeeds.
	 * @param {string} cmd The command to execute.
	 * @return {!Promise<string>} A promise that will resolve with the command's
	 *     stdout data.
	 */
	function execute(cmd) {
	  return new Promise((resolve, reject) => {
	    exec(cmd, function(err, stdout) {
	      if (err) {
	        reject(err);
	      } else {
	        resolve(stdout);
	      }
	    });
	  });
	}


	/**
	 * Computes the ephemeral port range for a Unix-like system.
	 * @return {!Promise<{min: number, max: number}>} A promise that will resolve
	 *     with the ephemeral port range on the current system.
	 */
	function findUnixPortRange() {
	  var cmd;
	  if (process.platform === 'sunos') {
	    cmd =
	        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';
	  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {
	    // Linux
	    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';
	  } else {
	    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +
	        ' | sed -e "s/.*:\\s*//"';
	  }

	  return execute(cmd).then(function(stdout) {
	    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;
	    var range = stdout.trim().split(/\s+/).map(Number);
	    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;
	    return {min: range[0], max: range[1]};
	  });
	}


	/**
	 * Computes the ephemeral port range for a Windows system.
	 * @return {!Promise<{min: number, max: number}>} A promise that will resolve
	 *     with the ephemeral port range on the current system.
	 */
	function findWindowsPortRange() {
	  // First, check if we're running on XP.  If this initial command fails,
	  // we just fallback on the default IANA range.
	  return execute('cmd.exe /c ver').then(function(stdout) {
	    if (/Windows XP/.test(stdout)) {
	      // TODO: Try to read these values from the registry.
	      return {min: 1025, max: 5000};
	    } else {
	      return execute('netsh int ipv4 show dynamicport tcp').
	          then(function(stdout) {
	            /* > netsh int ipv4 show dynamicport tcp
	              Protocol tcp Dynamic Port Range
	              ---------------------------------
	              Start Port : 49152
	              Number of Ports : 16384
	             */
	            var range = stdout.split(/\n/).filter(function(line) {
	              return /.*:\s*\d+/.test(line);
	            }).map(function(line) {
	              return Number(line.split(/:\s*/)[1]);
	            });

	            return {
	              min: range[0],
	              max: range[0] + range[1]
	            };
	          });
	    }
	  });
	}


	/**
	 * Tests if a port is free.
	 * @param {number} port The port to test.
	 * @param {string=} opt_host The bound host to test the {@code port} against.
	 *     Defaults to {@code INADDR_ANY}.
	 * @return {!Promise<boolean>} A promise that will resolve with whether the port
	 *     is free.
	 */
	function isFree(port, opt_host) {
	  return new Promise((resolve, reject) => {
	    let server = net.createServer().on('error', function(e) {
	      if (e.code === 'EADDRINUSE') {
	        resolve(false);
	      } else {
	        reject(e);
	      }
	    });

	    server.listen(port, opt_host, function() {
	      server.close(() => resolve(true));
	    });
	  });
	}


	/**
	 * @param {string=} opt_host The bound host to test the {@code port} against.
	 *     Defaults to {@code INADDR_ANY}.
	 * @return {!Promise<number>} A promise that will resolve to a free port. If a
	 *     port cannot be found, the promise will be rejected.
	 */
	function findFreePort(opt_host) {
	  return findSystemPortRange().then(function(range) {
	    var attempts = 0;
	    return new Promise((resolve, reject) => {
	      findPort();

	      function findPort() {
	        attempts += 1;
	        if (attempts > 10) {
	          reject(Error('Unable to find a free port'));
	        }

	        var port = Math.floor(
	            Math.random() * (range.max - range.min) + range.min);
	        isFree(port, opt_host).then(function(isFree) {
	          if (isFree) {
	            resolve(port);
	          } else {
	            findPort();
	          }
	        });
	      }
	    });
	  });
	}


	// PUBLIC API


	exports.findFreePort = findFreePort;
	exports.isFree = isFree;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	const AdmZip = __webpack_require__(123);
	const fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	const path = __webpack_require__(61);
	const url = __webpack_require__(52);
	const util = __webpack_require__(12);

	const httpUtil = __webpack_require__(150);
	const io = __webpack_require__(75);
	const exec = __webpack_require__(151);
	const cmd = __webpack_require__(62);
	const input = __webpack_require__(73);
	const promise = __webpack_require__(66);
	const webdriver = __webpack_require__(71);
	const net = __webpack_require__(152);
	const portprober = __webpack_require__(121);


	/**
	 * @typedef {(string|!Array<string|number|!stream.Stream|null|undefined>)}
	 */
	var StdIoOptions;


	/**
	 * @typedef {(string|!IThenable<string>)}
	 */
	var CommandLineFlag;


	/**
	 * A record object that defines the configuration options for a DriverService
	 * instance.
	 *
	 * @record
	 */
	function ServiceOptions() {}

	/**
	 * Whether the service should only be accessed on this host's loopback address.
	 *
	 * @type {(boolean|undefined)}
	 */
	ServiceOptions.prototype.loopback;

	/**
	 * The host name to access the server on. If this option is specified, the
	 * {@link #loopback} option will be ignored.
	 *
	 * @type {(string|undefined)}
	 */
	ServiceOptions.prototype.hostname;

	/**
	 * The port to start the server on (must be > 0). If the port is provided as a
	 * promise, the service will wait for the promise to resolve before starting.
	 *
	 * @type {(number|!IThenable<number>)}
	 */
	ServiceOptions.prototype.port;

	/**
	 * The arguments to pass to the service. If a promise is provided, the service
	 * will wait for it to resolve before starting.
	 *
	 * @type {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)}
	 */
	ServiceOptions.prototype.args;

	/**
	 * The base path on the server for the WebDriver wire protocol (e.g. '/wd/hub').
	 * Defaults to '/'.
	 *
	 * @type {(string|undefined|null)}
	 */
	ServiceOptions.prototype.path;

	/**
	 * The environment variables that should be visible to the server process.
	 * Defaults to inheriting the current process's environment.
	 *
	 * @type {(Object<string, string>|undefined)}
	 */
	ServiceOptions.prototype.env;

	/**
	 * IO configuration for the spawned server process. For more information, refer
	 * to the documentation of `child_process.spawn`.
	 *
	 * @type {(StdIoOptions|undefined)}
	 * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio
	 */
	ServiceOptions.prototype.stdio;


	/**
	 * Manages the life and death of a native executable WebDriver server.
	 *
	 * It is expected that the driver server implements the
	 * https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol.
	 * Furthermore, the managed server should support multiple concurrent sessions,
	 * so that this class may be reused for multiple clients.
	 */
	class DriverService {
	  /**
	   * @param {string} executable Path to the executable to run.
	   * @param {!ServiceOptions} options Configuration options for the service.
	   */
	  constructor(executable, options) {
	    /** @private {string} */
	    this.executable_ = executable;

	    /** @private {boolean} */
	    this.loopbackOnly_ = !!options.loopback;

	    /** @private {(string|undefined)} */
	    this.hostname_ = options.hostname;

	    /** @private {(number|!IThenable<number>)} */
	    this.port_ = options.port;

	    /**
	     * @private {!(Array<CommandLineFlag>|
	     *             IThenable<!Array<CommandLineFlag>>)}
	     */
	    this.args_ = options.args;

	    /** @private {string} */
	    this.path_ = options.path || '/';

	    /** @private {!Object<string, string>} */
	    this.env_ = options.env || process.env;

	    /**
	     * @private {(string|!Array<string|number|!stream.Stream|null|undefined>)}
	     */
	    this.stdio_ = options.stdio || 'ignore';

	    /**
	     * A promise for the managed subprocess, or null if the server has not been
	     * started yet. This promise will never be rejected.
	     * @private {Promise<!exec.Command>}
	     */
	    this.command_ = null;

	    /**
	     * Promise that resolves to the server's address or null if the server has
	     * not been started. This promise will be rejected if the server terminates
	     * before it starts accepting WebDriver requests.
	     * @private {Promise<string>}
	     */
	    this.address_ = null;
	  }

	  /**
	   * @return {!Promise<string>} A promise that resolves to the server's address.
	   * @throws {Error} If the server has not been started.
	   */
	  address() {
	    if (this.address_) {
	      return this.address_;
	    }
	    throw Error('Server has not been started.');
	  }

	  /**
	   * Returns whether the underlying process is still running. This does not take
	   * into account whether the process is in the process of shutting down.
	   * @return {boolean} Whether the underlying service process is running.
	   */
	  isRunning() {
	    return !!this.address_;
	  }

	  /**
	   * Starts the server if it is not already running.
	   * @param {number=} opt_timeoutMs How long to wait, in milliseconds, for the
	   *     server to start accepting requests. Defaults to 30 seconds.
	   * @return {!Promise<string>} A promise that will resolve to the server's base
	   *     URL when it has started accepting requests. If the timeout expires
	   *     before the server has started, the promise will be rejected.
	   */
	  start(opt_timeoutMs) {
	    if (this.address_) {
	      return this.address_;
	    }

	    var timeout = opt_timeoutMs || DriverService.DEFAULT_START_TIMEOUT_MS;
	    var self = this;

	    let resolveCommand;
	    this.command_ = new Promise(resolve => resolveCommand = resolve);

	    this.address_ = new Promise((resolveAddress, rejectAddress) => {
	      resolveAddress(Promise.resolve(this.port_).then(port => {
	        if (port <= 0) {
	          throw Error('Port must be > 0: ' + port);
	        }

	        return resolveCommandLineFlags(this.args_).then(args => {
	          var command = exec(self.executable_, {
	            args: args,
	            env: self.env_,
	            stdio: self.stdio_
	          });

	          resolveCommand(command);

	          var earlyTermination = command.result().then(function(result) {
	            var error = result.code == null ?
	                Error('Server was killed with ' + result.signal) :
	                Error('Server terminated early with status ' + result.code);
	            rejectAddress(error);
	            self.address_ = null;
	            self.command_ = null;
	            throw error;
	          });

	          var hostname = self.hostname_;
	          if (!hostname) {
	            hostname = !self.loopbackOnly_ && net.getAddress()
	                || net.getLoopbackAddress();
	          }

	          var serverUrl = url.format({
	            protocol: 'http',
	            hostname: hostname,
	            port: port + '',
	            pathname: self.path_
	          });

	          return new Promise((fulfill, reject) => {
	            let cancelToken =
	                earlyTermination.catch(e => reject(Error(e.message)));

	            httpUtil.waitForServer(serverUrl, timeout, cancelToken)
	                .then(_ => fulfill(serverUrl), err => {
	                  if (err instanceof promise.CancellationError) {
	                    fulfill(serverUrl);
	                  } else {
	                    reject(err);
	                  }
	                });
	          });
	        });
	      }));
	    });

	    return this.address_;
	  }

	  /**
	   * Stops the service if it is not currently running. This function will kill
	   * the server immediately. To synchronize with the active control flow, use
	   * {@link #stop()}.
	   * @return {!Promise} A promise that will be resolved when the server has been
	   *     stopped.
	   */
	  kill() {
	    if (!this.address_ || !this.command_) {
	      return Promise.resolve(); // Not currently running.
	    }
	    return this.command_.then(function(command) {
	      command.kill('SIGTERM');
	    });
	  }

	  /**
	   * Schedules a task in the current control flow to stop the server if it is
	   * currently running.
	   * @return {!promise.Thenable} A promise that will be resolved when
	   *     the server has been stopped.
	   */
	  stop() {
	    return promise.controlFlow().execute(this.kill.bind(this));
	  }
	}


	/**
	 * @param {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)} args
	 * @return {!Promise<!Array<string>>}
	 */
	function resolveCommandLineFlags(args) {
	  // Resolve the outer array, then the individual flags.
	  return Promise.resolve(args)
	      .then(/** !Array<CommandLineFlag> */args => Promise.all(args));
	}


	/**
	 * The default amount of time, in milliseconds, to wait for the server to
	 * start.
	 * @const {number}
	 */
	DriverService.DEFAULT_START_TIMEOUT_MS = 30 * 1000;


	/**
	 * Creates {@link DriverService} objects that manage a WebDriver server in a
	 * child process.
	 */
	DriverService.Builder = class {
	  /**
	   * @param {string} exe Path to the executable to use. This executable must
	   *     accept the `--port` flag for defining the port to start the server on.
	   * @throws {Error} If the provided executable path does not exist.
	   */
	  constructor(exe) {
	    if (!fs.existsSync(exe)) {
	      throw Error(`The specified executable path does not exist: ${exe}`);
	    }

	    /** @private @const {string} */
	    this.exe_ = exe;

	    /** @private {!ServiceOptions} */
	    this.options_ = {
	      args: [],
	      port: 0,
	      env: null,
	      stdio: 'ignore'
	    };
	  }

	  /**
	   * Define additional command line arguments to use when starting the server.
	   *
	   * @param {...CommandLineFlag} var_args The arguments to include.
	   * @return {!THIS} A self reference.
	   * @this {THIS}
	   * @template THIS
	   */
	  addArguments(var_args) {
	    let args = Array.prototype.slice.call(arguments, 0);
	    this.options_.args = this.options_.args.concat(args);
	    return this;
	  }

	  /**
	   * Sets the host name to access the server on. If specified, the
	   * {@linkplain #setLoopback() loopback} setting will be ignored.
	   *
	   * @param {string} hostname
	   * @return {!DriverService.Builder} A self reference.
	   */
	  setHostname(hostname) {
	    this.options_.hostname = hostname;
	    return this;
	  }

	  /**
	   * Sets whether the service should be accessed at this host's loopback
	   * address.
	   *
	   * @param {boolean} loopback
	   * @return {!DriverService.Builder} A self reference.
	   */
	  setLoopback(loopback) {
	    this.options_.loopback = loopback;
	    return this;
	  }

	  /**
	   * Sets the base path for WebDriver REST commands (e.g. "/wd/hub").
	   * By default, the driver will accept commands relative to "/".
	   *
	   * @param {?string} basePath The base path to use, or `null` to use the
	   *     default.
	   * @return {!DriverService.Builder} A self reference.
	   */
	  setPath(basePath) {
	    this.options_.path = basePath;
	    return this;
	  }

	  /**
	   * Sets the port to start the server on.
	   *
	   * @param {number} port The port to use, or 0 for any free port.
	   * @return {!DriverService.Builder} A self reference.
	   * @throws {Error} If an invalid port is specified.
	   */
	  setPort(port) {
	    if (port < 0) {
	      throw Error(`port must be >= 0: ${port}`);
	    }
	    this.options_.port = port;
	    return this;
	  }

	  /**
	   * Defines the environment to start the server under. This setting will be
	   * inherited by every browser session started by the server. By default, the
	   * server will inherit the enviroment of the current process.
	   *
	   * @param {(Map<string, string>|Object<string, string>|null)} env The desired
	   *     environment to use, or `null` if the server should inherit the
	   *     current environment.
	   * @return {!DriverService.Builder} A self reference.
	   */
	  setEnvironment(env) {
	    if (env instanceof Map) {
	      let tmp = {};
	      env.forEach((value, key) => tmp[key] = value);
	      env = tmp;
	    }
	    this.options_.env = env;
	    return this;
	  }

	  /**
	   * IO configuration for the spawned server process. For more information,
	   * refer to the documentation of `child_process.spawn`.
	   *
	   * @param {StdIoOptions} config The desired IO configuration.
	   * @return {!DriverService.Builder} A self reference.
	   * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio
	   */
	  setStdio(config) {
	    this.options_.stdio = config;
	    return this;
	  }

	  /**
	   * Creates a new DriverService using this instance's current configuration.
	   *
	   * @return {!DriverService} A new driver service.
	   */
	  build() {
	    let port = this.options_.port || portprober.findFreePort();
	    let args = Promise.resolve(port).then(port => {
	      return this.options_.args.concat('--port=' + port);
	    });

	    let options =
	        /** @type {!ServiceOptions} */
	        (Object.assign({}, this.options_, {args, port}));
	    return new DriverService(this.exe_, options);
	  }
	};


	/**
	 * Manages the life and death of the
	 * <a href="http://selenium-release.storage.googleapis.com/index.html">
	 * standalone Selenium server</a>.
	 */
	class SeleniumServer extends DriverService {
	  /**
	   * @param {string} jar Path to the Selenium server jar.
	   * @param {SeleniumServer.Options=} opt_options Configuration options for the
	   *     server.
	   * @throws {Error} If the path to the Selenium jar is not specified or if an
	   *     invalid port is specified.
	   */
	  constructor(jar, opt_options) {
	    if (!jar) {
	      throw Error('Path to the Selenium jar not specified');
	    }

	    var options = opt_options || {};

	    if (options.port < 0) {
	      throw Error('Port must be >= 0: ' + options.port);
	    }

	    let port = options.port || portprober.findFreePort();
	    let args = Promise.all([port, options.jvmArgs || [], options.args || []])
	        .then(resolved => {
	          let port = resolved[0];
	          let jvmArgs = resolved[1];
	          let args = resolved[2];
	          return jvmArgs.concat('-jar', jar, '-port', port).concat(args);
	        });

	    super('java', {
	      loopback: options.loopback,
	      port: port,
	      args: args,
	      path: '/wd/hub',
	      env: options.env,
	      stdio: options.stdio
	    });
	  }
	}


	/**
	 * Options for the Selenium server:
	 *
	 * - `loopback` - Whether the server should only be accessed on this host's
	 *     loopback address.
	 * - `port` - The port to start the server on (must be > 0). If the port is
	 *     provided as a promise, the service will wait for the promise to resolve
	 *     before starting.
	 * - `args` - The arguments to pass to the service. If a promise is provided,
	 *     the service will wait for it to resolve before starting.
	 * - `jvmArgs` - The arguments to pass to the JVM. If a promise is provided,
	 *     the service will wait for it to resolve before starting.
	 * - `env` - The environment variables that should be visible to the server
	 *     process. Defaults to inheriting the current process's environment.
	 * - `stdio` - IO configuration for the spawned server process. For more
	 *     information, refer to the documentation of `child_process.spawn`.
	 *
	 * @typedef {{
	 *   loopback: (boolean|undefined),
	 *   port: (number|!promise.Promise<number>),
	 *   args: !(Array<string>|promise.Promise<!Array<string>>),
	 *   jvmArgs: (!Array<string>|
	 *             !promise.Promise<!Array<string>>|
	 *             undefined),
	 *   env: (!Object<string, string>|undefined),
	 *   stdio: (string|!Array<string|number|!stream.Stream|null|undefined>|
	 *           undefined)
	 * }}
	 */
	SeleniumServer.Options;



	/**
	 * A {@link webdriver.FileDetector} that may be used when running
	 * against a remote
	 * [Selenium server](http://selenium-release.storage.googleapis.com/index.html).
	 *
	 * When a file path on the local machine running this script is entered with
	 * {@link webdriver.WebElement#sendKeys WebElement#sendKeys}, this file detector
	 * will transfer the specified file to the Selenium server's host; the sendKeys
	 * command will be updated to use the transfered file's path.
	 *
	 * __Note:__ This class depends on a non-standard command supported on the
	 * Java Selenium server. The file detector will fail if used with a server that
	 * only supports standard WebDriver commands (such as the ChromeDriver).
	 *
	 * @final
	 */
	class FileDetector extends input.FileDetector {
	  /**
	   * Prepares a `file` for use with the remote browser. If the provided path
	   * does not reference a normal file (i.e. it does not exist or is a
	   * directory), then the promise returned by this method will be resolved with
	   * the original file path. Otherwise, this method will upload the file to the
	   * remote server, which will return the file's path on the remote system so
	   * it may be referenced in subsequent commands.
	   *
	   * @override
	   */
	  handleFile(driver, file) {
	    return io.stat(file).then(function(stats) {
	      if (stats.isDirectory()) {
	        return file;  // Not a valid file, return original input.
	      }

	      var zip = new AdmZip();
	      zip.addLocalFile(file);
	      // Stored compression, see https://en.wikipedia.org/wiki/Zip_(file_format)
	      zip.getEntries()[0].header.method = 0;

	      var command = new cmd.Command(cmd.Name.UPLOAD_FILE)
	          .setParameter('file', zip.toBuffer().toString('base64'));
	      return driver.schedule(command,
	          'remote.FileDetector.handleFile(' + file + ')');
	    }, function(err) {
	      if (err.code === 'ENOENT') {
	        return file;  // Not a file; return original input.
	      }
	      throw err;
	    });
	  }
	}


	// PUBLIC API

	exports.DriverService = DriverService;
	exports.FileDetector = FileDetector;
	exports.SeleniumServer = SeleniumServer;
	exports.ServiceOptions = ServiceOptions;  // Exported for API docs.

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    pth = __webpack_require__(61);

	fs.existsSync = fs.existsSync || pth.existsSync;

	var ZipEntry = __webpack_require__(124),
	    ZipFile =  __webpack_require__(149),
	    Utils = __webpack_require__(125);

	module.exports = function(/*String*/input) {
	    var _zip = undefined,
	        _filename = "";

	    if (input && typeof input === "string") { // load zip file
	        if (fs.existsSync(input)) {
	            _filename = input;
	            _zip = new ZipFile(input, Utils.Constants.FILE);
	        } else {
	           throw Utils.Errors.INVALID_FILENAME;
	        }
	    } else if(input && Buffer.isBuffer(input)) { // load buffer
	        _zip = new ZipFile(input, Utils.Constants.BUFFER);
	    } else { // create new zip file
	        _zip = new ZipFile(null, Utils.Constants.NONE);
	    }

	    function getEntry(/*Object*/entry) {
	        if (entry && _zip) {
	            var item;
	            // If entry was given as a file name
	            if (typeof entry === "string")
	                item = _zip.getEntry(entry);
	            // if entry was given as a ZipEntry object
	            if (typeof entry === "object" && entry.entryName != undefined && entry.header != undefined)
	                item =  _zip.getEntry(entry.entryName);

	            if (item) {
	                return item;
	            }
	        }
	        return null;
	    }

	    return {
	        /**
	         * Extracts the given entry from the archive and returns the content as a Buffer object
	         * @param entry ZipEntry object or String with the full path of the entry
	         *
	         * @return Buffer or Null in case of error
	         */
	        readFile : function(/*Object*/entry) {
	            var item = getEntry(entry);
	            return item && item.getData() || null;
	        },

	        /**
	         * Asynchronous readFile
	         * @param entry ZipEntry object or String with the full path of the entry
	         * @param callback
	         *
	         * @return Buffer or Null in case of error
	         */
	        readFileAsync : function(/*Object*/entry, /*Function*/callback) {
	            var item = getEntry(entry);
	            if (item) {
	                item.getDataAsync(callback);
	            } else {
	                callback(null,"getEntry failed for:" + entry)
	            }
	        },

	        /**
	         * Extracts the given entry from the archive and returns the content as plain text in the given encoding
	         * @param entry ZipEntry object or String with the full path of the entry
	         * @param encoding Optional. If no encoding is specified utf8 is used
	         *
	         * @return String
	         */
	        readAsText : function(/*Object*/entry, /*String - Optional*/encoding) {
	            var item = getEntry(entry);
	            if (item) {
	                var data = item.getData();
	                if (data && data.length) {
	                    return data.toString(encoding || "utf8");
	                }
	            }
	            return "";
	        },

	        /**
	         * Asynchronous readAsText
	         * @param entry ZipEntry object or String with the full path of the entry
	         * @param callback
	         * @param encoding Optional. If no encoding is specified utf8 is used
	         *
	         * @return String
	         */
	        readAsTextAsync : function(/*Object*/entry, /*Function*/callback, /*String - Optional*/encoding) {
	            var item = getEntry(entry);
	            if (item) {
	                item.getDataAsync(function(data) {
	                    if (data && data.length) {
	                        callback(data.toString(encoding || "utf8"));
	                    } else {
	                        callback("");
	                    }
	                })
	            } else {
	                callback("");
	            }
	        },

	        /**
	         * Remove the entry from the file or the entry and all it's nested directories and files if the given entry is a directory
	         *
	         * @param entry
	         */
	        deleteFile : function(/*Object*/entry) { // @TODO: test deleteFile
	            var item = getEntry(entry);
	            if (item) {
	                _zip.deleteEntry(item.entryName);
	            }
	        },

	        /**
	         * Adds a comment to the zip. The zip must be rewritten after adding the comment.
	         *
	         * @param comment
	         */
	        addZipComment : function(/*String*/comment) { // @TODO: test addZipComment
	            _zip.comment = comment;
	        },

	        /**
	         * Returns the zip comment
	         *
	         * @return String
	         */
	        getZipComment : function() {
	            return _zip.comment || '';
	        },

	        /**
	         * Adds a comment to a specified zipEntry. The zip must be rewritten after adding the comment
	         * The comment cannot exceed 65535 characters in length
	         *
	         * @param entry
	         * @param comment
	         */
	        addZipEntryComment : function(/*Object*/entry,/*String*/comment) {
	            var item = getEntry(entry);
	            if (item) {
	                item.comment = comment;
	            }
	        },

	        /**
	         * Returns the comment of the specified entry
	         *
	         * @param entry
	         * @return String
	         */
	        getZipEntryComment : function(/*Object*/entry) {
	            var item = getEntry(entry);
	            if (item) {
	                return item.comment || '';
	            }
	            return ''
	        },

	        /**
	         * Updates the content of an existing entry inside the archive. The zip must be rewritten after updating the content
	         *
	         * @param entry
	         * @param content
	         */
	        updateFile : function(/*Object*/entry, /*Buffer*/content) {
	            var item = getEntry(entry);
	            if (item) {
	                item.setData(content);
	            }
	        },

	        /**
	         * Adds a file from the disk to the archive
	         *
	         * @param localPath
	         */
	        addLocalFile : function(/*String*/localPath, /*String*/zipPath, /*String*/zipName) {
	             if (fs.existsSync(localPath)) {
	                if(zipPath){
	                    zipPath=zipPath.split("\\").join("/");
	                    if(zipPath.charAt(zipPath.length - 1) != "/"){
	                        zipPath += "/";
	                    }
	                }else{
	                    zipPath="";
	                }
	                 var p = localPath.split("\\").join("/").split("/").pop();
	                
	                 if(zipName){
	                    this.addFile(zipPath+zipName, fs.readFileSync(localPath), "", 0)
	                 }else{
	                    this.addFile(zipPath+p, fs.readFileSync(localPath), "", 0)
	                 }
	             } else {
	                 throw Utils.Errors.FILE_NOT_FOUND.replace("%s", localPath);
	             }
	        },

	        /**
	         * Adds a local directory and all its nested files and directories to the archive
	         *
	         * @param localPath
	         * @param zipPath optional path inside zip
	         * @param filter optional RegExp or Function if files match will
	         *               be included.
	         */
	        addLocalFolder : function(/*String*/localPath, /*String*/zipPath, /*RegExp|Function*/filter) {
	            if (filter === undefined) {
	              filter = function() { return true; };
	            } else if (filter instanceof RegExp) {
	              filter = function(filter) {
	                return function(filename) {
	                  return filter.test(filename);
	                }
	              }(filter);
	            }

	            if(zipPath){
	                zipPath=zipPath.split("\\").join("/");
	                if(zipPath.charAt(zipPath.length - 1) != "/"){
	                    zipPath += "/";
	                }
	            }else{
	                zipPath="";
	            }
				localPath = localPath.split("\\").join("/"); //windows fix
	            localPath = pth.normalize(localPath);
	            if (localPath.charAt(localPath.length - 1) != "/")
	                localPath += "/";

	            if (fs.existsSync(localPath)) {

	                var items = Utils.findFiles(localPath),
	                    self = this;

	                if (items.length) {
	                    items.forEach(function(path) {
							var p = path.split("\\").join("/").replace( new RegExp(localPath, 'i'), ""); //windows fix
	                        if (filter(p)) {
	                            if (p.charAt(p.length - 1) !== "/") {
	                                self.addFile(zipPath+p, fs.readFileSync(path), "", 0)
	                            } else {
	                                self.addFile(zipPath+p, new Buffer(0), "", 0)
	                            }
	                        }
	                    });
	                }
	            } else {
	                throw Utils.Errors.FILE_NOT_FOUND.replace("%s", localPath);
	            }
	        },

	        /**
	         * Allows you to create a entry (file or directory) in the zip file.
	         * If you want to create a directory the entryName must end in / and a null buffer should be provided.
	         * Comment and attributes are optional
	         *
	         * @param entryName
	         * @param content
	         * @param comment
	         * @param attr
	         */
	        addFile : function(/*String*/entryName, /*Buffer*/content, /*String*/comment, /*Number*/attr) {
	            var entry = new ZipEntry();
	            entry.entryName = entryName;
	            entry.comment = comment || "";
	            entry.attr = attr || 438; //0666;
	            if (entry.isDirectory && content.length) {
	               // throw Utils.Errors.DIRECTORY_CONTENT_ERROR;
	            }
	            entry.setData(content);
	            _zip.setEntry(entry);
	        },

	        /**
	         * Returns an array of ZipEntry objects representing the files and folders inside the archive
	         *
	         * @return Array
	         */
	        getEntries : function() {
	            if (_zip) {
	               return _zip.entries;
	            } else {
	                return [];
	            }
	        },

	        /**
	         * Returns a ZipEntry object representing the file or folder specified by ``name``.
	         *
	         * @param name
	         * @return ZipEntry
	         */
	        getEntry : function(/*String*/name) {
	            return getEntry(name);
	        },

	        /**
	         * Extracts the given entry to the given targetPath
	         * If the entry is a directory inside the archive, the entire directory and it's subdirectories will be extracted
	         *
	         * @param entry ZipEntry object or String with the full path of the entry
	         * @param targetPath Target folder where to write the file
	         * @param maintainEntryPath If maintainEntryPath is true and the entry is inside a folder, the entry folder
	         *                          will be created in targetPath as well. Default is TRUE
	         * @param overwrite If the file already exists at the target path, the file will be overwriten if this is true.
	         *                  Default is FALSE
	         *
	         * @return Boolean
	         */
	        extractEntryTo : function(/*Object*/entry, /*String*/targetPath, /*Boolean*/maintainEntryPath, /*Boolean*/overwrite) {
	            overwrite = overwrite || false;
	            maintainEntryPath = typeof maintainEntryPath == "undefined" ? true : maintainEntryPath;

	            var item = getEntry(entry);
	            if (!item) {
	                throw Utils.Errors.NO_ENTRY;
	            }

	            var target = pth.resolve(targetPath, maintainEntryPath ? item.entryName : pth.basename(item.entryName));

	            if (item.isDirectory) {
	                target = pth.resolve(target, "..");
	                var children = _zip.getEntryChildren(item);
	                children.forEach(function(child) {
	                    if (child.isDirectory) return;
	                    var content = child.getData();
	                    if (!content) {
	                        throw Utils.Errors.CANT_EXTRACT_FILE;
	                    }
	                    Utils.writeFileTo(pth.resolve(targetPath, maintainEntryPath ? child.entryName : child.entryName.substr(item.entryName.length)), content, overwrite);
	                });
	                return true;
	            }

	            var content = item.getData();
	            if (!content) throw Utils.Errors.CANT_EXTRACT_FILE;

	            if (fs.existsSync(target) && !overwrite) {
	                throw Utils.Errors.CANT_OVERRIDE;
	            }
	            Utils.writeFileTo(target, content, overwrite);

	            return true;
	        },

	        /**
	         * Extracts the entire archive to the given location
	         *
	         * @param targetPath Target location
	         * @param overwrite If the file already exists at the target path, the file will be overwriten if this is true.
	         *                  Default is FALSE
	         */
	        extractAllTo : function(/*String*/targetPath, /*Boolean*/overwrite) {
	            overwrite = overwrite || false;
	            if (!_zip) {
	                throw Utils.Errors.NO_ZIP;
	            }

	            _zip.entries.forEach(function(entry) {
	                if (entry.isDirectory) {
	                    Utils.makeDir(pth.resolve(targetPath, entry.entryName.toString()));
	                    return;
	                }
	                var content = entry.getData();
	                if (!content) {
	                    throw Utils.Errors.CANT_EXTRACT_FILE + "2";
	                }
	                Utils.writeFileTo(pth.resolve(targetPath, entry.entryName.toString()), content, overwrite);
	            })
	        },

	        /**
	         * Asynchronous extractAllTo
	         *
	         * @param targetPath Target location
	         * @param overwrite If the file already exists at the target path, the file will be overwriten if this is true.
	         *                  Default is FALSE
	         * @param callback
	         */
	        extractAllToAsync : function(/*String*/targetPath, /*Boolean*/overwrite, /*Function*/callback) {
	            overwrite = overwrite || false;
	            if (!_zip) {
	                callback(new Error(Utils.Errors.NO_ZIP));
	                return;
	            }

	            var entries = _zip.entries;
	            var i = entries.length; 
	            entries.forEach(function(entry) {
	                if(i <= 0) return; // Had an error already

	                if (entry.isDirectory) {
	                    Utils.makeDir(pth.resolve(targetPath, entry.entryName.toString()));
	                    if(--i == 0)
	                        callback(undefined);
	                    return;
	                }
	                entry.getDataAsync(function(content) {
	                    if(i <= 0) return;
	                    if (!content) {
	                        i = 0;
	                        callback(new Error(Utils.Errors.CANT_EXTRACT_FILE + "2"));
	                        return;
	                    }
	                    Utils.writeFileToAsync(pth.resolve(targetPath, entry.entryName.toString()), content, overwrite, function(succ) {
	                        if(i <= 0) return;

	                        if(!succ) {
	                            i = 0;
	                            callback(new Error('Unable to write'));
	                            return;
	                        }

	                        if(--i == 0)
	                            callback(undefined);
	                    });
	                    
	                });
	            })
	        },

	        /**
	         * Writes the newly created zip file to disk at the specified location or if a zip was opened and no ``targetFileName`` is provided, it will overwrite the opened zip
	         *
	         * @param targetFileName
	         * @param callback
	         */
	        writeZip : function(/*String*/targetFileName, /*Function*/callback) {
	            if (arguments.length == 1) {
	                if (typeof targetFileName == "function") {
	                    callback = targetFileName;
	                    targetFileName = "";
	                }
	            }

	            if (!targetFileName && _filename) {
	                targetFileName = _filename;
	            }
	            if (!targetFileName) return;

	            var zipData = _zip.compressToBuffer();
	            if (zipData) {
	                var ok = Utils.writeFileTo(targetFileName, zipData, true);
	                if (typeof callback == 'function') callback(!ok? new Error("failed"): null, "");
	            }
	        },

	        /**
	         * Returns the content of the entire zip file as a Buffer object
	         *
	         * @return Buffer
	         */
	        toBuffer : function(/*Function*/onSuccess,/*Function*/onFail,/*Function*/onItemStart,/*Function*/onItemEnd) {
	            this.valueOf = 2;
	            if (typeof onSuccess == "function") {
	                _zip.toAsyncBuffer(onSuccess,onFail,onItemStart,onItemEnd);
	                return null;
	            }
	            return _zip.compressToBuffer()
	        }
	    }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Utils = __webpack_require__(125),
	    Headers = __webpack_require__(130),
	    Constants = Utils.Constants,
	    Methods = __webpack_require__(133);

	module.exports = function (/*Buffer*/input) {

	    var _entryHeader = new Headers.EntryHeader(),
	        _entryName = new Buffer(0),
	        _comment = new Buffer(0),
	        _isDirectory = false,
	        uncompressedData = null,
	        _extra = new Buffer(0);

	    function getCompressedDataFromZip() {
	        if (!input || !Buffer.isBuffer(input)) {
	            return new Buffer(0);
	        }
	        _entryHeader.loadDataHeaderFromBinary(input);
	        return input.slice(_entryHeader.realDataOffset, _entryHeader.realDataOffset + _entryHeader.compressedSize)
	    }

	    function crc32OK(data) {
	        // if bit 3 (0x08) of the general-purpose flags field is set, then the CRC-32 and file sizes are not known when the header is written
	        if (_entryHeader.flags & 0x8 != 0x8) {
	           if (Utils.crc32(data) != _entryHeader.crc) {
	               return false;
	           }
	        } else {
	            // @TODO: load and check data descriptor header
	            // The fields in the local header are filled with zero, and the CRC-32 and size are appended in a 12-byte structure
	            // (optionally preceded by a 4-byte signature) immediately after the compressed data:
	        }
	        return true;
	    }

	    function decompress(/*Boolean*/async, /*Function*/callback, /*String*/pass) {
	        if(typeof callback === 'undefined' && typeof async === 'string') {
	            pass=async;
	            async=void 0;
	        }
	        if (_isDirectory) {
	            if (async && callback) {
	                callback(new Buffer(0), Utils.Errors.DIRECTORY_CONTENT_ERROR); //si added error.
	            }
	            return new Buffer(0);
	        }

	        var compressedData = getCompressedDataFromZip();
	       
	        if (compressedData.length == 0) {
	            if (async && callback) callback(compressedData, Utils.Errors.NO_DATA);//si added error.
	            return compressedData;
	        }

	        var data = new Buffer(_entryHeader.size);
	        data.fill(0);

	        switch (_entryHeader.method) {
	            case Utils.Constants.STORED:
	                compressedData.copy(data);
	                if (!crc32OK(data)) {
	                    if (async && callback) callback(data, Utils.Errors.BAD_CRC);//si added error
	                    return Utils.Errors.BAD_CRC;
	                } else {//si added otherwise did not seem to return data.
	                    if (async && callback) callback(data);
	                    return data;
	                }
	                break;
	            case Utils.Constants.DEFLATED:
	                var inflater = new Methods.Inflater(compressedData);
	                if (!async) {
	                    inflater.inflate(data);
	                    if (!crc32OK(data)) {
	                        console.warn(Utils.Errors.BAD_CRC + " " + _entryName.toString())
	                    }
	                    return data;
	                } else {
	                    inflater.inflateAsync(function(result) {
	                        result.copy(data, 0);
	                        if (!crc32OK(data)) {
	                            if (callback) callback(data, Utils.Errors.BAD_CRC); //si added error
	                        } else { //si added otherwise did not seem to return data.
	                            if (callback) callback(data);
	                        }
	                    })
	                }
	                break;
	            default:
	                if (async && callback) callback(new Buffer(0), Utils.Errors.UNKNOWN_METHOD);
	                return Utils.Errors.UNKNOWN_METHOD;
	        }
	    }

	    function compress(/*Boolean*/async, /*Function*/callback) {
	        if ((!uncompressedData || !uncompressedData.length) && Buffer.isBuffer(input)) {
	            // no data set or the data wasn't changed to require recompression
	            if (async && callback) callback(getCompressedDataFromZip());
	            return getCompressedDataFromZip();
	        }

	        if (uncompressedData.length && !_isDirectory) {
	            var compressedData;
	            // Local file header
	            switch (_entryHeader.method) {
	                case Utils.Constants.STORED:
	                    _entryHeader.compressedSize = _entryHeader.size;

	                    compressedData = new Buffer(uncompressedData.length);
	                    uncompressedData.copy(compressedData);

	                    if (async && callback) callback(compressedData);
	                    return compressedData;

	                    break;
	                default:
	                case Utils.Constants.DEFLATED:

	                    var deflater = new Methods.Deflater(uncompressedData);
	                    if (!async) {
	                        var deflated = deflater.deflate();
	                        _entryHeader.compressedSize = deflated.length;
	                        return deflated;
	                    } else {
	                        deflater.deflateAsync(function(data) {
	                            compressedData = new Buffer(data.length);
	                            _entryHeader.compressedSize = data.length;
	                            data.copy(compressedData);
	                            callback && callback(compressedData);
	                        })
	                    }
	                    deflater = null;
	                    break;
	            }
	        } else {
	            if (async && callback) {
	                callback(new Buffer(0));
	            } else {
	                return new Buffer(0);
	            }
	        }
	    }

	    function readUInt64LE(buffer, offset) {
	        return (buffer.readUInt32LE(offset + 4) << 4) + buffer.readUInt32LE(offset);
	    }

	    function parseExtra(data) {
	        var offset = 0;
	        var signature, size, part;
	        while(offset<data.length) {
	            signature = data.readUInt16LE(offset);
	            offset += 2;
	            size = data.readUInt16LE(offset);
	            offset += 2;
	            part = data.slice(offset, offset+size);
	            offset += size;
	            if(Constants.ID_ZIP64 === signature) {
	                parseZip64ExtendedInformation(part);
	            }
	        }
	    }

	    //Override header field values with values from the ZIP64 extra field
	    function parseZip64ExtendedInformation(data) {
	        var size, compressedSize, offset, diskNumStart;

	        if(data.length >= Constants.EF_ZIP64_SCOMP) {
	            size = readUInt64LE(data, Constants.EF_ZIP64_SUNCOMP);
	            if(_entryHeader.size === Constants.EF_ZIP64_OR_32) {
	                _entryHeader.size = size;
	            }
	        }
	        if(data.length >= Constants.EF_ZIP64_RHO) {
	            compressedSize = readUInt64LE(data, Constants.EF_ZIP64_SCOMP);
	            if(_entryHeader.compressedSize === Constants.EF_ZIP64_OR_32) {
	                _entryHeader.compressedSize = compressedSize;
	            }
	        }
	        if(data.length >= Constants.EF_ZIP64_DSN) {
	            offset = readUInt64LE(data, Constants.EF_ZIP64_RHO);
	            if(_entryHeader.offset === Constants.EF_ZIP64_OR_32) {
	                _entryHeader.offset = offset;
	            }
	        }
	        if(data.length >= Constants.EF_ZIP64_DSN+4) {
	            diskNumStart = data.readUInt32LE(Constants.EF_ZIP64_DSN);
	            if(_entryHeader.diskNumStart === Constants.EF_ZIP64_OR_16) {
	                _entryHeader.diskNumStart = diskNumStart;
	            }
	        }
	    }


	    return {
	        get entryName () { return _entryName.toString(); },
	        get rawEntryName() { return _entryName; },
	        set entryName (val) {
	            _entryName = Utils.toBuffer(val);
	            var lastChar = _entryName[_entryName.length - 1];
	            _isDirectory = (lastChar == 47) || (lastChar == 92);
	            _entryHeader.fileNameLength = _entryName.length;
	        },

	        get extra () { return _extra; },
	        set extra (val) {
	            _extra = val;
	            _entryHeader.extraLength = val.length;
	            parseExtra(val);
	        },

	        get comment () { return _comment.toString(); },
	        set comment (val) {
	            _comment = Utils.toBuffer(val);
	            _entryHeader.commentLength = _comment.length;
	        },

	        get name () { var n = _entryName.toString(); return _isDirectory ? n.substr(n.length - 1).split("/").pop() : n.split("/").pop(); },
	        get isDirectory () { return _isDirectory },

	        getCompressedData : function() {
	            return compress(false, null)
	        },

	        getCompressedDataAsync : function(/*Function*/callback) {
	            compress(true, callback)
	        },

	        setData : function(value) {
	            uncompressedData = Utils.toBuffer(value);
	            if (!_isDirectory && uncompressedData.length) {
	                _entryHeader.size = uncompressedData.length;
	                _entryHeader.method = Utils.Constants.DEFLATED;
	                _entryHeader.crc = Utils.crc32(value);
	            } else { // folders and blank files should be stored
	                _entryHeader.method = Utils.Constants.STORED;
	            }
	        },

	        getData : function(pass) {
	            return decompress(false, null, pass);
	        },

	        getDataAsync : function(/*Function*/callback, pass) {
	            decompress(true, callback, pass)
	        },

	        set attr(attr) { _entryHeader.attr = attr; },
	        get attr() { return _entryHeader.attr; },

	        set header(/*Buffer*/data) {
	            _entryHeader.loadFromBinary(data);
	        },

	        get header() {
	            return _entryHeader;
	        },

	        packHeader : function() {
	            var header = _entryHeader.entryHeaderToBinary();
	            // add
	            _entryName.copy(header, Utils.Constants.CENHDR);
	            if (_entryHeader.extraLength) {
	                _extra.copy(header, Utils.Constants.CENHDR + _entryName.length)
	            }
	            if (_entryHeader.commentLength) {
	                _comment.copy(header, Utils.Constants.CENHDR + _entryName.length + _entryHeader.extraLength, _comment.length);
	            }
	            return header;
	        },

	        toString : function() {
	            return '{\n' +
	                '\t"entryName" : "' + _entryName.toString() + "\",\n" +
	                '\t"name" : "' + _entryName.toString().split("/").pop() + "\",\n" +
	                '\t"comment" : "' + _comment.toString() + "\",\n" +
	                '\t"isDirectory" : ' + _isDirectory + ",\n" +
	                '\t"header" : ' + _entryHeader.toString().replace(/\t/mg, "\t\t") + ",\n" +
	                '\t"compressedData" : <' + (input && input.length  + " bytes buffer" || "null") + ">\n" +
	                '\t"data" : <' + (uncompressedData && uncompressedData.length  + " bytes buffer" || "null") + ">\n" +
	                '}';
	        }
	    }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(126);
	module.exports.Constants = __webpack_require__(127);
	module.exports.Errors = __webpack_require__(128);
	module.exports.FileAttr = __webpack_require__(129);

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    pth = __webpack_require__(61);

	fs.existsSync = fs.existsSync || pth.existsSync;

	module.exports = (function() {

	    var crcTable = [],
	        Constants = __webpack_require__(127),
	        Errors = __webpack_require__(128),

	        PATH_SEPARATOR = pth.normalize("/");


	    function mkdirSync(/*String*/path) {
	        var resolvedPath = path.split(PATH_SEPARATOR)[0];
	        path.split(PATH_SEPARATOR).forEach(function(name) {
	            if (!name || name.substr(-1,1) == ":") return;
	            resolvedPath += PATH_SEPARATOR + name;
	            var stat;
	            try {
	                stat = fs.statSync(resolvedPath);
	            } catch (e) {
	                fs.mkdirSync(resolvedPath);
	            }
	            if (stat && stat.isFile())
	                throw Errors.FILE_IN_THE_WAY.replace("%s", resolvedPath);
	        });
	    }

	    function findSync(/*String*/root, /*RegExp*/pattern, /*Boolean*/recoursive) {
	        if (typeof pattern === 'boolean') {
	            recoursive = pattern;
	            pattern = undefined;
	        }
	        var files = [];
	        fs.readdirSync(root).forEach(function(file) {
	            var path = pth.join(root, file);

	            if (fs.statSync(path).isDirectory() && recoursive)
	                files = files.concat(findSync(path, pattern, recoursive));

	            if (!pattern || pattern.test(path)) {
	                files.push(pth.normalize(path) + (fs.statSync(path).isDirectory() ? PATH_SEPARATOR : ""));
	            }

	        });
	        return files;
	    }

	    return {
	        makeDir : function(/*String*/path) {
	            mkdirSync(path);
	        },

	        crc32 : function(buf) {
	            var b = new Buffer(4);
	            if (!crcTable.length) {
	                for (var n = 0; n < 256; n++) {
	                    var c = n;
	                    for (var k = 8; --k >= 0;)  //
	                        if ((c & 1) != 0)  { c = 0xedb88320 ^ (c >>> 1); } else { c = c >>> 1; }
	                    if (c < 0) {
	                        b.writeInt32LE(c, 0);
	                        c = b.readUInt32LE(0);
	                    }
	                    crcTable[n] = c;
	                }
	            }
	            var crc = 0, off = 0, len = buf.length, c1 = ~crc;
	            while(--len >= 0) c1 = crcTable[(c1 ^ buf[off++]) & 0xff] ^ (c1 >>> 8);
	            crc = ~c1;
	            b.writeInt32LE(crc & 0xffffffff, 0);
	            return b.readUInt32LE(0);
	        },

	        methodToString : function(/*Number*/method) {
	            switch (method) {
	                case Constants.STORED:
	                    return 'STORED (' + method + ')';
	                case Constants.DEFLATED:
	                    return 'DEFLATED (' + method + ')';
	                default:
	                    return 'UNSUPPORTED (' + method + ')';
	            }

	        },

	        writeFileTo : function(/*String*/path, /*Buffer*/content, /*Boolean*/overwrite, /*Number*/attr) {
	            if (fs.existsSync(path)) {
	                if (!overwrite)
	                    return false; // cannot overwite

	                var stat = fs.statSync(path);
	                if (stat.isDirectory()) {
	                    return false;
	                }
	            }
	            var folder = pth.dirname(path);
	            if (!fs.existsSync(folder)) {
	                mkdirSync(folder);
	            }

	            var fd;
	            try {
	                fd = fs.openSync(path, 'w', 438); // 0666
	            } catch(e) {
	                fs.chmodSync(path, 438);
	                fd = fs.openSync(path, 'w', 438);
	            }
	            if (fd) {
	                fs.writeSync(fd, content, 0, content.length, 0);
	                fs.closeSync(fd);
	            }
	            fs.chmodSync(path, attr || 438);
	            return true;
	        },

	        writeFileToAsync : function(/*String*/path, /*Buffer*/content, /*Boolean*/overwrite, /*Number*/attr, /*Function*/callback) {
	            if(typeof attr === 'function') {
	                callback = attr;
	                attr = undefined;
	            }

	            fs.exists(path, function(exists) {
	                if(exists && !overwrite)
	                    return callback(false);

	                fs.stat(path, function(err, stat) {
	                    if(exists &&stat.isDirectory()) {
	                        return callback(false);
	                    }

	                    var folder = pth.dirname(path);
	                    fs.exists(folder, function(exists) {
	                        if(!exists)
	                            mkdirSync(folder);
	                        
	                        fs.open(path, 'w', 438, function(err, fd) {
	                            if(err) {
	                                fs.chmod(path, 438, function(err) {
	                                    fs.open(path, 'w', 438, function(err, fd) {
	                                        fs.write(fd, content, 0, content.length, 0, function(err, written, buffer) {
	                                            fs.close(fd, function(err) {
	                                                fs.chmod(path, attr || 438, function() {
	                                                    callback(true);
	                                                })
	                                            });
	                                        });
	                                    });
	                                })
	                            } else {
	                                if(fd) {
	                                    fs.write(fd, content, 0, content.length, 0, function(err, written, buffer) {
	                                        fs.close(fd, function(err) {
	                                            fs.chmod(path, attr || 438, function() {
	                                                callback(true);
	                                            })
	                                        });
	                                    });
	                                } else {
	                                    fs.chmod(path, attr || 438, function() {
	                                        callback(true);
	                                    })
	                                }
	                            }
	                        });
	                    })
	                })
	            })
	        },

	        findFiles : function(/*String*/path) {
	            return findSync(path, true);
	        },

	        getAttributes : function(/*String*/path) {

	        },

	        setAttributes : function(/*String*/path) {

	        },

	        toBuffer : function(input) {
	            if (Buffer.isBuffer(input)) {
	                return input;
	            } else {
	                if (input.length == 0) {
	                    return new Buffer(0)
	                }
	                return new Buffer(input, 'utf8');
	            }
	        },

	        Constants : Constants,
	        Errors : Errors
	    }
	})();

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 127 */
/***/ function(module, exports) {

	module.exports = {
	    /* The local file header */
	    LOCHDR           : 30, // LOC header size
	    LOCSIG           : 0x04034b50, // "PK\003\004"
	    LOCVER           : 4,	// version needed to extract
	    LOCFLG           : 6, // general purpose bit flag
	    LOCHOW           : 8, // compression method
	    LOCTIM           : 10, // modification time (2 bytes time, 2 bytes date)
	    LOCCRC           : 14, // uncompressed file crc-32 value
	    LOCSIZ           : 18, // compressed size
	    LOCLEN           : 22, // uncompressed size
	    LOCNAM           : 26, // filename length
	    LOCEXT           : 28, // extra field length

	    /* The Data descriptor */
	    EXTSIG           : 0x08074b50, // "PK\007\008"
	    EXTHDR           : 16, // EXT header size
	    EXTCRC           : 4, // uncompressed file crc-32 value
	    EXTSIZ           : 8, // compressed size
	    EXTLEN           : 12, // uncompressed size

	    /* The central directory file header */
	    CENHDR           : 46, // CEN header size
	    CENSIG           : 0x02014b50, // "PK\001\002"
	    CENVEM           : 4, // version made by
	    CENVER           : 6, // version needed to extract
	    CENFLG           : 8, // encrypt, decrypt flags
	    CENHOW           : 10, // compression method
	    CENTIM           : 12, // modification time (2 bytes time, 2 bytes date)
	    CENCRC           : 16, // uncompressed file crc-32 value
	    CENSIZ           : 20, // compressed size
	    CENLEN           : 24, // uncompressed size
	    CENNAM           : 28, // filename length
	    CENEXT           : 30, // extra field length
	    CENCOM           : 32, // file comment length
	    CENDSK           : 34, // volume number start
	    CENATT           : 36, // internal file attributes
	    CENATX           : 38, // external file attributes (host system dependent)
	    CENOFF           : 42, // LOC header offset

	    /* The entries in the end of central directory */
	    ENDHDR           : 22, // END header size
	    ENDSIG           : 0x06054b50, // "PK\005\006"
	    ENDSUB           : 8, // number of entries on this disk
	    ENDTOT           : 10, // total number of entries
	    ENDSIZ           : 12, // central directory size in bytes
	    ENDOFF           : 16, // offset of first CEN header
	    ENDCOM           : 20, // zip file comment length

	    /* Compression methods */
	    STORED           : 0, // no compression
	    SHRUNK           : 1, // shrunk
	    REDUCED1         : 2, // reduced with compression factor 1
	    REDUCED2         : 3, // reduced with compression factor 2
	    REDUCED3         : 4, // reduced with compression factor 3
	    REDUCED4         : 5, // reduced with compression factor 4
	    IMPLODED         : 6, // imploded
	    // 7 reserved
	    DEFLATED         : 8, // deflated
	    ENHANCED_DEFLATED: 9, // enhanced deflated
	    PKWARE           : 10,// PKWare DCL imploded
	    // 11 reserved
	    BZIP2            : 12, //  compressed using BZIP2
	    // 13 reserved
	    LZMA             : 14, // LZMA
	    // 15-17 reserved
	    IBM_TERSE        : 18, // compressed using IBM TERSE
	    IBM_LZ77         : 19, //IBM LZ77 z

	    /* General purpose bit flag */
	    FLG_ENC          : 0,  // encripted file
	    FLG_COMP1        : 1,  // compression option
	    FLG_COMP2        : 2,  // compression option
	    FLG_DESC         : 4,  // data descriptor
	    FLG_ENH          : 8,  // enhanced deflation
	    FLG_STR          : 16, // strong encryption
	    FLG_LNG          : 1024, // language encoding
	    FLG_MSK          : 4096, // mask header values

	    /* Load type */
	    FILE             : 0,
	    BUFFER           : 1,
	    NONE             : 2,

	    /* 4.5 Extensible data fields */
	    EF_ID            : 0,
	    EF_SIZE          : 2,

	    /* Header IDs */
	    ID_ZIP64         : 0x0001,
	    ID_AVINFO        : 0x0007,
	    ID_PFS           : 0x0008,
	    ID_OS2           : 0x0009,
	    ID_NTFS          : 0x000a,
	    ID_OPENVMS       : 0x000c,
	    ID_UNIX          : 0x000d,
	    ID_FORK          : 0x000e,
	    ID_PATCH         : 0x000f,
	    ID_X509_PKCS7    : 0x0014,
	    ID_X509_CERTID_F : 0x0015,
	    ID_X509_CERTID_C : 0x0016,
	    ID_STRONGENC     : 0x0017,
	    ID_RECORD_MGT    : 0x0018,
	    ID_X509_PKCS7_RL : 0x0019,
	    ID_IBM1          : 0x0065,
	    ID_IBM2          : 0x0066,
	    ID_POSZIP        : 0x4690,

	    EF_ZIP64_OR_32   : 0xffffffff,
	    EF_ZIP64_OR_16   : 0xffff,
	    EF_ZIP64_SUNCOMP : 0,
	    EF_ZIP64_SCOMP   : 8,
	    EF_ZIP64_RHO     : 16,
	    EF_ZIP64_DSN     : 24
	};


/***/ },
/* 128 */
/***/ function(module, exports) {

	module.exports = {
	    /* Header error messages */
	    "INVALID_LOC" : "Invalid LOC header (bad signature)",
	    "INVALID_CEN" : "Invalid CEN header (bad signature)",
	    "INVALID_END" : "Invalid END header (bad signature)",

	    /* ZipEntry error messages*/
	    "NO_DATA" : "Nothing to decompress",
	    "BAD_CRC" : "CRC32 checksum failed",
	    "FILE_IN_THE_WAY" : "There is a file in the way: %s",
	    "UNKNOWN_METHOD" : "Invalid/unsupported compression method",

	    /* Inflater error messages */
	    "AVAIL_DATA" : "inflate::Available inflate data did not terminate",
	    "INVALID_DISTANCE" : "inflate::Invalid literal/length or distance code in fixed or dynamic block",
	    "TO_MANY_CODES" : "inflate::Dynamic block code description: too many length or distance codes",
	    "INVALID_REPEAT_LEN" : "inflate::Dynamic block code description: repeat more than specified lengths",
	    "INVALID_REPEAT_FIRST" : "inflate::Dynamic block code description: repeat lengths with no first length",
	    "INCOMPLETE_CODES" : "inflate::Dynamic block code description: code lengths codes incomplete",
	    "INVALID_DYN_DISTANCE": "inflate::Dynamic block code description: invalid distance code lengths",
	    "INVALID_CODES_LEN": "inflate::Dynamic block code description: invalid literal/length code lengths",
	    "INVALID_STORE_BLOCK" : "inflate::Stored block length did not match one's complement",
	    "INVALID_BLOCK_TYPE" : "inflate::Invalid block type (type == 3)",

	    /* ADM-ZIP error messages */
	    "CANT_EXTRACT_FILE" : "Could not extract the file",
	    "CANT_OVERRIDE" : "Target file already exists",
	    "NO_ZIP" : "No zip file was loaded",
	    "NO_ENTRY" : "Entry doesn't exist",
	    "DIRECTORY_CONTENT_ERROR" : "A directory cannot have content",
	    "FILE_NOT_FOUND" : "File not found: %s",
	    "NOT_IMPLEMENTED" : "Not implemented",
	    "INVALID_FILENAME" : "Invalid filename",
	    "INVALID_FORMAT" : "Invalid or unsupported zip format. No END header found"
	};

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    pth = __webpack_require__(61);
		
	fs.existsSync = fs.existsSync || pth.existsSync;

	module.exports = function(/*String*/path) {

	    var _path = path || "",
	        _permissions = 0,
	        _obj = newAttr(),
	        _stat = null;

	    function newAttr() {
	        return {
	            directory : false,
	            readonly : false,
	            hidden : false,
	            executable : false,
	            mtime : 0,
	            atime : 0
	        }
	    }

	    if (_path && fs.existsSync(_path)) {
	        _stat = fs.statSync(_path);
	        _obj.directory = _stat.isDirectory();
	        _obj.mtime = _stat.mtime;
	        _obj.atime = _stat.atime;
	        _obj.executable = !!(1 & parseInt ((_stat.mode & parseInt ("777", 8)).toString (8)[0]));
	        _obj.readonly = !!(2 & parseInt ((_stat.mode & parseInt ("777", 8)).toString (8)[0]));
	        _obj.hidden = pth.basename(_path)[0] === ".";
	    } else {
	        console.warn("Invalid path: " + _path)
	    }

	    return {

	        get directory () {
	            return _obj.directory;
	        },

	        get readOnly () {
	            return _obj.readonly;
	        },

	        get hidden () {
	            return _obj.hidden;
	        },

	        get mtime () {
	            return _obj.mtime;
	        },

	        get atime () {
	           return _obj.atime;
	        },


	        get executable () {
	            return _obj.executable;
	        },

	        decodeAttributes : function(val) {

	        },

	        encodeAttributes : function (val) {

	        },

	        toString : function() {
	           return '{\n' +
	               '\t"path" : "' + _path + ",\n" +
	               '\t"isDirectory" : ' + _obj.directory + ",\n" +
	               '\t"isReadOnly" : ' + _obj.readonly + ",\n" +
	               '\t"isHidden" : ' + _obj.hidden + ",\n" +
	               '\t"isExecutable" : ' + _obj.executable + ",\n" +
	               '\t"mTime" : ' + _obj.mtime + "\n" +
	               '\t"aTime" : ' + _obj.atime + "\n" +
	           '}';
	        }
	    }

	};


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	exports.EntryHeader = __webpack_require__(131);
	exports.MainHeader = __webpack_require__(132);


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Utils = __webpack_require__(125),
	    Constants = Utils.Constants;

	/* The central directory file header */
	module.exports = function () {
	    var _verMade = 0x0A,
	        _version = 0x0A,
	        _flags = 0,
	        _method = 0,
	        _time = 0,
	        _crc = 0,
	        _compressedSize = 0,
	        _size = 0,
	        _fnameLen = 0,
	        _extraLen = 0,

	        _comLen = 0,
	        _diskStart = 0,
	        _inattr = 0,
	        _attr = 0,
	        _offset = 0;

	    var _dataHeader = {};

	    function setTime(val) {
	        var val = new Date(val);
	        _time = (val.getFullYear() - 1980 & 0x7f) << 25  // b09-16 years from 1980
	            | (val.getMonth() + 1) << 21                 // b05-08 month
	            | val.getDay() << 16                         // b00-04 hour

	            // 2 bytes time
	            | val.getHours() << 11    // b11-15 hour
	            | val.getMinutes() << 5   // b05-10 minute
	            | val.getSeconds() >> 1;  // b00-04 seconds divided by 2
	    }

	    setTime(+new Date());

	    return {
	        get made () { return _verMade; },
	        set made (val) { _verMade = val; },

	        get version () { return _version; },
	        set version (val) { _version = val },

	        get flags () { return _flags },
	        set flags (val) { _flags = val; },

	        get method () { return _method; },
	        set method (val) { _method = val; },

	        get time () { return new Date(
	            ((_time >> 25) & 0x7f) + 1980,
	            ((_time >> 21) & 0x0f) - 1,
	            (_time >> 16) & 0x1f,
	            (_time >> 11) & 0x1f,
	            (_time >> 5) & 0x3f,
	            (_time & 0x1f) << 1
	        );
	        },
	        set time (val) {
	            setTime(val);
	        },

	        get crc () { return _crc; },
	        set crc (val) { _crc = val; },

	        get compressedSize () { return _compressedSize; },
	        set compressedSize (val) { _compressedSize = val; },

	        get size () { return _size; },
	        set size (val) { _size = val; },

	        get fileNameLength () { return _fnameLen; },
	        set fileNameLength (val) { _fnameLen = val; },

	        get extraLength () { return _extraLen },
	        set extraLength (val) { _extraLen = val; },

	        get commentLength () { return _comLen },
	        set commentLength (val) { _comLen = val },

	        get diskNumStart () { return _diskStart },
	        set diskNumStart (val) { _diskStart = val },

	        get inAttr () { return _inattr },
	        set inAttr (val) { _inattr = val },

	        get attr () { return _attr },
	        set attr (val) { _attr = val },

	        get offset () { return _offset },
	        set offset (val) { _offset = val },

	        get encripted () { return (_flags & 1) == 1 },

	        get entryHeaderSize () {
	            return Constants.CENHDR + _fnameLen + _extraLen + _comLen;
	        },

	        get realDataOffset () {
	            return _offset + Constants.LOCHDR + _dataHeader.fnameLen + _dataHeader.extraLen;
	        },

	        get dataHeader () {
	            return _dataHeader;
	        },

	        loadDataHeaderFromBinary : function(/*Buffer*/input) {
	            var data = input.slice(_offset, _offset + Constants.LOCHDR);
	            // 30 bytes and should start with "PK\003\004"
	            if (data.readUInt32LE(0) != Constants.LOCSIG) {
	                throw Utils.Errors.INVALID_LOC;
	            }
	            _dataHeader = {
	                // version needed to extract
	                version : data.readUInt16LE(Constants.LOCVER),
	                // general purpose bit flag
	                flags : data.readUInt16LE(Constants.LOCFLG),
	                // compression method
	                method : data.readUInt16LE(Constants.LOCHOW),
	                // modification time (2 bytes time, 2 bytes date)
	                time : data.readUInt32LE(Constants.LOCTIM),
	                // uncompressed file crc-32 value
	                crc : data.readUInt32LE(Constants.LOCCRC),
	                // compressed size
	                compressedSize : data.readUInt32LE(Constants.LOCSIZ),
	                // uncompressed size
	                size : data.readUInt32LE(Constants.LOCLEN),
	                // filename length
	                fnameLen : data.readUInt16LE(Constants.LOCNAM),
	                // extra field length
	                extraLen : data.readUInt16LE(Constants.LOCEXT)
	            }
	        },

	        loadFromBinary : function(/*Buffer*/data) {
	            // data should be 46 bytes and start with "PK 01 02"
	            if (data.length != Constants.CENHDR || data.readUInt32LE(0) != Constants.CENSIG) {
	                throw Utils.Errors.INVALID_CEN;
	            }
	            // version made by
	            _verMade = data.readUInt16LE(Constants.CENVEM);
	            // version needed to extract
	            _version = data.readUInt16LE(Constants.CENVER);
	            // encrypt, decrypt flags
	            _flags = data.readUInt16LE(Constants.CENFLG);
	            // compression method
	            _method = data.readUInt16LE(Constants.CENHOW);
	            // modification time (2 bytes time, 2 bytes date)
	            _time = data.readUInt32LE(Constants.CENTIM);
	            // uncompressed file crc-32 value
	            _crc = data.readUInt32LE(Constants.CENCRC);
	            // compressed size
	            _compressedSize = data.readUInt32LE(Constants.CENSIZ);
	            // uncompressed size
	            _size = data.readUInt32LE(Constants.CENLEN);
	            // filename length
	            _fnameLen = data.readUInt16LE(Constants.CENNAM);
	            // extra field length
	            _extraLen = data.readUInt16LE(Constants.CENEXT);
	            // file comment length
	            _comLen = data.readUInt16LE(Constants.CENCOM);
	            // volume number start
	            _diskStart = data.readUInt16LE(Constants.CENDSK);
	            // internal file attributes
	            _inattr = data.readUInt16LE(Constants.CENATT);
	            // external file attributes
	            _attr = data.readUInt32LE(Constants.CENATX);
	            // LOC header offset
	            _offset = data.readUInt32LE(Constants.CENOFF);
	        },

	        dataHeaderToBinary : function() {
	            // LOC header size (30 bytes)
	            var data = new Buffer(Constants.LOCHDR);
	            // "PK\003\004"
	            data.writeUInt32LE(Constants.LOCSIG, 0);
	            // version needed to extract
	            data.writeUInt16LE(_version, Constants.LOCVER);
	            // general purpose bit flag
	            data.writeUInt16LE(_flags, Constants.LOCFLG);
	            // compression method
	            data.writeUInt16LE(_method, Constants.LOCHOW);
	            // modification time (2 bytes time, 2 bytes date)
	            data.writeUInt32LE(_time, Constants.LOCTIM);
	            // uncompressed file crc-32 value
	            data.writeUInt32LE(_crc, Constants.LOCCRC);
	            // compressed size
	            data.writeUInt32LE(_compressedSize, Constants.LOCSIZ);
	            // uncompressed size
	            data.writeUInt32LE(_size, Constants.LOCLEN);
	            // filename length
	            data.writeUInt16LE(_fnameLen, Constants.LOCNAM);
	            // extra field length
	            data.writeUInt16LE(_extraLen, Constants.LOCEXT);
	            return data;
	        },

	        entryHeaderToBinary : function() {
	            // CEN header size (46 bytes)
	            var data = new Buffer(Constants.CENHDR + _fnameLen + _extraLen + _comLen);
	            // "PK\001\002"
	            data.writeUInt32LE(Constants.CENSIG, 0);
	            // version made by
	            data.writeUInt16LE(_verMade, Constants.CENVEM);
	            // version needed to extract
	            data.writeUInt16LE(_version, Constants.CENVER);
	            // encrypt, decrypt flags
	            data.writeUInt16LE(_flags, Constants.CENFLG);
	            // compression method
	            data.writeUInt16LE(_method, Constants.CENHOW);
	            // modification time (2 bytes time, 2 bytes date)
	            data.writeUInt32LE(_time, Constants.CENTIM);
	            // uncompressed file crc-32 value
	            data.writeInt32LE(_crc, Constants.CENCRC, true);
	            // compressed size
	            data.writeUInt32LE(_compressedSize, Constants.CENSIZ);
	            // uncompressed size
	            data.writeUInt32LE(_size, Constants.CENLEN);
	            // filename length
	            data.writeUInt16LE(_fnameLen, Constants.CENNAM);
	            // extra field length
	            data.writeUInt16LE(_extraLen, Constants.CENEXT);
	            // file comment length
	            data.writeUInt16LE(_comLen, Constants.CENCOM);
	            // volume number start
	            data.writeUInt16LE(_diskStart, Constants.CENDSK);
	            // internal file attributes
	            data.writeUInt16LE(_inattr, Constants.CENATT);
	            // external file attributes
	            data.writeUInt32LE(_attr, Constants.CENATX);
	            // LOC header offset
	            data.writeUInt32LE(_offset, Constants.CENOFF);
	            // fill all with
	            data.fill(0x00, Constants.CENHDR);
	            return data;
	        },

	        toString : function() {
	            return '{\n' +
	                '\t"made" : ' + _verMade + ",\n" +
	                '\t"version" : ' + _version + ",\n" +
	                '\t"flags" : ' + _flags + ",\n" +
	                '\t"method" : ' + Utils.methodToString(_method) + ",\n" +
	                '\t"time" : ' + _time + ",\n" +
	                '\t"crc" : 0x' + _crc.toString(16).toUpperCase() + ",\n" +
	                '\t"compressedSize" : ' + _compressedSize + " bytes,\n" +
	                '\t"size" : ' + _size + " bytes,\n" +
	                '\t"fileNameLength" : ' + _fnameLen + ",\n" +
	                '\t"extraLength" : ' + _extraLen + " bytes,\n" +
	                '\t"commentLength" : ' + _comLen + " bytes,\n" +
	                '\t"diskNumStart" : ' + _diskStart + ",\n" +
	                '\t"inAttr" : ' + _inattr + ",\n" +
	                '\t"attr" : ' + _attr + ",\n" +
	                '\t"offset" : ' + _offset + ",\n" +
	                '\t"entryHeaderSize" : ' + (Constants.CENHDR + _fnameLen + _extraLen + _comLen) + " bytes\n" +
	                '}';
	        }
	    }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Utils = __webpack_require__(125),
	    Constants = Utils.Constants;

	/* The entries in the end of central directory */
	module.exports = function () {
	    var _volumeEntries = 0,
	        _totalEntries = 0,
	        _size = 0,
	        _offset = 0,
	        _commentLength = 0;

	    return {
	        get diskEntries () { return _volumeEntries },
	        set diskEntries (/*Number*/val) { _volumeEntries = _totalEntries = val; },

	        get totalEntries () { return _totalEntries },
	        set totalEntries (/*Number*/val) { _totalEntries = _volumeEntries = val; },

	        get size () { return _size },
	        set size (/*Number*/val) { _size = val; },

	        get offset () { return _offset },
	        set offset (/*Number*/val) { _offset = val; },

	        get commentLength () { return _commentLength },
	        set commentLength (/*Number*/val) { _commentLength = val; },

	        get mainHeaderSize () {
	            return Constants.ENDHDR + _commentLength;
	        },

	        loadFromBinary : function(/*Buffer*/data) {
	            // data should be 22 bytes and start with "PK 05 06"
	            if (data.length != Constants.ENDHDR || data.readUInt32LE(0) != Constants.ENDSIG)
	                throw Utils.Errors.INVALID_END;

	            // number of entries on this volume
	            _volumeEntries = data.readUInt16LE(Constants.ENDSUB);
	            // total number of entries
	            _totalEntries = data.readUInt16LE(Constants.ENDTOT);
	            // central directory size in bytes
	            _size = data.readUInt32LE(Constants.ENDSIZ);
	            // offset of first CEN header
	            _offset = data.readUInt32LE(Constants.ENDOFF);
	            // zip file comment length
	            _commentLength = data.readUInt16LE(Constants.ENDCOM);
	        },

	        toBinary : function() {
	           var b = new Buffer(Constants.ENDHDR + _commentLength);
	            // "PK 05 06" signature
	            b.writeUInt32LE(Constants.ENDSIG, 0);
	            b.writeUInt32LE(0, 4);
	            // number of entries on this volume
	            b.writeUInt16LE(_volumeEntries, Constants.ENDSUB);
	            // total number of entries
	            b.writeUInt16LE(_totalEntries, Constants.ENDTOT);
	            // central directory size in bytes
	            b.writeUInt32LE(_size, Constants.ENDSIZ);
	            // offset of first CEN header
	            b.writeUInt32LE(_offset, Constants.ENDOFF);
	            // zip file comment length
	            b.writeUInt16LE(_commentLength, Constants.ENDCOM);
	            // fill comment memory with spaces so no garbage is left there
	            b.fill(" ", Constants.ENDHDR);

	            return b;
	        },

	        toString : function() {
	            return '{\n' +
	                '\t"diskEntries" : ' + _volumeEntries + ",\n" +
	                '\t"totalEntries" : ' + _totalEntries + ",\n" +
	                '\t"size" : ' + _size + " bytes,\n" +
	                '\t"offset" : 0x' + _offset.toString(16).toUpperCase() + ",\n" +
	                '\t"commentLength" : 0x' + _commentLength + "\n" +
	            '}';
	        }
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	exports.Deflater = __webpack_require__(134);
	exports.Inflater = __webpack_require__(148);

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * $Id: rawdeflate.js,v 0.5 2013/04/09 14:25:38 dankogai Exp dankogai $
	 *
	 * GNU General Public License, version 2 (GPL-2.0)
	 *   http://opensource.org/licenses/GPL-2.0
	 * Original:
	 *  http://www.onicos.com/staff/iz/amuse/javascript/expert/deflate.txt
	 */
	function JSDeflater(/*inbuff*/inbuf) {

	    /* Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
	     * Version: 1.0.1
	     * LastModified: Dec 25 1999
	     */

	    var WSIZE = 32768,		// Sliding Window size
	        zip_STORED_BLOCK = 0,
	        zip_STATIC_TREES = 1,
	        zip_DYN_TREES = 2,
	        zip_DEFAULT_LEVEL = 6,
	        zip_FULL_SEARCH = true,
	        zip_INBUFSIZ = 32768,	// Input buffer size
	        zip_INBUF_EXTRA = 64,	// Extra buffer
	        zip_OUTBUFSIZ = 1024 * 8,
	        zip_window_size = 2 * WSIZE,
	        MIN_MATCH = 3,
	        MAX_MATCH = 258,
	        zip_BITS = 16,
	        LIT_BUFSIZE = 0x2000,
	        zip_HASH_BITS = 13,
	        zip_DIST_BUFSIZE = LIT_BUFSIZE,
	        zip_HASH_SIZE = 1 << zip_HASH_BITS,
	        zip_HASH_MASK = zip_HASH_SIZE - 1,
	        zip_WMASK = WSIZE - 1,
	        zip_NIL = 0, // Tail of hash chains
	        zip_TOO_FAR = 4096,
	        zip_MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1,
	        zip_MAX_DIST = WSIZE - zip_MIN_LOOKAHEAD,
	        zip_SMALLEST = 1,
	        zip_MAX_BITS = 15,
	        zip_MAX_BL_BITS = 7,
	        zip_LENGTH_CODES = 29,
	        zip_LITERALS = 256,
	        zip_END_BLOCK = 256,
	        zip_L_CODES = zip_LITERALS + 1 + zip_LENGTH_CODES,
	        zip_D_CODES = 30,
	        zip_BL_CODES = 19,
	        zip_REP_3_6 = 16,
	        zip_REPZ_3_10 = 17,
	        zip_REPZ_11_138 = 18,
	        zip_HEAP_SIZE = 2 * zip_L_CODES + 1,
	        zip_H_SHIFT = parseInt((zip_HASH_BITS + MIN_MATCH - 1) / MIN_MATCH);

	    var zip_free_queue, zip_qhead, zip_qtail, zip_initflag, zip_outbuf = null, zip_outcnt, zip_outoff, zip_complete,
	        zip_window, zip_d_buf, zip_l_buf, zip_prev, zip_bi_buf, zip_bi_valid, zip_block_start, zip_ins_h, zip_hash_head,
	        zip_prev_match, zip_match_available, zip_match_length, zip_prev_length, zip_strstart, zip_match_start, zip_eofile,
	        zip_lookahead, zip_max_chain_length, zip_max_lazy_match, zip_compr_level, zip_good_match, zip_nice_match,
	        zip_dyn_ltree, zip_dyn_dtree, zip_static_ltree, zip_static_dtree, zip_bl_tree, zip_l_desc, zip_d_desc, zip_bl_desc,
	        zip_bl_count, zip_heap, zip_heap_len, zip_heap_max, zip_depth, zip_length_code, zip_dist_code, zip_base_length,
	        zip_base_dist, zip_flag_buf, zip_last_lit, zip_last_dist, zip_last_flags, zip_flags, zip_flag_bit, zip_opt_len,
	        zip_static_len, zip_deflate_data, zip_deflate_pos;

	    var zip_DeflateCT = function () {
	        this.fc = 0; // frequency count or bit string
	        this.dl = 0; // father node in Huffman tree or length of bit string
	    };

	    var zip_DeflateTreeDesc = function () {
	        this.dyn_tree = null;	// the dynamic tree
	        this.static_tree = null;	// corresponding static tree or NULL
	        this.extra_bits = null;	// extra bits for each code or NULL
	        this.extra_base = 0;	// base index for extra_bits
	        this.elems = 0;		// max number of elements in the tree
	        this.max_length = 0;	// max bit length for the codes
	        this.max_code = 0;		// largest code with non zero frequency
	    };

	    /* Values for max_lazy_match, good_match and max_chain_length, depending on
	     * the desired pack level (0..9). The values given below have been tuned to
	     * exclude worst case performance for pathological files. Better values may be
	     * found for specific files.
	     */
	    var zip_DeflateConfiguration = function (a, b, c, d) {
	        this.good_length = a; // reduce lazy search above this match length
	        this.max_lazy = b;    // do not perform lazy search above this match length
	        this.nice_length = c; // quit search above this match length
	        this.max_chain = d;
	    };

	    var zip_DeflateBuffer = function () {
	        this.next = null;
	        this.len = 0;
	        this.ptr = new Array(zip_OUTBUFSIZ);
	        this.off = 0;
	    };

	    /* constant tables */
	    var zip_extra_lbits = new Array(
	        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0);
	    var zip_extra_dbits = new Array(
	        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13);
	    var zip_extra_blbits = new Array(
	        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7);
	    var zip_bl_order = new Array(
	        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15);
	    var zip_configuration_table = new Array(
	        new zip_DeflateConfiguration(0, 0, 0, 0),
	        new zip_DeflateConfiguration(4, 4, 8, 4),
	        new zip_DeflateConfiguration(4, 5, 16, 8),
	        new zip_DeflateConfiguration(4, 6, 32, 32),
	        new zip_DeflateConfiguration(4, 4, 16, 16),
	        new zip_DeflateConfiguration(8, 16, 32, 32),
	        new zip_DeflateConfiguration(8, 16, 128, 128),
	        new zip_DeflateConfiguration(8, 32, 128, 256),
	        new zip_DeflateConfiguration(32, 128, 258, 1024),
	        new zip_DeflateConfiguration(32, 258, 258, 4096));


	    /* routines (deflate) */

	    var zip_deflate_start = function (level) {
	        var i;

	        if (!level)
	            level = zip_DEFAULT_LEVEL;
	        else if (level < 1)
	            level = 1;
	        else if (level > 9)
	            level = 9;

	        zip_compr_level = level;
	        zip_initflag = false;
	        zip_eofile = false;
	        if (zip_outbuf != null)
	            return;

	        zip_free_queue = zip_qhead = zip_qtail = null;
	        zip_outbuf = new Array(zip_OUTBUFSIZ);
	        zip_window = new Array(zip_window_size);
	        zip_d_buf = new Array(zip_DIST_BUFSIZE);
	        zip_l_buf = new Array(zip_INBUFSIZ + zip_INBUF_EXTRA);
	        zip_prev = new Array(1 << zip_BITS);
	        zip_dyn_ltree = new Array(zip_HEAP_SIZE);
	        for (i = 0; i < zip_HEAP_SIZE; i++) zip_dyn_ltree[i] = new zip_DeflateCT();
	        zip_dyn_dtree = new Array(2 * zip_D_CODES + 1);
	        for (i = 0; i < 2 * zip_D_CODES + 1; i++) zip_dyn_dtree[i] = new zip_DeflateCT();
	        zip_static_ltree = new Array(zip_L_CODES + 2);
	        for (i = 0; i < zip_L_CODES + 2; i++) zip_static_ltree[i] = new zip_DeflateCT();
	        zip_static_dtree = new Array(zip_D_CODES);
	        for (i = 0; i < zip_D_CODES; i++) zip_static_dtree[i] = new zip_DeflateCT();
	        zip_bl_tree = new Array(2 * zip_BL_CODES + 1);
	        for (i = 0; i < 2 * zip_BL_CODES + 1; i++) zip_bl_tree[i] = new zip_DeflateCT();
	        zip_l_desc = new zip_DeflateTreeDesc();
	        zip_d_desc = new zip_DeflateTreeDesc();
	        zip_bl_desc = new zip_DeflateTreeDesc();
	        zip_bl_count = new Array(zip_MAX_BITS + 1);
	        zip_heap = new Array(2 * zip_L_CODES + 1);
	        zip_depth = new Array(2 * zip_L_CODES + 1);
	        zip_length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
	        zip_dist_code = new Array(512);
	        zip_base_length = new Array(zip_LENGTH_CODES);
	        zip_base_dist = new Array(zip_D_CODES);
	        zip_flag_buf = new Array(parseInt(LIT_BUFSIZE / 8));
	    };

	    var zip_deflate_end = function () {
	        zip_free_queue = zip_qhead = zip_qtail = null;
	        zip_outbuf = null;
	        zip_window = null;
	        zip_d_buf = null;
	        zip_l_buf = null;
	        zip_prev = null;
	        zip_dyn_ltree = null;
	        zip_dyn_dtree = null;
	        zip_static_ltree = null;
	        zip_static_dtree = null;
	        zip_bl_tree = null;
	        zip_l_desc = null;
	        zip_d_desc = null;
	        zip_bl_desc = null;
	        zip_bl_count = null;
	        zip_heap = null;
	        zip_depth = null;
	        zip_length_code = null;
	        zip_dist_code = null;
	        zip_base_length = null;
	        zip_base_dist = null;
	        zip_flag_buf = null;
	    };

	    var zip_reuse_queue = function (p) {
	        p.next = zip_free_queue;
	        zip_free_queue = p;
	    };

	    var zip_new_queue = function () {
	        var p;

	        if (zip_free_queue != null) {
	            p = zip_free_queue;
	            zip_free_queue = zip_free_queue.next;
	        }
	        else
	            p = new zip_DeflateBuffer();
	        p.next = null;
	        p.len = p.off = 0;

	        return p;
	    };

	    var zip_head1 = function (i) {
	        return zip_prev[WSIZE + i];
	    };

	    var zip_head2 = function (i, val) {
	        return zip_prev[WSIZE + i] = val;
	    };

	    /* put_byte is used for the compressed output, put_ubyte for the
	     * uncompressed output. However unlzw() uses window for its
	     * suffix table instead of its output buffer, so it does not use put_ubyte
	     * (to be cleaned up).
	     */
	    var zip_put_byte = function (c) {
	        zip_outbuf[zip_outoff + zip_outcnt++] = c;
	        if (zip_outoff + zip_outcnt == zip_OUTBUFSIZ)
	            zip_qoutbuf();
	    };

	    /* Output a 16 bit value, lsb first */
	    var zip_put_short = function (w) {
	        w &= 0xffff;
	        if (zip_outoff + zip_outcnt < zip_OUTBUFSIZ - 2) {
	            zip_outbuf[zip_outoff + zip_outcnt++] = (w & 0xff);
	            zip_outbuf[zip_outoff + zip_outcnt++] = (w >>> 8);
	        } else {
	            zip_put_byte(w & 0xff);
	            zip_put_byte(w >>> 8);
	        }
	    };

	    /* ==========================================================================
	     * Insert string s in the dictionary and set match_head to the previous head
	     * of the hash chain (the most recent string with same hash key). Return
	     * the previous length of the hash chain.
	     * IN  assertion: all calls to to INSERT_STRING are made with consecutive
	     *    input characters and the first MIN_MATCH bytes of s are valid
	     *    (except for the last MIN_MATCH-1 bytes of the input file).
	     */
	    var zip_INSERT_STRING = function () {
	        zip_ins_h = ((zip_ins_h << zip_H_SHIFT)
	            ^ (zip_window[zip_strstart + MIN_MATCH - 1] & 0xff))
	            & zip_HASH_MASK;
	        zip_hash_head = zip_head1(zip_ins_h);
	        zip_prev[zip_strstart & zip_WMASK] = zip_hash_head;
	        zip_head2(zip_ins_h, zip_strstart);
	    };

	    /* Send a code of the given tree. c and tree must not have side effects */
	    var zip_SEND_CODE = function (c, tree) {
	        zip_send_bits(tree[c].fc, tree[c].dl);
	    };

	    /* Mapping from a distance to a distance code. dist is the distance - 1 and
	     * must not have side effects. dist_code[256] and dist_code[257] are never
	     * used.
	     */
	    var zip_D_CODE = function (dist) {
	        return (dist < 256 ? zip_dist_code[dist]
	            : zip_dist_code[256 + (dist >> 7)]) & 0xff;
	    };

	    /* ==========================================================================
	     * Compares to subtrees, using the tree depth as tie breaker when
	     * the subtrees have equal frequency. This minimizes the worst case length.
	     */
	    var zip_SMALLER = function (tree, n, m) {
	        return tree[n].fc < tree[m].fc ||
	            (tree[n].fc == tree[m].fc && zip_depth[n] <= zip_depth[m]);
	    };

	    /* ==========================================================================
	     * read string data
	     */
	    var zip_read_buff = function (buff, offset, n) {
	        var i;
	        for (i = 0; i < n && zip_deflate_pos < zip_deflate_data.length; i++)
	            buff[offset + i] =
	                zip_deflate_data[zip_deflate_pos++] & 0xff;
	        return i;
	    };

	    /* ==========================================================================
	     * Initialize the "longest match" routines for a new file
	     */
	    var zip_lm_init = function () {
	        var j;

	        /* Initialize the hash table. */
	        for (j = 0; j < zip_HASH_SIZE; j++)
	            zip_prev[WSIZE + j] = 0;
	        zip_max_lazy_match = zip_configuration_table[zip_compr_level].max_lazy;
	        zip_good_match = zip_configuration_table[zip_compr_level].good_length;
	        if (!zip_FULL_SEARCH)
	            zip_nice_match = zip_configuration_table[zip_compr_level].nice_length;
	        zip_max_chain_length = zip_configuration_table[zip_compr_level].max_chain;

	        zip_strstart = 0;
	        zip_block_start = 0;

	        zip_lookahead = zip_read_buff(zip_window, 0, 2 * WSIZE);
	        if (zip_lookahead <= 0) {
	            zip_eofile = true;
	            zip_lookahead = 0;
	            return;
	        }
	        zip_eofile = false;
	        /* Make sure that we always have enough lookahead. This is important
	         * if input comes from a device such as a tty.
	         */
	        while (zip_lookahead < zip_MIN_LOOKAHEAD && !zip_eofile)
	            zip_fill_window();

	        /* If lookahead < MIN_MATCH, ins_h is garbage, but this is
	         * not important since only literal bytes will be emitted.
	         */
	        zip_ins_h = 0;
	        for (j = 0; j < MIN_MATCH - 1; j++) {
	            zip_ins_h = ((zip_ins_h << zip_H_SHIFT) ^ (zip_window[j] & 0xff)) & zip_HASH_MASK;
	        }
	    };

	    /* ==========================================================================
	     * Set match_start to the longest match starting at the given string and
	     * return its length. Matches shorter or equal to prev_length are discarded,
	     * in which case the result is equal to prev_length and match_start is
	     * garbage.
	     * IN assertions: cur_match is the head of the hash chain for the current
	     *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	     */
	    var zip_longest_match = function (cur_match) {
	        var chain_length = zip_max_chain_length; // max hash chain length
	        var scanp = zip_strstart; // current string
	        var matchp;		// matched string
	        var len;		// length of current match
	        var best_len = zip_prev_length;	// best match length so far

	        /* Stop when cur_match becomes <= limit. To simplify the code,
	         * we prevent matches with the string of window index 0.
	         */
	        var limit = (zip_strstart > zip_MAX_DIST ? zip_strstart - zip_MAX_DIST : zip_NIL);

	        var strendp = zip_strstart + MAX_MATCH;
	        var scan_end1 = zip_window[scanp + best_len - 1];
	        var scan_end = zip_window[scanp + best_len];

	        /* Do not waste too much time if we already have a good match: */
	        if (zip_prev_length >= zip_good_match)
	            chain_length >>= 2;

	        do {
	            matchp = cur_match;

	            /* Skip to next match if the match length cannot increase
	             * or if the match length is less than 2:
	             */
	            if (zip_window[matchp + best_len] != scan_end ||
	                zip_window[matchp + best_len - 1] != scan_end1 ||
	                zip_window[matchp] != zip_window[scanp] ||
	                zip_window[++matchp] != zip_window[scanp + 1]) {
	                continue;
	            }

	            /* The check at best_len-1 can be removed because it will be made
	             * again later. (This heuristic is not always a win.)
	             * It is not necessary to compare scan[2] and match[2] since they
	             * are always equal when the other bytes match, given that
	             * the hash keys are equal and that HASH_BITS >= 8.
	             */
	            scanp += 2;
	            matchp++;

	            /* We check for insufficient lookahead only every 8th comparison;
	             * the 256th check will be made at strstart+258.
	             */
	            do {
	            } while (zip_window[++scanp] == zip_window[++matchp] &&
	                zip_window[++scanp] == zip_window[++matchp] &&
	                zip_window[++scanp] == zip_window[++matchp] &&
	                zip_window[++scanp] == zip_window[++matchp] &&
	                zip_window[++scanp] == zip_window[++matchp] &&
	                zip_window[++scanp] == zip_window[++matchp] &&
	                zip_window[++scanp] == zip_window[++matchp] &&
	                zip_window[++scanp] == zip_window[++matchp] &&
	                scanp < strendp);

	            len = MAX_MATCH - (strendp - scanp);
	            scanp = strendp - MAX_MATCH;

	            if (len > best_len) {
	                zip_match_start = cur_match;
	                best_len = len;
	                if (zip_FULL_SEARCH) {
	                    if (len >= MAX_MATCH) break;
	                } else {
	                    if (len >= zip_nice_match) break;
	                }

	                scan_end1 = zip_window[scanp + best_len - 1];
	                scan_end = zip_window[scanp + best_len];
	            }
	        } while ((cur_match = zip_prev[cur_match & zip_WMASK]) > limit
	            && --chain_length != 0);

	        return best_len;
	    };

	    /* ==========================================================================
	     * Fill the window when the lookahead becomes insufficient.
	     * Updates strstart and lookahead, and sets eofile if end of input file.
	     * IN assertion: lookahead < MIN_LOOKAHEAD && strstart + lookahead > 0
	     * OUT assertions: at least one byte has been read, or eofile is set;
	     *    file reads are performed for at least two bytes (required for the
	     *    translate_eol option).
	     */
	    var zip_fill_window = function () {
	        var n, m;

	        // Amount of free space at the end of the window.
	        var more = zip_window_size - zip_lookahead - zip_strstart;

	        /* If the window is almost full and there is insufficient lookahead,
	         * move the upper half to the lower one to make room in the upper half.
	         */
	        if (more == -1) {
	            /* Very unlikely, but possible on 16 bit machine if strstart == 0
	             * and lookahead == 1 (input done one byte at time)
	             */
	            more--;
	        } else if (zip_strstart >= WSIZE + zip_MAX_DIST) {
	            /* By the IN assertion, the window is not empty so we can't confuse
	             * more == 0 with more == 64K on a 16 bit machine.
	             */
	            for (n = 0; n < WSIZE; n++)
	                zip_window[n] = zip_window[n + WSIZE];

	            zip_match_start -= WSIZE;
	            zip_strstart -= WSIZE;
	            /* we now have strstart >= MAX_DIST: */
	            zip_block_start -= WSIZE;

	            for (n = 0; n < zip_HASH_SIZE; n++) {
	                m = zip_head1(n);
	                zip_head2(n, m >= WSIZE ? m - WSIZE : zip_NIL);
	            }
	            for (n = 0; n < WSIZE; n++) {
	                /* If n is not on any hash chain, prev[n] is garbage but
	                 * its value will never be used.
	                 */
	                m = zip_prev[n];
	                zip_prev[n] = (m >= WSIZE ? m - WSIZE : zip_NIL);
	            }
	            more += WSIZE;
	        }
	        // At this point, more >= 2
	        if (!zip_eofile) {
	            n = zip_read_buff(zip_window, zip_strstart + zip_lookahead, more);
	            if (n <= 0)
	                zip_eofile = true;
	            else
	                zip_lookahead += n;
	        }
	    };

	    /* ==========================================================================
	     * Processes a new input file and return its compressed length. This
	     * function does not perform lazy evaluationof matches and inserts
	     * new strings in the dictionary only for unmatched strings or for short
	     * matches. It is used only for the fast compression options.
	     */
	    var zip_deflate_fast = function () {
	        while (zip_lookahead != 0 && zip_qhead == null) {
	            var flush; // set if current block must be flushed

	            /* Insert the string window[strstart .. strstart+2] in the
	             * dictionary, and set hash_head to the head of the hash chain:
	             */
	            zip_INSERT_STRING();

	            /* Find the longest match, discarding those <= prev_length.
	             * At this point we have always match_length < MIN_MATCH
	             */
	            if (zip_hash_head != zip_NIL &&
	                zip_strstart - zip_hash_head <= zip_MAX_DIST) {
	                /* To simplify the code, we prevent matches with the string
	                 * of window index 0 (in particular we have to avoid a match
	                 * of the string with itself at the start of the input file).
	                 */
	                zip_match_length = zip_longest_match(zip_hash_head);
	                /* longest_match() sets match_start */
	                if (zip_match_length > zip_lookahead)
	                    zip_match_length = zip_lookahead;
	            }
	            if (zip_match_length >= MIN_MATCH) {
	                flush = zip_ct_tally(zip_strstart - zip_match_start,
	                    zip_match_length - MIN_MATCH);
	                zip_lookahead -= zip_match_length;

	                /* Insert new strings in the hash table only if the match length
	                 * is not too large. This saves time but degrades compression.
	                 */
	                if (zip_match_length <= zip_max_lazy_match) {
	                    zip_match_length--; // string at strstart already in hash table
	                    do {
	                        zip_strstart++;
	                        zip_INSERT_STRING();
	                        /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	                         * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH
	                         * these bytes are garbage, but it does not matter since
	                         * the next lookahead bytes will be emitted as literals.
	                         */
	                    } while (--zip_match_length != 0);
	                    zip_strstart++;
	                } else {
	                    zip_strstart += zip_match_length;
	                    zip_match_length = 0;
	                    zip_ins_h = zip_window[zip_strstart] & 0xff;
	                    zip_ins_h = ((zip_ins_h << zip_H_SHIFT) ^ (zip_window[zip_strstart + 1] & 0xff)) & zip_HASH_MASK;
	                }
	            } else {
	                /* No match, output a literal byte */
	                flush = zip_ct_tally(0, zip_window[zip_strstart] & 0xff);
	                zip_lookahead--;
	                zip_strstart++;
	            }
	            if (flush) {
	                zip_flush_block(0);
	                zip_block_start = zip_strstart;
	            }

	            /* Make sure that we always have enough lookahead, except
	             * at the end of the input file. We need MAX_MATCH bytes
	             * for the next match, plus MIN_MATCH bytes to insert the
	             * string following the next match.
	             */
	            while (zip_lookahead < zip_MIN_LOOKAHEAD && !zip_eofile)
	                zip_fill_window();
	        }
	    };

	    var zip_deflate_better = function () {
	        /* Process the input block. */
	        while (zip_lookahead != 0 && zip_qhead == null) {
	            /* Insert the string window[strstart .. strstart+2] in the
	             * dictionary, and set hash_head to the head of the hash chain:
	             */
	            zip_INSERT_STRING();

	            /* Find the longest match, discarding those <= prev_length.
	             */
	            zip_prev_length = zip_match_length;
	            zip_prev_match = zip_match_start;
	            zip_match_length = MIN_MATCH - 1;

	            if (zip_hash_head != zip_NIL &&
	                zip_prev_length < zip_max_lazy_match &&
	                zip_strstart - zip_hash_head <= zip_MAX_DIST) {
	                /* To simplify the code, we prevent matches with the string
	                 * of window index 0 (in particular we have to avoid a match
	                 * of the string with itself at the start of the input file).
	                 */
	                zip_match_length = zip_longest_match(zip_hash_head);
	                /* longest_match() sets match_start */
	                if (zip_match_length > zip_lookahead)
	                    zip_match_length = zip_lookahead;

	                /* Ignore a length 3 match if it is too distant: */
	                if (zip_match_length == MIN_MATCH &&
	                    zip_strstart - zip_match_start > zip_TOO_FAR) {
	                    /* If prev_match is also MIN_MATCH, match_start is garbage
	                     * but we will ignore the current match anyway.
	                     */
	                    zip_match_length--;
	                }
	            }
	            /* If there was a match at the previous step and the current
	             * match is not better, output the previous match:
	             */
	            if (zip_prev_length >= MIN_MATCH &&
	                zip_match_length <= zip_prev_length) {
	                var flush; // set if current block must be flushed
	                flush = zip_ct_tally(zip_strstart - 1 - zip_prev_match,
	                    zip_prev_length - MIN_MATCH);

	                /* Insert in hash table all strings up to the end of the match.
	                 * strstart-1 and strstart are already inserted.
	                 */
	                zip_lookahead -= zip_prev_length - 1;
	                zip_prev_length -= 2;
	                do {
	                    zip_strstart++;
	                    zip_INSERT_STRING();
	                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	                     * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH
	                     * these bytes are garbage, but it does not matter since the
	                     * next lookahead bytes will always be emitted as literals.
	                     */
	                } while (--zip_prev_length != 0);
	                zip_match_available = 0;
	                zip_match_length = MIN_MATCH - 1;
	                zip_strstart++;
	                if (flush) {
	                    zip_flush_block(0);
	                    zip_block_start = zip_strstart;
	                }
	            } else if (zip_match_available != 0) {
	                /* If there was no match at the previous position, output a
	                 * single literal. If there was a match but the current match
	                 * is longer, truncate the previous match to a single literal.
	                 */
	                if (zip_ct_tally(0, zip_window[zip_strstart - 1] & 0xff)) {
	                    zip_flush_block(0);
	                    zip_block_start = zip_strstart;
	                }
	                zip_strstart++;
	                zip_lookahead--;
	            } else {
	                /* There is no previous match to compare with, wait for
	                 * the next step to decide.
	                 */
	                zip_match_available = 1;
	                zip_strstart++;
	                zip_lookahead--;
	            }

	            /* Make sure that we always have enough lookahead, except
	             * at the end of the input file. We need MAX_MATCH bytes
	             * for the next match, plus MIN_MATCH bytes to insert the
	             * string following the next match.
	             */
	            while (zip_lookahead < zip_MIN_LOOKAHEAD && !zip_eofile)
	                zip_fill_window();
	        }
	    };

	    var zip_init_deflate = function () {
	        if (zip_eofile)
	            return;
	        zip_bi_buf = 0;
	        zip_bi_valid = 0;
	        zip_ct_init();
	        zip_lm_init();

	        zip_qhead = null;
	        zip_outcnt = 0;
	        zip_outoff = 0;
	        zip_match_available = 0;

	        if (zip_compr_level <= 3) {
	            zip_prev_length = MIN_MATCH - 1;
	            zip_match_length = 0;
	        }
	        else {
	            zip_match_length = MIN_MATCH - 1;
	            zip_match_available = 0;
	            zip_match_available = 0;
	        }

	        zip_complete = false;
	    };

	    /* ==========================================================================
	     * Same as above, but achieves better compression. We use a lazy
	     * evaluation for matches: a match is finally adopted only if there is
	     * no better match at the next window position.
	     */
	    var zip_deflate_internal = function (buff, off, buff_size) {
	        var n;

	        if (!zip_initflag) {
	            zip_init_deflate();
	            zip_initflag = true;
	            if (zip_lookahead == 0) { // empty
	                zip_complete = true;
	                return 0;
	            }
	        }

	        if ((n = zip_qcopy(buff, off, buff_size)) == buff_size)
	            return buff_size;

	        if (zip_complete)
	            return n;

	        if (zip_compr_level <= 3) // optimized for speed
	            zip_deflate_fast();
	        else
	            zip_deflate_better();
	        if (zip_lookahead == 0) {
	            if (zip_match_available != 0)
	                zip_ct_tally(0, zip_window[zip_strstart - 1] & 0xff);
	            zip_flush_block(1);
	            zip_complete = true;
	        }
	        return n + zip_qcopy(buff, n + off, buff_size - n);
	    };

	    var zip_qcopy = function (buff, off, buff_size) {
	        var n, i, j;

	        n = 0;
	        while (zip_qhead != null && n < buff_size) {
	            i = buff_size - n;
	            if (i > zip_qhead.len)
	                i = zip_qhead.len;
	            for (j = 0; j < i; j++)
	                buff[off + n + j] = zip_qhead.ptr[zip_qhead.off + j];

	            zip_qhead.off += i;
	            zip_qhead.len -= i;
	            n += i;
	            if (zip_qhead.len == 0) {
	                var p;
	                p = zip_qhead;
	                zip_qhead = zip_qhead.next;
	                zip_reuse_queue(p);
	            }
	        }

	        if (n == buff_size)
	            return n;

	        if (zip_outoff < zip_outcnt) {
	            i = buff_size - n;
	            if (i > zip_outcnt - zip_outoff)
	                i = zip_outcnt - zip_outoff;
	            // System.arraycopy(outbuf, outoff, buff, off + n, i);
	            for (j = 0; j < i; j++)
	                buff[off + n + j] = zip_outbuf[zip_outoff + j];
	            zip_outoff += i;
	            n += i;
	            if (zip_outcnt == zip_outoff)
	                zip_outcnt = zip_outoff = 0;
	        }
	        return n;
	    };

	    /* ==========================================================================
	     * Allocate the match buffer, initialize the various tables and save the
	     * location of the internal file attribute (ascii/binary) and method
	     * (DEFLATE/STORE).
	     */
	    var zip_ct_init = function () {
	        var n;	// iterates over tree elements
	        var bits;	// bit counter
	        var length;	// length value
	        var code;	// code value
	        var dist;	// distance index

	        if (zip_static_dtree[0].dl != 0) return; // ct_init already called

	        zip_l_desc.dyn_tree = zip_dyn_ltree;
	        zip_l_desc.static_tree = zip_static_ltree;
	        zip_l_desc.extra_bits = zip_extra_lbits;
	        zip_l_desc.extra_base = zip_LITERALS + 1;
	        zip_l_desc.elems = zip_L_CODES;
	        zip_l_desc.max_length = zip_MAX_BITS;
	        zip_l_desc.max_code = 0;

	        zip_d_desc.dyn_tree = zip_dyn_dtree;
	        zip_d_desc.static_tree = zip_static_dtree;
	        zip_d_desc.extra_bits = zip_extra_dbits;
	        zip_d_desc.extra_base = 0;
	        zip_d_desc.elems = zip_D_CODES;
	        zip_d_desc.max_length = zip_MAX_BITS;
	        zip_d_desc.max_code = 0;

	        zip_bl_desc.dyn_tree = zip_bl_tree;
	        zip_bl_desc.static_tree = null;
	        zip_bl_desc.extra_bits = zip_extra_blbits;
	        zip_bl_desc.extra_base = 0;
	        zip_bl_desc.elems = zip_BL_CODES;
	        zip_bl_desc.max_length = zip_MAX_BL_BITS;
	        zip_bl_desc.max_code = 0;

	        // Initialize the mapping length (0..255) -> length code (0..28)
	        length = 0;
	        for (code = 0; code < zip_LENGTH_CODES - 1; code++) {
	            zip_base_length[code] = length;
	            for (n = 0; n < (1 << zip_extra_lbits[code]); n++)
	                zip_length_code[length++] = code;
	        }
	        /* Note that the length 255 (match length 258) can be represented
	         * in two different ways: code 284 + 5 bits or code 285, so we
	         * overwrite length_code[255] to use the best encoding:
	         */
	        zip_length_code[length - 1] = code;

	        /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	        dist = 0;
	        for (code = 0; code < 16; code++) {
	            zip_base_dist[code] = dist;
	            for (n = 0; n < (1 << zip_extra_dbits[code]); n++) {
	                zip_dist_code[dist++] = code;
	            }
	        }
	        dist >>= 7; // from now on, all distances are divided by 128
	        for (; code < zip_D_CODES; code++) {
	            zip_base_dist[code] = dist << 7;
	            for (n = 0; n < (1 << (zip_extra_dbits[code] - 7)); n++)
	                zip_dist_code[256 + dist++] = code;
	        }
	        // Construct the codes of the static literal tree
	        for (bits = 0; bits <= zip_MAX_BITS; bits++)
	            zip_bl_count[bits] = 0;
	        n = 0;
	        while (n <= 143) {
	            zip_static_ltree[n++].dl = 8;
	            zip_bl_count[8]++;
	        }
	        while (n <= 255) {
	            zip_static_ltree[n++].dl = 9;
	            zip_bl_count[9]++;
	        }
	        while (n <= 279) {
	            zip_static_ltree[n++].dl = 7;
	            zip_bl_count[7]++;
	        }
	        while (n <= 287) {
	            zip_static_ltree[n++].dl = 8;
	            zip_bl_count[8]++;
	        }
	        /* Codes 286 and 287 do not exist, but we must include them in the
	         * tree construction to get a canonical Huffman tree (longest code
	         * all ones)
	         */
	        zip_gen_codes(zip_static_ltree, zip_L_CODES + 1);

	        /* The static distance tree is trivial: */
	        for (n = 0; n < zip_D_CODES; n++) {
	            zip_static_dtree[n].dl = 5;
	            zip_static_dtree[n].fc = zip_bi_reverse(n, 5);
	        }

	        // Initialize the first block of the first file:
	        zip_init_block();
	    };

	    /* ==========================================================================
	     * Initialize a new block.
	     */
	    var zip_init_block = function () {
	        var n; // iterates over tree elements

	        // Initialize the trees.
	        for (n = 0; n < zip_L_CODES; n++) zip_dyn_ltree[n].fc = 0;
	        for (n = 0; n < zip_D_CODES; n++) zip_dyn_dtree[n].fc = 0;
	        for (n = 0; n < zip_BL_CODES; n++) zip_bl_tree[n].fc = 0;

	        zip_dyn_ltree[zip_END_BLOCK].fc = 1;
	        zip_opt_len = zip_static_len = 0;
	        zip_last_lit = zip_last_dist = zip_last_flags = 0;
	        zip_flags = 0;
	        zip_flag_bit = 1;
	    };

	    /* ==========================================================================
	     * Restore the heap property by moving down the tree starting at node k,
	     * exchanging a node with the smallest of its two sons if necessary, stopping
	     * when the heap property is re-established (each father smaller than its
	     * two sons).
	     */
	    var zip_pqdownheap = function (tree,	// the tree to restore
	                                   k) {	// node to move down
	        var v = zip_heap[k];
	        var j = k << 1;	// left son of k

	        while (j <= zip_heap_len) {
	            // Set j to the smallest of the two sons:
	            if (j < zip_heap_len &&
	                zip_SMALLER(tree, zip_heap[j + 1], zip_heap[j]))
	                j++;

	            // Exit if v is smaller than both sons
	            if (zip_SMALLER(tree, v, zip_heap[j]))
	                break;

	            // Exchange v with the smallest son
	            zip_heap[k] = zip_heap[j];
	            k = j;

	            // And continue down the tree, setting j to the left son of k
	            j <<= 1;
	        }
	        zip_heap[k] = v;
	    };

	    /* ==========================================================================
	     * Compute the optimal bit lengths for a tree and update the total bit length
	     * for the current block.
	     * IN assertion: the fields freq and dad are set, heap[heap_max] and
	     *    above are the tree nodes sorted by increasing frequency.
	     * OUT assertions: the field len is set to the optimal bit length, the
	     *     array bl_count contains the frequencies for each bit length.
	     *     The length opt_len is updated; static_len is also updated if stree is
	     *     not null.
	     */
	    var zip_gen_bitlen = function (desc) { // the tree descriptor
	        var tree = desc.dyn_tree;
	        var extra = desc.extra_bits;
	        var base = desc.extra_base;
	        var max_code = desc.max_code;
	        var max_length = desc.max_length;
	        var stree = desc.static_tree;
	        var h;		// heap index
	        var n, m;		// iterate over the tree elements
	        var bits;		// bit length
	        var xbits;		// extra bits
	        var f;		// frequency
	        var overflow = 0;	// number of elements with bit length too large

	        for (bits = 0; bits <= zip_MAX_BITS; bits++)
	            zip_bl_count[bits] = 0;

	        /* In a first pass, compute the optimal bit lengths (which may
	         * overflow in the case of the bit length tree).
	         */
	        tree[zip_heap[zip_heap_max]].dl = 0; // root of the heap

	        for (h = zip_heap_max + 1; h < zip_HEAP_SIZE; h++) {
	            n = zip_heap[h];
	            bits = tree[tree[n].dl].dl + 1;
	            if (bits > max_length) {
	                bits = max_length;
	                overflow++;
	            }
	            tree[n].dl = bits;
	            // We overwrite tree[n].dl which is no longer needed

	            if (n > max_code)
	                continue; // not a leaf node

	            zip_bl_count[bits]++;
	            xbits = 0;
	            if (n >= base)
	                xbits = extra[n - base];
	            f = tree[n].fc;
	            zip_opt_len += f * (bits + xbits);
	            if (stree != null)
	                zip_static_len += f * (stree[n].dl + xbits);
	        }
	        if (overflow == 0)
	            return;

	        // This happens for example on obj2 and pic of the Calgary corpus

	        // Find the first bit length which could increase:
	        do {
	            bits = max_length - 1;
	            while (zip_bl_count[bits] == 0)
	                bits--;
	            zip_bl_count[bits]--;		// move one leaf down the tree
	            zip_bl_count[bits + 1] += 2;	// move one overflow item as its brother
	            zip_bl_count[max_length]--;
	            /* The brother of the overflow item also moves one step up,
	             * but this does not affect bl_count[max_length]
	             */
	            overflow -= 2;
	        } while (overflow > 0);

	        /* Now recompute all bit lengths, scanning in increasing frequency.
	         * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	         * lengths instead of fixing only the wrong ones. This idea is taken
	         * from 'ar' written by Haruhiko Okumura.)
	         */
	        for (bits = max_length; bits != 0; bits--) {
	            n = zip_bl_count[bits];
	            while (n != 0) {
	                m = zip_heap[--h];
	                if (m > max_code)
	                    continue;
	                if (tree[m].dl != bits) {
	                    zip_opt_len += (bits - tree[m].dl) * tree[m].fc;
	                    tree[m].fc = bits;
	                }
	                n--;
	            }
	        }
	    };

	    /* ==========================================================================
	     * Generate the codes for a given tree and bit counts (which need not be
	     * optimal).
	     * IN assertion: the array bl_count contains the bit length statistics for
	     * the given tree and the field len is set for all tree elements.
	     * OUT assertion: the field code is set for all tree elements of non
	     *     zero code length.
	     */
	    var zip_gen_codes = function (tree,	// the tree to decorate
	                                  max_code) {	// largest code with non zero frequency
	        var next_code = new Array(zip_MAX_BITS + 1); // next code value for each bit length
	        var code = 0;		// running code value
	        var bits;			// bit index
	        var n;			// code index

	        /* The distribution counts are first used to generate the code values
	         * without bit reversal.
	         */
	        for (bits = 1; bits <= zip_MAX_BITS; bits++) {
	            code = ((code + zip_bl_count[bits - 1]) << 1);
	            next_code[bits] = code;
	        }

	        /* Check that the bit counts in bl_count are consistent. The last code
	         * must be all ones.
	         */
	        for (n = 0; n <= max_code; n++) {
	            var len = tree[n].dl;
	            if (len == 0)
	                continue;
	            // Now reverse the bits
	            tree[n].fc = zip_bi_reverse(next_code[len]++, len);
	        }
	    };

	    /* ==========================================================================
	     * Construct one Huffman tree and assigns the code bit strings and lengths.
	     * Update the total bit length for the current block.
	     * IN assertion: the field freq is set for all tree elements.
	     * OUT assertions: the fields len and code are set to the optimal bit length
	     *     and corresponding code. The length opt_len is updated; static_len is
	     *     also updated if stree is not null. The field max_code is set.
	     */
	    var zip_build_tree = function (desc) { // the tree descriptor
	        var tree = desc.dyn_tree;
	        var stree = desc.static_tree;
	        var elems = desc.elems;
	        var n, m;		// iterate over heap elements
	        var max_code = -1;	// largest code with non zero frequency
	        var node = elems;	// next internal node of the tree

	        /* Construct the initial heap, with least frequent element in
	         * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	         * heap[0] is not used.
	         */
	        zip_heap_len = 0;
	        zip_heap_max = zip_HEAP_SIZE;

	        for (n = 0; n < elems; n++) {
	            if (tree[n].fc != 0) {
	                zip_heap[++zip_heap_len] = max_code = n;
	                zip_depth[n] = 0;
	            } else
	                tree[n].dl = 0;
	        }

	        /* The pkzip format requires that at least one distance code exists,
	         * and that at least one bit should be sent even if there is only one
	         * possible code. So to avoid special checks later on we force at least
	         * two codes of non zero frequency.
	         */
	        while (zip_heap_len < 2) {
	            var xnew = zip_heap[++zip_heap_len] = (max_code < 2 ? ++max_code : 0);
	            tree[xnew].fc = 1;
	            zip_depth[xnew] = 0;
	            zip_opt_len--;
	            if (stree != null)
	                zip_static_len -= stree[xnew].dl;
	            // new is 0 or 1 so it does not have extra bits
	        }
	        desc.max_code = max_code;

	        /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	         * establish sub-heaps of increasing lengths:
	         */
	        for (n = zip_heap_len >> 1; n >= 1; n--)
	            zip_pqdownheap(tree, n);

	        /* Construct the Huffman tree by repeatedly combining the least two
	         * frequent nodes.
	         */
	        do {
	            n = zip_heap[zip_SMALLEST];
	            zip_heap[zip_SMALLEST] = zip_heap[zip_heap_len--];
	            zip_pqdownheap(tree, zip_SMALLEST);

	            m = zip_heap[zip_SMALLEST];  // m = node of next least frequency

	            // keep the nodes sorted by frequency
	            zip_heap[--zip_heap_max] = n;
	            zip_heap[--zip_heap_max] = m;

	            // Create a new node father of n and m
	            tree[node].fc = tree[n].fc + tree[m].fc;
	            if (zip_depth[n] > zip_depth[m] + 1)
	                zip_depth[node] = zip_depth[n];
	            else
	                zip_depth[node] = zip_depth[m] + 1;
	            tree[n].dl = tree[m].dl = node;

	            // and insert the new node in the heap
	            zip_heap[zip_SMALLEST] = node++;
	            zip_pqdownheap(tree, zip_SMALLEST);

	        } while (zip_heap_len >= 2);

	        zip_heap[--zip_heap_max] = zip_heap[zip_SMALLEST];

	        /* At this point, the fields freq and dad are set. We can now
	         * generate the bit lengths.
	         */
	        zip_gen_bitlen(desc);

	        // The field len is now set, we can generate the bit codes
	        zip_gen_codes(tree, max_code);
	    };

	    /* ==========================================================================
	     * Scan a literal or distance tree to determine the frequencies of the codes
	     * in the bit length tree. Updates opt_len to take into account the repeat
	     * counts. (The contribution of the bit length codes will be added later
	     * during the construction of bl_tree.)
	     */
	    var zip_scan_tree = function (tree,// the tree to be scanned
	                                  max_code) {  // and its largest code of non zero frequency
	        var n;			// iterates over all tree elements
	        var prevlen = -1;		// last emitted length
	        var curlen;			// length of current code
	        var nextlen = tree[0].dl;	// length of next code
	        var count = 0;		// repeat count of the current code
	        var max_count = 7;		// max repeat count
	        var min_count = 4;		// min repeat count

	        if (nextlen == 0) {
	            max_count = 138;
	            min_count = 3;
	        }
	        tree[max_code + 1].dl = 0xffff; // guard

	        for (n = 0; n <= max_code; n++) {
	            curlen = nextlen;
	            nextlen = tree[n + 1].dl;
	            if (++count < max_count && curlen == nextlen)
	                continue;
	            else if (count < min_count)
	                zip_bl_tree[curlen].fc += count;
	            else if (curlen != 0) {
	                if (curlen != prevlen)
	                    zip_bl_tree[curlen].fc++;
	                zip_bl_tree[zip_REP_3_6].fc++;
	            } else if (count <= 10)
	                zip_bl_tree[zip_REPZ_3_10].fc++;
	            else
	                zip_bl_tree[zip_REPZ_11_138].fc++;
	            count = 0;
	            prevlen = curlen;
	            if (nextlen == 0) {
	                max_count = 138;
	                min_count = 3;
	            } else if (curlen == nextlen) {
	                max_count = 6;
	                min_count = 3;
	            } else {
	                max_count = 7;
	                min_count = 4;
	            }
	        }
	    };

	    /* ==========================================================================
	     * Send a literal or distance tree in compressed form, using the codes in
	     * bl_tree.
	     */
	    var zip_send_tree = function (tree, // the tree to be scanned
	                                  max_code) { // and its largest code of non zero frequency
	        var n;			// iterates over all tree elements
	        var prevlen = -1;		// last emitted length
	        var curlen;			// length of current code
	        var nextlen = tree[0].dl;	// length of next code
	        var count = 0;		// repeat count of the current code
	        var max_count = 7;		// max repeat count
	        var min_count = 4;		// min repeat count

	        /* tree[max_code+1].dl = -1; */
	        /* guard already set */
	        if (nextlen == 0) {
	            max_count = 138;
	            min_count = 3;
	        }

	        for (n = 0; n <= max_code; n++) {
	            curlen = nextlen;
	            nextlen = tree[n + 1].dl;
	            if (++count < max_count && curlen == nextlen) {
	                continue;
	            } else if (count < min_count) {
	                do {
	                    zip_SEND_CODE(curlen, zip_bl_tree);
	                } while (--count != 0);
	            } else if (curlen != 0) {
	                if (curlen != prevlen) {
	                    zip_SEND_CODE(curlen, zip_bl_tree);
	                    count--;
	                }
	                // Assert(count >= 3 && count <= 6, " 3_6?");
	                zip_SEND_CODE(zip_REP_3_6, zip_bl_tree);
	                zip_send_bits(count - 3, 2);
	            } else if (count <= 10) {
	                zip_SEND_CODE(zip_REPZ_3_10, zip_bl_tree);
	                zip_send_bits(count - 3, 3);
	            } else {
	                zip_SEND_CODE(zip_REPZ_11_138, zip_bl_tree);
	                zip_send_bits(count - 11, 7);
	            }
	            count = 0;
	            prevlen = curlen;
	            if (nextlen == 0) {
	                max_count = 138;
	                min_count = 3;
	            } else if (curlen == nextlen) {
	                max_count = 6;
	                min_count = 3;
	            } else {
	                max_count = 7;
	                min_count = 4;
	            }
	        }
	    };

	    /* ==========================================================================
	     * Construct the Huffman tree for the bit lengths and return the index in
	     * bl_order of the last bit length code to send.
	     */
	    var zip_build_bl_tree = function () {
	        var max_blindex;  // index of last bit length code of non zero freq

	        // Determine the bit length frequencies for literal and distance trees
	        zip_scan_tree(zip_dyn_ltree, zip_l_desc.max_code);
	        zip_scan_tree(zip_dyn_dtree, zip_d_desc.max_code);

	        // Build the bit length tree:
	        zip_build_tree(zip_bl_desc);
	        /* opt_len now includes the length of the tree representations, except
	         * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	         */

	        /* Determine the number of bit length codes to send. The pkzip format
	         * requires that at least 4 bit length codes be sent. (appnote.txt says
	         * 3 but the actual value used is 4.)
	         */
	        for (max_blindex = zip_BL_CODES - 1; max_blindex >= 3; max_blindex--) {
	            if (zip_bl_tree[zip_bl_order[max_blindex]].dl != 0) break;
	        }
	        /* Update opt_len to include the bit length tree and counts */
	        zip_opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	        return max_blindex;
	    };

	    /* ==========================================================================
	     * Send the header for a block using dynamic Huffman trees: the counts, the
	     * lengths of the bit length codes, the literal tree and the distance tree.
	     * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	     */
	    var zip_send_all_trees = function (lcodes, dcodes, blcodes) { // number of codes for each tree
	        var rank; // index in bl_order
	        zip_send_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt
	        zip_send_bits(dcodes - 1, 5);
	        zip_send_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt
	        for (rank = 0; rank < blcodes; rank++) {
	            zip_send_bits(zip_bl_tree[zip_bl_order[rank]].dl, 3);
	        }

	        // send the literal tree
	        zip_send_tree(zip_dyn_ltree, lcodes - 1);

	        // send the distance tree
	        zip_send_tree(zip_dyn_dtree, dcodes - 1);
	    };

	    /* ==========================================================================
	     * Determine the best encoding for the current block: dynamic trees, static
	     * trees or store, and output the encoded block to the zip file.
	     */
	    var zip_flush_block = function (eof) { // true if this is the last block for a file
	        var opt_lenb, static_lenb; // opt_len and static_len in bytes
	        var max_blindex;	// index of last bit length code of non zero freq
	        var stored_len;	// length of input block

	        stored_len = zip_strstart - zip_block_start;
	        zip_flag_buf[zip_last_flags] = zip_flags; // Save the flags for the last 8 items

	        // Construct the literal and distance trees
	        zip_build_tree(zip_l_desc);
	        zip_build_tree(zip_d_desc);
	        /* At this point, opt_len and static_len are the total bit lengths of
	         * the compressed block data, excluding the tree representations.
	         */

	        /* Build the bit length tree for the above two trees, and get the index
	         * in bl_order of the last bit length code to send.
	         */
	        max_blindex = zip_build_bl_tree();

	        // Determine the best encoding. Compute first the block length in bytes
	        opt_lenb = (zip_opt_len + 3 + 7) >> 3;
	        static_lenb = (zip_static_len + 3 + 7) >> 3;
	        if (static_lenb <= opt_lenb)
	            opt_lenb = static_lenb;
	        if (stored_len + 4 <= opt_lenb // 4: two words for the lengths
	            && zip_block_start >= 0) {
	            var i;

	            /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	             * Otherwise we can't have processed more than WSIZE input bytes since
	             * the last block flush, because compression would have been
	             * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	             * transform a block into a stored block.
	             */
	            zip_send_bits((zip_STORED_BLOCK << 1) + eof, 3);
	            /* send block type */
	            zip_bi_windup();
	            /* align on byte boundary */
	            zip_put_short(stored_len);
	            zip_put_short(~stored_len);

	            // copy block
	            for (i = 0; i < stored_len; i++)
	                zip_put_byte(zip_window[zip_block_start + i]);

	        } else if (static_lenb == opt_lenb) {
	            zip_send_bits((zip_STATIC_TREES << 1) + eof, 3);
	            zip_compress_block(zip_static_ltree, zip_static_dtree);
	        } else {
	            zip_send_bits((zip_DYN_TREES << 1) + eof, 3);
	            zip_send_all_trees(zip_l_desc.max_code + 1,
	                zip_d_desc.max_code + 1,
	                max_blindex + 1);
	            zip_compress_block(zip_dyn_ltree, zip_dyn_dtree);
	        }

	        zip_init_block();

	        if (eof != 0)
	            zip_bi_windup();
	    };

	    /* ==========================================================================
	     * Save the match info and tally the frequency counts. Return true if
	     * the current block must be flushed.
	     */
	    var zip_ct_tally = function (dist, // distance of matched string
	                                 lc) { // match length-MIN_MATCH or unmatched char (if dist==0)
	        zip_l_buf[zip_last_lit++] = lc;
	        if (dist == 0) {
	            // lc is the unmatched char
	            zip_dyn_ltree[lc].fc++;
	        } else {
	            // Here, lc is the match length - MIN_MATCH
	            dist--;		    // dist = match distance - 1
	            zip_dyn_ltree[zip_length_code[lc] + zip_LITERALS + 1].fc++;
	            zip_dyn_dtree[zip_D_CODE(dist)].fc++;

	            zip_d_buf[zip_last_dist++] = dist;
	            zip_flags |= zip_flag_bit;
	        }
	        zip_flag_bit <<= 1;

	        // Output the flags if they fill a byte
	        if ((zip_last_lit & 7) == 0) {
	            zip_flag_buf[zip_last_flags++] = zip_flags;
	            zip_flags = 0;
	            zip_flag_bit = 1;
	        }
	        // Try to guess if it is profitable to stop the current block here
	        if (zip_compr_level > 2 && (zip_last_lit & 0xfff) == 0) {
	            // Compute an upper bound for the compressed length
	            var out_length = zip_last_lit * 8;
	            var in_length = zip_strstart - zip_block_start;
	            var dcode;

	            for (dcode = 0; dcode < zip_D_CODES; dcode++) {
	                out_length += zip_dyn_dtree[dcode].fc * (5 + zip_extra_dbits[dcode]);
	            }
	            out_length >>= 3;
	            if (zip_last_dist < parseInt(zip_last_lit / 2) &&
	                out_length < parseInt(in_length / 2))
	                return true;
	        }
	        return (zip_last_lit == LIT_BUFSIZE - 1 ||
	            zip_last_dist == zip_DIST_BUFSIZE);
	        /* We avoid equality with LIT_BUFSIZE because of wraparound at 64K
	         * on 16 bit machines and because stored blocks are restricted to
	         * 64K-1 bytes.
	         */
	    };

	    /* ==========================================================================
	     * Send the block data compressed using the given Huffman trees
	     */
	    var zip_compress_block = function (ltree,	// literal tree
	                                       dtree) {	// distance tree
	        var dist;		// distance of matched string
	        var lc;		// match length or unmatched char (if dist == 0)
	        var lx = 0;		// running index in l_buf
	        var dx = 0;		// running index in d_buf
	        var fx = 0;		// running index in flag_buf
	        var flag = 0;	// current flags
	        var code;		// the code to send
	        var extra;		// number of extra bits to send

	        if (zip_last_lit != 0) do {
	            if ((lx & 7) == 0)
	                flag = zip_flag_buf[fx++];
	            lc = zip_l_buf[lx++] & 0xff;
	            if ((flag & 1) == 0) {
	                zip_SEND_CODE(lc, ltree);
	                /* send a literal byte */
	            } else {
	                // Here, lc is the match length - MIN_MATCH
	                code = zip_length_code[lc];
	                zip_SEND_CODE(code + zip_LITERALS + 1, ltree); // send the length code
	                extra = zip_extra_lbits[code];
	                if (extra != 0) {
	                    lc -= zip_base_length[code];
	                    zip_send_bits(lc, extra); // send the extra length bits
	                }
	                dist = zip_d_buf[dx++];
	                // Here, dist is the match distance - 1
	                code = zip_D_CODE(dist);
	                zip_SEND_CODE(code, dtree);	  // send the distance code
	                extra = zip_extra_dbits[code];
	                if (extra != 0) {
	                    dist -= zip_base_dist[code];
	                    zip_send_bits(dist, extra);   // send the extra distance bits
	                }
	            } // literal or match pair ?
	            flag >>= 1;
	        } while (lx < zip_last_lit);

	        zip_SEND_CODE(zip_END_BLOCK, ltree);
	    };

	    /* ==========================================================================
	     * Send a value on a given number of bits.
	     * IN assertion: length <= 16 and value fits in length bits.
	     */
	    var zip_Buf_size = 16; // bit size of bi_buf
	    var zip_send_bits = function (value,	// value to send
	                                  length) {	// number of bits
	        /* If not enough room in bi_buf, use (valid) bits from bi_buf and
	         * (16 - bi_valid) bits from value, leaving (width - (16-bi_valid))
	         * unused bits in value.
	         */
	        if (zip_bi_valid > zip_Buf_size - length) {
	            zip_bi_buf |= (value << zip_bi_valid);
	            zip_put_short(zip_bi_buf);
	            zip_bi_buf = (value >> (zip_Buf_size - zip_bi_valid));
	            zip_bi_valid += length - zip_Buf_size;
	        } else {
	            zip_bi_buf |= value << zip_bi_valid;
	            zip_bi_valid += length;
	        }
	    };

	    /* ==========================================================================
	     * Reverse the first len bits of a code, using straightforward code (a faster
	     * method would use a table)
	     * IN assertion: 1 <= len <= 15
	     */
	    var zip_bi_reverse = function (code,	// the value to invert
	                                   len) {	// its bit length
	        var res = 0;
	        do {
	            res |= code & 1;
	            code >>= 1;
	            res <<= 1;
	        } while (--len > 0);
	        return res >> 1;
	    };

	    /* ==========================================================================
	     * Write out any remaining bits in an incomplete byte.
	     */
	    var zip_bi_windup = function () {
	        if (zip_bi_valid > 8) {
	            zip_put_short(zip_bi_buf);
	        } else if (zip_bi_valid > 0) {
	            zip_put_byte(zip_bi_buf);
	        }
	        zip_bi_buf = 0;
	        zip_bi_valid = 0;
	    };

	    var zip_qoutbuf = function () {
	        if (zip_outcnt != 0) {
	            var q, i;
	            q = zip_new_queue();
	            if (zip_qhead == null)
	                zip_qhead = zip_qtail = q;
	            else
	                zip_qtail = zip_qtail.next = q;
	            q.len = zip_outcnt - zip_outoff;
	            for (i = 0; i < q.len; i++)
	                q.ptr[i] = zip_outbuf[zip_outoff + i];
	            zip_outcnt = zip_outoff = 0;
	        }
	    };

	    function deflate(buffData, level) {
	        zip_deflate_data = buffData;
	        zip_deflate_pos = 0;
	        zip_deflate_start(level);

	        var buff = new Array(1024),
	            pages = [],
	            totalSize = 0,
	            i;

	        for (i = 0; i < 1024; i++) buff[i] = 0;
	        while ((i = zip_deflate_internal(buff, 0, buff.length)) > 0) {
	            var buf = new Buffer(buff.slice(0, i));
	            pages.push(buf);
	            totalSize += buf.length;
	        }

	        if (pages.length == 1) {
	            return pages[0];
	        }

	        var result = new Buffer(totalSize),
	            index = 0;

	        for (i = 0; i < pages.length; i++) {
	            pages[i].copy(result, index);
	            index = index + pages[i].length
	        }

	        return result;
	    }

	    return {
	        deflate: function () {
	            return deflate(inbuf, 8);
	        }
	    }
	}

	module.exports = function (/*Buffer*/inbuf) {

	    var zlib = __webpack_require__(135);

	    return {
	        deflate: function () {
	            return new JSDeflater(inbuf).deflate();
	        },

	        deflateAsync: function (/*Function*/callback) {
	            var tmp = zlib.createDeflateRaw({chunkSize:(parseInt(inbuf.length / 1024) + 1)*1024}),
	                parts = [], total = 0;
	            tmp.on('data', function(data) {
	                parts.push(data);
	                total += data.length;
	            });
	            tmp.on('end', function() {
	                var buf = new Buffer(total), written = 0;
	                buf.fill(0);

	                for (var i = 0; i < parts.length; i++) {
	                    var part = parts[i];
	                    part.copy(buf, written);
	                    written += part.length;
	                }
	                callback && callback(buf);
	            });
	            tmp.end(inbuf);
	        }
	    }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Transform = __webpack_require__(45);

	var binding = __webpack_require__(136);
	var util = __webpack_require__(12);
	var assert = __webpack_require__(11).ok;

	// zlib doesn't provide these, so kludge them in following the same
	// const naming scheme zlib uses.
	binding.Z_MIN_WINDOWBITS = 8;
	binding.Z_MAX_WINDOWBITS = 15;
	binding.Z_DEFAULT_WINDOWBITS = 15;

	// fewer than 64 bytes per chunk is stupid.
	// technically it could work with as few as 8, but even 64 bytes
	// is absurdly low.  Usually a MB or more is best.
	binding.Z_MIN_CHUNK = 64;
	binding.Z_MAX_CHUNK = Infinity;
	binding.Z_DEFAULT_CHUNK = (16 * 1024);

	binding.Z_MIN_MEMLEVEL = 1;
	binding.Z_MAX_MEMLEVEL = 9;
	binding.Z_DEFAULT_MEMLEVEL = 8;

	binding.Z_MIN_LEVEL = -1;
	binding.Z_MAX_LEVEL = 9;
	binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

	// expose all the zlib constants
	Object.keys(binding).forEach(function(k) {
	  if (k.match(/^Z/)) exports[k] = binding[k];
	});

	// translation table for return codes.
	exports.codes = {
	  Z_OK: binding.Z_OK,
	  Z_STREAM_END: binding.Z_STREAM_END,
	  Z_NEED_DICT: binding.Z_NEED_DICT,
	  Z_ERRNO: binding.Z_ERRNO,
	  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
	  Z_DATA_ERROR: binding.Z_DATA_ERROR,
	  Z_MEM_ERROR: binding.Z_MEM_ERROR,
	  Z_BUF_ERROR: binding.Z_BUF_ERROR,
	  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
	};

	Object.keys(exports.codes).forEach(function(k) {
	  exports.codes[exports.codes[k]] = k;
	});

	exports.Deflate = Deflate;
	exports.Inflate = Inflate;
	exports.Gzip = Gzip;
	exports.Gunzip = Gunzip;
	exports.DeflateRaw = DeflateRaw;
	exports.InflateRaw = InflateRaw;
	exports.Unzip = Unzip;

	exports.createDeflate = function(o) {
	  return new Deflate(o);
	};

	exports.createInflate = function(o) {
	  return new Inflate(o);
	};

	exports.createDeflateRaw = function(o) {
	  return new DeflateRaw(o);
	};

	exports.createInflateRaw = function(o) {
	  return new InflateRaw(o);
	};

	exports.createGzip = function(o) {
	  return new Gzip(o);
	};

	exports.createGunzip = function(o) {
	  return new Gunzip(o);
	};

	exports.createUnzip = function(o) {
	  return new Unzip(o);
	};


	// Convenience methods.
	// compress/decompress a string or buffer in one step.
	exports.deflate = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Deflate(opts), buffer, callback);
	};

	exports.deflateSync = function(buffer, opts) {
	  return zlibBufferSync(new Deflate(opts), buffer);
	};

	exports.gzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gzip(opts), buffer, callback);
	};

	exports.gzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Gzip(opts), buffer);
	};

	exports.deflateRaw = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
	};

	exports.deflateRawSync = function(buffer, opts) {
	  return zlibBufferSync(new DeflateRaw(opts), buffer);
	};

	exports.unzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Unzip(opts), buffer, callback);
	};

	exports.unzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Unzip(opts), buffer);
	};

	exports.inflate = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Inflate(opts), buffer, callback);
	};

	exports.inflateSync = function(buffer, opts) {
	  return zlibBufferSync(new Inflate(opts), buffer);
	};

	exports.gunzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gunzip(opts), buffer, callback);
	};

	exports.gunzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Gunzip(opts), buffer);
	};

	exports.inflateRaw = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new InflateRaw(opts), buffer, callback);
	};

	exports.inflateRawSync = function(buffer, opts) {
	  return zlibBufferSync(new InflateRaw(opts), buffer);
	};

	function zlibBuffer(engine, buffer, callback) {
	  var buffers = [];
	  var nread = 0;

	  engine.on('error', onError);
	  engine.on('end', onEnd);

	  engine.end(buffer);
	  flow();

	  function flow() {
	    var chunk;
	    while (null !== (chunk = engine.read())) {
	      buffers.push(chunk);
	      nread += chunk.length;
	    }
	    engine.once('readable', flow);
	  }

	  function onError(err) {
	    engine.removeListener('end', onEnd);
	    engine.removeListener('readable', flow);
	    callback(err);
	  }

	  function onEnd() {
	    var buf = Buffer.concat(buffers, nread);
	    buffers = [];
	    callback(null, buf);
	    engine.close();
	  }
	}

	function zlibBufferSync(engine, buffer) {
	  if (typeof buffer === 'string')
	    buffer = new Buffer(buffer);
	  if (!Buffer.isBuffer(buffer))
	    throw new TypeError('Not a string or buffer');

	  var flushFlag = binding.Z_FINISH;

	  return engine._processChunk(buffer, flushFlag);
	}

	// generic zlib
	// minimal 2-byte header
	function Deflate(opts) {
	  if (!(this instanceof Deflate)) return new Deflate(opts);
	  Zlib.call(this, opts, binding.DEFLATE);
	}

	function Inflate(opts) {
	  if (!(this instanceof Inflate)) return new Inflate(opts);
	  Zlib.call(this, opts, binding.INFLATE);
	}



	// gzip - bigger header, same deflate compression
	function Gzip(opts) {
	  if (!(this instanceof Gzip)) return new Gzip(opts);
	  Zlib.call(this, opts, binding.GZIP);
	}

	function Gunzip(opts) {
	  if (!(this instanceof Gunzip)) return new Gunzip(opts);
	  Zlib.call(this, opts, binding.GUNZIP);
	}



	// raw - no header
	function DeflateRaw(opts) {
	  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
	  Zlib.call(this, opts, binding.DEFLATERAW);
	}

	function InflateRaw(opts) {
	  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
	  Zlib.call(this, opts, binding.INFLATERAW);
	}


	// auto-detect header.
	function Unzip(opts) {
	  if (!(this instanceof Unzip)) return new Unzip(opts);
	  Zlib.call(this, opts, binding.UNZIP);
	}


	// the Zlib class they all inherit from
	// This thing manages the queue of requests, and returns
	// true or false if there is anything in the queue when
	// you call the .write() method.

	function Zlib(opts, mode) {
	  this._opts = opts = opts || {};
	  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

	  Transform.call(this, opts);

	  if (opts.flush) {
	    if (opts.flush !== binding.Z_NO_FLUSH &&
	        opts.flush !== binding.Z_PARTIAL_FLUSH &&
	        opts.flush !== binding.Z_SYNC_FLUSH &&
	        opts.flush !== binding.Z_FULL_FLUSH &&
	        opts.flush !== binding.Z_FINISH &&
	        opts.flush !== binding.Z_BLOCK) {
	      throw new Error('Invalid flush flag: ' + opts.flush);
	    }
	  }
	  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

	  if (opts.chunkSize) {
	    if (opts.chunkSize < exports.Z_MIN_CHUNK ||
	        opts.chunkSize > exports.Z_MAX_CHUNK) {
	      throw new Error('Invalid chunk size: ' + opts.chunkSize);
	    }
	  }

	  if (opts.windowBits) {
	    if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||
	        opts.windowBits > exports.Z_MAX_WINDOWBITS) {
	      throw new Error('Invalid windowBits: ' + opts.windowBits);
	    }
	  }

	  if (opts.level) {
	    if (opts.level < exports.Z_MIN_LEVEL ||
	        opts.level > exports.Z_MAX_LEVEL) {
	      throw new Error('Invalid compression level: ' + opts.level);
	    }
	  }

	  if (opts.memLevel) {
	    if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||
	        opts.memLevel > exports.Z_MAX_MEMLEVEL) {
	      throw new Error('Invalid memLevel: ' + opts.memLevel);
	    }
	  }

	  if (opts.strategy) {
	    if (opts.strategy != exports.Z_FILTERED &&
	        opts.strategy != exports.Z_HUFFMAN_ONLY &&
	        opts.strategy != exports.Z_RLE &&
	        opts.strategy != exports.Z_FIXED &&
	        opts.strategy != exports.Z_DEFAULT_STRATEGY) {
	      throw new Error('Invalid strategy: ' + opts.strategy);
	    }
	  }

	  if (opts.dictionary) {
	    if (!Buffer.isBuffer(opts.dictionary)) {
	      throw new Error('Invalid dictionary: it should be a Buffer instance');
	    }
	  }

	  this._binding = new binding.Zlib(mode);

	  var self = this;
	  this._hadError = false;
	  this._binding.onerror = function(message, errno) {
	    // there is no way to cleanly recover.
	    // continuing only obscures problems.
	    self._binding = null;
	    self._hadError = true;

	    var error = new Error(message);
	    error.errno = errno;
	    error.code = exports.codes[errno];
	    self.emit('error', error);
	  };

	  var level = exports.Z_DEFAULT_COMPRESSION;
	  if (typeof opts.level === 'number') level = opts.level;

	  var strategy = exports.Z_DEFAULT_STRATEGY;
	  if (typeof opts.strategy === 'number') strategy = opts.strategy;

	  this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
	                     level,
	                     opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
	                     strategy,
	                     opts.dictionary);

	  this._buffer = new Buffer(this._chunkSize);
	  this._offset = 0;
	  this._closed = false;
	  this._level = level;
	  this._strategy = strategy;

	  this.once('end', this.close);
	}

	util.inherits(Zlib, Transform);

	Zlib.prototype.params = function(level, strategy, callback) {
	  if (level < exports.Z_MIN_LEVEL ||
	      level > exports.Z_MAX_LEVEL) {
	    throw new RangeError('Invalid compression level: ' + level);
	  }
	  if (strategy != exports.Z_FILTERED &&
	      strategy != exports.Z_HUFFMAN_ONLY &&
	      strategy != exports.Z_RLE &&
	      strategy != exports.Z_FIXED &&
	      strategy != exports.Z_DEFAULT_STRATEGY) {
	    throw new TypeError('Invalid strategy: ' + strategy);
	  }

	  if (this._level !== level || this._strategy !== strategy) {
	    var self = this;
	    this.flush(binding.Z_SYNC_FLUSH, function() {
	      self._binding.params(level, strategy);
	      if (!self._hadError) {
	        self._level = level;
	        self._strategy = strategy;
	        if (callback) callback();
	      }
	    });
	  } else {
	    process.nextTick(callback);
	  }
	};

	Zlib.prototype.reset = function() {
	  return this._binding.reset();
	};

	// This is the _flush function called by the transform class,
	// internally, when the last chunk has been written.
	Zlib.prototype._flush = function(callback) {
	  this._transform(new Buffer(0), '', callback);
	};

	Zlib.prototype.flush = function(kind, callback) {
	  var ws = this._writableState;

	  if (typeof kind === 'function' || (kind === void 0 && !callback)) {
	    callback = kind;
	    kind = binding.Z_FULL_FLUSH;
	  }

	  if (ws.ended) {
	    if (callback)
	      process.nextTick(callback);
	  } else if (ws.ending) {
	    if (callback)
	      this.once('end', callback);
	  } else if (ws.needDrain) {
	    var self = this;
	    this.once('drain', function() {
	      self.flush(callback);
	    });
	  } else {
	    this._flushFlag = kind;
	    this.write(new Buffer(0), '', callback);
	  }
	};

	Zlib.prototype.close = function(callback) {
	  if (callback)
	    process.nextTick(callback);

	  if (this._closed)
	    return;

	  this._closed = true;

	  this._binding.close();

	  var self = this;
	  process.nextTick(function() {
	    self.emit('close');
	  });
	};

	Zlib.prototype._transform = function(chunk, encoding, cb) {
	  var flushFlag;
	  var ws = this._writableState;
	  var ending = ws.ending || ws.ended;
	  var last = ending && (!chunk || ws.length === chunk.length);

	  if (!chunk === null && !Buffer.isBuffer(chunk))
	    return cb(new Error('invalid input'));

	  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
	  // If it's explicitly flushing at some other time, then we use
	  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
	  // goodness.
	  if (last)
	    flushFlag = binding.Z_FINISH;
	  else {
	    flushFlag = this._flushFlag;
	    // once we've flushed the last of the queue, stop flushing and
	    // go back to the normal behavior.
	    if (chunk.length >= ws.length) {
	      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
	    }
	  }

	  var self = this;
	  this._processChunk(chunk, flushFlag, cb);
	};

	Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
	  var availInBefore = chunk && chunk.length;
	  var availOutBefore = this._chunkSize - this._offset;
	  var inOff = 0;

	  var self = this;

	  var async = typeof cb === 'function';

	  if (!async) {
	    var buffers = [];
	    var nread = 0;

	    var error;
	    this.on('error', function(er) {
	      error = er;
	    });

	    do {
	      var res = this._binding.writeSync(flushFlag,
	                                        chunk, // in
	                                        inOff, // in_off
	                                        availInBefore, // in_len
	                                        this._buffer, // out
	                                        this._offset, //out_off
	                                        availOutBefore); // out_len
	    } while (!this._hadError && callback(res[0], res[1]));

	    if (this._hadError) {
	      throw error;
	    }

	    var buf = Buffer.concat(buffers, nread);
	    this.close();

	    return buf;
	  }

	  var req = this._binding.write(flushFlag,
	                                chunk, // in
	                                inOff, // in_off
	                                availInBefore, // in_len
	                                this._buffer, // out
	                                this._offset, //out_off
	                                availOutBefore); // out_len

	  req.buffer = chunk;
	  req.callback = callback;

	  function callback(availInAfter, availOutAfter) {
	    if (self._hadError)
	      return;

	    var have = availOutBefore - availOutAfter;
	    assert(have >= 0, 'have should not go down');

	    if (have > 0) {
	      var out = self._buffer.slice(self._offset, self._offset + have);
	      self._offset += have;
	      // serve some output to the consumer.
	      if (async) {
	        self.push(out);
	      } else {
	        buffers.push(out);
	        nread += out.length;
	      }
	    }

	    // exhausted the output buffer, or used all the input create a new one.
	    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
	      availOutBefore = self._chunkSize;
	      self._offset = 0;
	      self._buffer = new Buffer(self._chunkSize);
	    }

	    if (availOutAfter === 0) {
	      // Not actually done.  Need to reprocess.
	      // Also, update the availInBefore to the availInAfter value,
	      // so that if we have to hit it a third (fourth, etc.) time,
	      // it'll have the correct byte counts.
	      inOff += (availInBefore - availInAfter);
	      availInBefore = availInAfter;

	      if (!async)
	        return true;

	      var newReq = self._binding.write(flushFlag,
	                                       chunk,
	                                       inOff,
	                                       availInBefore,
	                                       self._buffer,
	                                       self._offset,
	                                       self._chunkSize);
	      newReq.callback = callback; // this same function
	      newReq.buffer = chunk;
	      return;
	    }

	    if (!async)
	      return false;

	    // finished with the chunk.
	    cb();
	  }
	};

	util.inherits(Deflate, Zlib);
	util.inherits(Inflate, Zlib);
	util.inherits(Gzip, Zlib);
	util.inherits(Gunzip, Zlib);
	util.inherits(DeflateRaw, Zlib);
	util.inherits(InflateRaw, Zlib);
	util.inherits(Unzip, Zlib);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer, __webpack_require__(13)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var msg = __webpack_require__(137);
	var zstream = __webpack_require__(138);
	var zlib_deflate = __webpack_require__(139);
	var zlib_inflate = __webpack_require__(144);
	var constants = __webpack_require__(147);

	for (var key in constants) {
	  exports[key] = constants[key];
	}

	// zlib modes
	exports.NONE = 0;
	exports.DEFLATE = 1;
	exports.INFLATE = 2;
	exports.GZIP = 3;
	exports.GUNZIP = 4;
	exports.DEFLATERAW = 5;
	exports.INFLATERAW = 6;
	exports.UNZIP = 7;

	/**
	 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
	 */
	function Zlib(mode) {
	  if (mode < exports.DEFLATE || mode > exports.UNZIP)
	    throw new TypeError("Bad argument");
	    
	  this.mode = mode;
	  this.init_done = false;
	  this.write_in_progress = false;
	  this.pending_close = false;
	  this.windowBits = 0;
	  this.level = 0;
	  this.memLevel = 0;
	  this.strategy = 0;
	  this.dictionary = null;
	}

	Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
	  this.windowBits = windowBits;
	  this.level = level;
	  this.memLevel = memLevel;
	  this.strategy = strategy;
	  // dictionary not supported.
	  
	  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)
	    this.windowBits += 16;
	    
	  if (this.mode === exports.UNZIP)
	    this.windowBits += 32;
	    
	  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)
	    this.windowBits = -this.windowBits;
	    
	  this.strm = new zstream();
	  
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflateInit2(
	        this.strm,
	        this.level,
	        exports.Z_DEFLATED,
	        this.windowBits,
	        this.memLevel,
	        this.strategy
	      );
	      break;
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	    case exports.UNZIP:
	      var status  = zlib_inflate.inflateInit2(
	        this.strm,
	        this.windowBits
	      );
	      break;
	    default:
	      throw new Error("Unknown mode " + this.mode);
	  }
	  
	  if (status !== exports.Z_OK) {
	    this._error(status);
	    return;
	  }
	  
	  this.write_in_progress = false;
	  this.init_done = true;
	};

	Zlib.prototype.params = function() {
	  throw new Error("deflateParams Not supported");
	};

	Zlib.prototype._writeCheck = function() {
	  if (!this.init_done)
	    throw new Error("write before init");
	    
	  if (this.mode === exports.NONE)
	    throw new Error("already finalized");
	    
	  if (this.write_in_progress)
	    throw new Error("write already in progress");
	    
	  if (this.pending_close)
	    throw new Error("close is pending");
	};

	Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {    
	  this._writeCheck();
	  this.write_in_progress = true;
	  
	  var self = this;
	  process.nextTick(function() {
	    self.write_in_progress = false;
	    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
	    self.callback(res[0], res[1]);
	    
	    if (self.pending_close)
	      self.close();
	  });
	  
	  return this;
	};

	// set method for Node buffers, used by pako
	function bufferSet(data, offset) {
	  for (var i = 0; i < data.length; i++) {
	    this[offset + i] = data[i];
	  }
	}

	Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this._writeCheck();
	  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
	};

	Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this.write_in_progress = true;
	  
	  if (flush !== exports.Z_NO_FLUSH &&
	      flush !== exports.Z_PARTIAL_FLUSH &&
	      flush !== exports.Z_SYNC_FLUSH &&
	      flush !== exports.Z_FULL_FLUSH &&
	      flush !== exports.Z_FINISH &&
	      flush !== exports.Z_BLOCK) {
	    throw new Error("Invalid flush value");
	  }
	  
	  if (input == null) {
	    input = new Buffer(0);
	    in_len = 0;
	    in_off = 0;
	  }
	  
	  if (out._set)
	    out.set = out._set;
	  else
	    out.set = bufferSet;
	  
	  var strm = this.strm;
	  strm.avail_in = in_len;
	  strm.input = input;
	  strm.next_in = in_off;
	  strm.avail_out = out_len;
	  strm.output = out;
	  strm.next_out = out_off;
	  
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflate(strm, flush);
	      break;
	    case exports.UNZIP:
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	      var status = zlib_inflate.inflate(strm, flush);
	      break;
	    default:
	      throw new Error("Unknown mode " + this.mode);
	  }
	  
	  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
	    this._error(status);
	  }
	  
	  this.write_in_progress = false;
	  return [strm.avail_in, strm.avail_out];
	};

	Zlib.prototype.close = function() {
	  if (this.write_in_progress) {
	    this.pending_close = true;
	    return;
	  }
	  
	  this.pending_close = false;
	  
	  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
	    zlib_deflate.deflateEnd(this.strm);
	  } else {
	    zlib_inflate.inflateEnd(this.strm);
	  }
	  
	  this.mode = exports.NONE;
	};

	Zlib.prototype.reset = function() {
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflateReset(this.strm);
	      break;
	    case exports.INFLATE:
	    case exports.INFLATERAW:
	      var status = zlib_inflate.inflateReset(this.strm);
	      break;
	  }
	  
	  if (status !== exports.Z_OK) {
	    this._error(status);
	  }
	};

	Zlib.prototype._error = function(status) {
	  this.onerror(msg[status] + ': ' + this.strm.msg, status);
	  
	  this.write_in_progress = false;
	  if (this.pending_close)
	    this.close();
	};

	exports.Zlib = Zlib;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13), __webpack_require__(18).Buffer))

/***/ },
/* 137 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};


/***/ },
/* 138 */
/***/ function(module, exports) {

	'use strict';


	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}

	module.exports = ZStream;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils   = __webpack_require__(140);
	var trees   = __webpack_require__(141);
	var adler32 = __webpack_require__(142);
	var crc32   = __webpack_require__(143);
	var msg     = __webpack_require__(137);

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH      = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	//var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;


	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION = -1;


	var Z_FILTERED            = 1;
	var Z_HUFFMAN_ONLY        = 2;
	var Z_RLE                 = 3;
	var Z_FIXED               = 4;
	var Z_DEFAULT_STRATEGY    = 0;

	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;


	/* The deflate compression method */
	var Z_DEFLATED  = 8;

	/*============================================================================*/


	var MAX_MEM_LEVEL = 9;
	/* Maximum value for memLevel in deflateInit2 */
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_MEM_LEVEL = 8;


	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES       = 30;
	/* number of distance codes */
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */
	var MAX_BITS  = 15;
	/* All codes must not exceed MAX_BITS bits */

	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

	var PRESET_DICT = 0x20;

	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;

	var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE     = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

	function err(strm, errorCode) {
	  strm.msg = msg[errorCode];
	  return errorCode;
	}

	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}

	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;

	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) { return; }

	  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}


	function flush_block_only(s, last) {
	  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}


	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}


	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	//  put_byte(s, (Byte)(b >> 8));
	//  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}


	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;

	  if (len > size) { len = size; }
	  if (len === 0) { return 0; }

	  strm.avail_in -= len;

	  // zmemcpy(buf, strm->next_in, len);
	  utils.arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32(strm.adler, buf, len, start);
	  }

	  else if (strm.state.wrap === 2) {
	    strm.adler = crc32(strm.adler, buf, len, start);
	  }

	  strm.next_in += len;
	  strm.total_in += len;

	  return len;
	}


	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length;      /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match;                       /* matched string */
	  var len;                           /* length of current match */
	  var best_len = s.prev_length;              /* best match length so far */
	  var nice_match = s.nice_match;             /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

	  var _win = s.window; // shortcut

	  var wmask = s.w_mask;
	  var prev  = s.prev;

	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */

	  var strend = s.strstart + MAX_MATCH;
	  var scan_end1  = _win[scan + best_len - 1];
	  var scan_end   = _win[scan + best_len];

	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;

	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */

	    if (_win[match + best_len]     !== scan_end  ||
	        _win[match + best_len - 1] !== scan_end1 ||
	        _win[match]                !== _win[scan] ||
	        _win[++match]              !== _win[scan + 1]) {
	      continue;
	    }

	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");

	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             scan < strend);

	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

	    len = MAX_MATCH - (strend - scan);
	    scan = strend - MAX_MATCH;

	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1  = _win[scan + best_len - 1];
	      scan_end   = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}


	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;

	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

	  do {
	    more = s.window_size - s.lookahead - s.strstart;

	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}


	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

	      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;

	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */

	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);

	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);

	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }

	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;

	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];

	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	//#if MIN_MATCH != 3
	//        Call update_hash() MIN_MATCH-3 more times
	//#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */

	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	//  if (s.high_water < s.window_size) {
	//    var curr = s.strstart + s.lookahead;
	//    var init = 0;
	//
	//    if (s.high_water < curr) {
	//      /* Previous high water mark below current data -- zero WIN_INIT
	//       * bytes or up to end of window, whichever is less.
	//       */
	//      init = s.window_size - curr;
	//      if (init > WIN_INIT)
	//        init = WIN_INIT;
	//      zmemzero(s->window + curr, (unsigned)init);
	//      s->high_water = curr + init;
	//    }
	//    else if (s->high_water < (ulg)curr + WIN_INIT) {
	//      /* High water mark at or above current data, but below current data
	//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	//       * to end of window, whichever is less.
	//       */
	//      init = (ulg)curr + WIN_INIT - s->high_water;
	//      if (init > s->window_size - s->high_water)
	//        init = s->window_size - s->high_water;
	//      zmemzero(s->window + s->high_water, (unsigned)init);
	//      s->high_water += init;
	//    }
	//  }
	//
	//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	//    "not enough room for search");
	}

	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;

	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }

	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {

	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	//        s.block_start >= s.w_size)) {
	//        throw  new Error("slide too late");
	//      }

	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }

	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	//    if (s.block_start < 0) throw new Error("block gone");

	    s.strstart += s.lookahead;
	    s.lookahead = 0;

	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;

	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/


	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }

	  s.insert = 0;

	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }

	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_NEED_MORE;
	}

	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head;        /* head of the hash chain */
	  var bflush;           /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;

	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else
	      {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

	//#if MIN_MATCH != 3
	//                Call UPDATE_HASH() MIN_MATCH-3 more times
	//#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head;          /* head of hash chain */
	  var bflush;              /* set if current block must be flushed */

	  var max_insert;

	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH - 1;

	    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
	        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */

	      if (s.match_length <= 5 &&
	         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH - 1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH;
	      /* Do not insert strings in hash table beyond this. */

	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length - 1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH - 1;
	      s.strstart++;

	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }

	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_BLOCK_DONE;
	}


	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush;            /* set if current block must be flushed */
	  var prev;              /* byte at distance one to match */
	  var scan, strend;      /* scan goes up to strend for length of run */

	  var _win = s.window;

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 scan < strend);
	        s.match_length = MAX_MATCH - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }

	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush;             /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH) {
	          return BS_NEED_MORE;
	        }
	        break;      /* flush the current block */
	      }
	    }

	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	function Config(good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	}

	var configuration_table;

	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

	  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
	];


	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;

	  /*** CLEAR_HASH(s); ***/
	  zero(s.head); // Fill with NIL (= 0);

	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;

	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}


	function DeflateState() {
	  this.strm = null;            /* pointer back to this zlib stream */
	  this.status = 0;            /* as the name implies */
	  this.pending_buf = null;      /* output still pending */
	  this.pending_buf_size = 0;  /* size of pending_buf */
	  this.pending_out = 0;       /* next pending byte to output to the stream */
	  this.pending = 0;           /* nb of bytes in the pending buffer */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null;         /* gzip header information to write */
	  this.gzindex = 0;           /* where in extra, name, or comment */
	  this.method = Z_DEFLATED; /* can only be DEFLATED */
	  this.last_flush = -1;   /* value of flush param for previous deflate call */

	  this.w_size = 0;  /* LZ77 window size (32K by default) */
	  this.w_bits = 0;  /* log2(w_size)  (8..16) */
	  this.w_mask = 0;  /* w_size - 1 */

	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */

	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */

	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */

	  this.head = null;   /* Heads of the hash chains or NIL. */

	  this.ins_h = 0;       /* hash index of string to be inserted */
	  this.hash_size = 0;   /* number of elements in hash table */
	  this.hash_bits = 0;   /* log2(hash_size) */
	  this.hash_mask = 0;   /* hash_size-1 */

	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */

	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */

	  this.match_length = 0;      /* length of best match */
	  this.prev_match = 0;        /* previous match */
	  this.match_available = 0;   /* set if previous match exists */
	  this.strstart = 0;          /* start of string to insert */
	  this.match_start = 0;       /* start of matching string */
	  this.lookahead = 0;         /* number of valid bytes ahead in window */

	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */

	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */

	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */

	  this.level = 0;     /* compression level (1..9) */
	  this.strategy = 0;  /* favor or force Huffman coding*/

	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */

	  this.nice_match = 0; /* Stop searching when current match exceeds this */

	              /* used by trees.c: */

	  /* Didn't use ct_data typedef below to suppress compiler warning */

	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
	  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
	  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
	  zero(this.dyn_ltree);
	  zero(this.dyn_dtree);
	  zero(this.bl_tree);

	  this.l_desc   = null;         /* desc. for literal tree */
	  this.d_desc   = null;         /* desc. for distance tree */
	  this.bl_desc  = null;         /* desc. for bit length tree */

	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new utils.Buf16(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */

	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
	  zero(this.heap);

	  this.heap_len = 0;               /* number of elements in the heap */
	  this.heap_max = 0;               /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */

	  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
	  zero(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */

	  this.l_buf = 0;          /* buffer index for literals or lengths */

	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */

	  this.last_lit = 0;      /* running index in l_buf */

	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */

	  this.opt_len = 0;       /* bit length of current block with optimal trees */
	  this.static_len = 0;    /* bit length of current block with static trees */
	  this.matches = 0;       /* number of string matches in current block */
	  this.insert = 0;        /* bytes at end of window left to insert */


	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */

	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}


	function deflateResetKeep(strm) {
	  var s;

	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN;

	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;

	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0  // crc32(0, Z_NULL, 0)
	  :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH;
	  trees._tr_init(s);
	  return Z_OK;
	}


	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK) {
	    lm_init(strm.state);
	  }
	  return ret;
	}


	function deflateSetHeader(strm, head) {
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
	  strm.state.gzhead = head;
	  return Z_OK;
	}


	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR;
	  }
	  var wrap = 1;

	  if (level === Z_DEFAULT_COMPRESSION) {
	    level = 6;
	  }

	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  }

	  else if (windowBits > 15) {
	    wrap = 2;           /* write gzip wrapper instead */
	    windowBits -= 16;
	  }


	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED) {
	    return err(strm, Z_STREAM_ERROR);
	  }


	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */

	  var s = new DeflateState();

	  strm.state = s;
	  s.strm = strm;

	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;

	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

	  s.window = new utils.Buf8(s.w_size * 2);
	  s.head = new utils.Buf16(s.hash_size);
	  s.prev = new utils.Buf16(s.w_size);

	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */

	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	  s.pending_buf_size = s.lit_bufsize * 4;

	  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
	  //s->pending_buf = (uchf *) overlay;
	  s.pending_buf = new utils.Buf8(s.pending_buf_size);

	  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
	  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
	  s.d_buf = 1 * s.lit_bufsize;

	  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
	  s.l_buf = (1 + 2) * s.lit_bufsize;

	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;

	  return deflateReset(strm);
	}

	function deflateInit(strm, level) {
	  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
	}


	function deflate(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only

	  if (!strm || !strm.state ||
	    flush > Z_BLOCK || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	  }

	  s = strm.state;

	  if (!strm.output ||
	      (!strm.input && strm.avail_in !== 0) ||
	      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
	  }

	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;

	  /* Write the header */
	  if (s.status === INIT_STATE) {

	    if (s.wrap === 2) { // GZIP header
	      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      }
	      else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	                    (s.gzhead.hcrc ? 2 : 0) +
	                    (!s.gzhead.extra ? 0 : 4) +
	                    (!s.gzhead.name ? 0 : 8) +
	                    (!s.gzhead.comment ? 0 : 16)
	                );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    }
	    else // DEFLATE header
	    {
	      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;

	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) { header |= PRESET_DICT; }
	      header += 31 - (header % 31);

	      s.status = BUSY_STATE;
	      putShortMSB(s, header);

	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }

	//#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */

	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    }
	    else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    }
	    else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    }
	    else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    }
	    else {
	      s.status = BUSY_STATE;
	    }
	  }
	//#endif

	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK;
	    }

	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));

	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        trees._tr_align(s);
	      }
	      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	        trees._tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/             /* forget history */
	          zero(s.head); // Fill with NIL (= 0);

	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}

	  if (flush !== Z_FINISH) { return Z_OK; }
	  if (s.wrap <= 0) { return Z_STREAM_END; }

	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  }
	  else
	  {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }

	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) { s.wrap = -s.wrap; }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	}

	function deflateEnd(strm) {
	  var status;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }

	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.state = null;

	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	}


	/* =========================================================================
	 * Initializes the compression dictionary from the given byte
	 * sequence without producing any compressed output.
	 */
	function deflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var s;
	  var str, n;
	  var wrap;
	  var avail;
	  var next;
	  var input;
	  var tmpDict;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }

	  s = strm.state;
	  wrap = s.wrap;

	  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
	    return Z_STREAM_ERROR;
	  }

	  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
	  if (wrap === 1) {
	    /* adler32(strm->adler, dictionary, dictLength); */
	    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
	  }

	  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

	  /* if dictionary would fill window, just replace the history */
	  if (dictLength >= s.w_size) {
	    if (wrap === 0) {            /* already empty otherwise */
	      /*** CLEAR_HASH(s); ***/
	      zero(s.head); // Fill with NIL (= 0);
	      s.strstart = 0;
	      s.block_start = 0;
	      s.insert = 0;
	    }
	    /* use the tail */
	    // dictionary = dictionary.slice(dictLength - s.w_size);
	    tmpDict = new utils.Buf8(s.w_size);
	    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
	    dictionary = tmpDict;
	    dictLength = s.w_size;
	  }
	  /* insert dictionary into window and hash */
	  avail = strm.avail_in;
	  next = strm.next_in;
	  input = strm.input;
	  strm.avail_in = dictLength;
	  strm.next_in = 0;
	  strm.input = dictionary;
	  fill_window(s);
	  while (s.lookahead >= MIN_MATCH) {
	    str = s.strstart;
	    n = s.lookahead - (MIN_MATCH - 1);
	    do {
	      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	      s.prev[str & s.w_mask] = s.head[s.ins_h];

	      s.head[s.ins_h] = str;
	      str++;
	    } while (--n);
	    s.strstart = str;
	    s.lookahead = MIN_MATCH - 1;
	    fill_window(s);
	  }
	  s.strstart += s.lookahead;
	  s.block_start = s.strstart;
	  s.insert = s.lookahead;
	  s.lookahead = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  strm.next_in = next;
	  strm.input = input;
	  strm.avail_in = avail;
	  s.wrap = wrap;
	  return Z_OK;
	}


	exports.deflateInit = deflateInit;
	exports.deflateInit2 = deflateInit2;
	exports.deflateReset = deflateReset;
	exports.deflateResetKeep = deflateResetKeep;
	exports.deflateSetHeader = deflateSetHeader;
	exports.deflate = deflate;
	exports.deflateEnd = deflateEnd;
	exports.deflateSetDictionary = deflateSetDictionary;
	exports.deflateInfo = 'pako deflate (from Nodeca project)';

	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/


/***/ },
/* 140 */
/***/ function(module, exports) {

	'use strict';


	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');


	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }

	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }

	    for (var p in source) {
	      if (source.hasOwnProperty(p)) {
	        obj[p] = source[p];
	      }
	    }
	  }

	  return obj;
	};


	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};


	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    var i, l, len, pos, chunk, result;

	    // calculate data length
	    len = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      len += chunks[i].length;
	    }

	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }

	    return result;
	  }
	};

	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    return [].concat.apply([], chunks);
	  }
	};


	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};

	exports.setTyped(TYPED_OK);


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var utils = __webpack_require__(140);

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED               = 4;
	//var Z_DEFAULT_STRATEGY  = 0;

	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY              = 0;
	var Z_TEXT                = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;

	/*============================================================================*/


	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

	// From zutil.h

	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES    = 2;
	/* The three kinds of block type */

	var MIN_MATCH    = 3;
	var MAX_MATCH    = 258;
	/* The minimum and maximum match lengths */

	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */

	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */

	var LITERALS      = 256;
	/* number of literal bytes 0..255 */

	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */

	var D_CODES       = 30;
	/* number of distance codes */

	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */

	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */

	var MAX_BITS      = 15;
	/* All codes must not exceed MAX_BITS bits */

	var Buf_size      = 16;
	/* size of bit buffer in bi_buf */


	/* ===========================================================================
	 * Constants
	 */

	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */

	var END_BLOCK   = 256;
	/* end of block literal code */

	var REP_3_6     = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */

	var REPZ_3_10   = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */

	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */

	/* eslint-disable comma-spacing,array-bracket-spacing */
	var extra_lbits =   /* extra bits for each length code */
	  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

	var extra_dbits =   /* extra bits for each distance code */
	  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

	var extra_blbits =  /* extra bits for each bit length code */
	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

	var bl_order =
	  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
	/* eslint-enable comma-spacing,array-bracket-spacing */

	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */

	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */

	// We pre-fill arrays with 0 to avoid uninitialized gaps

	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

	// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
	var static_ltree  = new Array((L_CODES + 2) * 2);
	zero(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */

	var static_dtree  = new Array(D_CODES * 2);
	zero(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */

	var _dist_code    = new Array(DIST_CODE_LEN);
	zero(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */

	var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
	zero(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */

	var base_length   = new Array(LENGTH_CODES);
	zero(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */

	var base_dist     = new Array(D_CODES);
	zero(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */


	function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

	  this.static_tree  = static_tree;  /* static tree or NULL */
	  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
	  this.extra_base   = extra_base;   /* base index for extra_bits */
	  this.elems        = elems;        /* max number of elements in the tree */
	  this.max_length   = max_length;   /* max bit length for the codes */

	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree    = static_tree && static_tree.length;
	}


	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;


	function TreeDesc(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree;     /* the dynamic tree */
	  this.max_code = 0;            /* largest code with non zero frequency */
	  this.stat_desc = stat_desc;   /* the corresponding static tree */
	}



	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}


	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short(s, w) {
	//    put_byte(s, (uch)((w) & 0xff));
	//    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}


	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}


	function send_code(s, c, tree) {
	  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
	}


	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}


	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;

	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}


	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	{
	  var tree            = desc.dyn_tree;
	  var max_code        = desc.max_code;
	  var stree           = desc.stat_desc.static_tree;
	  var has_stree       = desc.stat_desc.has_stree;
	  var extra           = desc.stat_desc.extra_bits;
	  var base            = desc.stat_desc.extra_base;
	  var max_length      = desc.stat_desc.max_length;
	  var h;              /* heap index */
	  var n, m;           /* iterate over the tree elements */
	  var bits;           /* bit length */
	  var xbits;          /* extra bits */
	  var f;              /* frequency */
	  var overflow = 0;   /* number of elements with bit length too large */

	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    s.bl_count[bits] = 0;
	  }

	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

	  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n * 2 + 1]/*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */

	    if (n > max_code) { continue; } /* not a leaf node */

	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n - base];
	    }
	    f = tree[n * 2]/*.Freq*/;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) { return; }

	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */

	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length - 1;
	    while (s.bl_count[bits] === 0) { bits--; }
	    s.bl_count[bits]--;      /* move one leaf down the tree */
	    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);

	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) { continue; }
	      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
	        tree[m * 2 + 1]/*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}


	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count)
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */
	{
	  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
	  var code = 0;              /* running code value */
	  var bits;                  /* bit index */
	  var n;                     /* code index */

	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS; bits++) {
	    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

	  for (n = 0;  n <= max_code; n++) {
	    var len = tree[n * 2 + 1]/*.Len*/;
	    if (len === 0) { continue; }
	    /* Now reverse the bits */
	    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}


	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n;        /* iterates over tree elements */
	  var bits;     /* bit counter */
	  var length;   /* length value */
	  var code;     /* code value */
	  var dist;     /* distance index */
	  var bl_count = new Array(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */

	  // do check in _tr_init()
	  //if (static_init_done) return;

	  /* For some embedded targets, global variables are not initialized: */
	/*#ifdef NO_INIT_GLOBAL_POINTERS
	  static_l_desc.static_tree = static_ltree;
	  static_l_desc.extra_bits = extra_lbits;
	  static_d_desc.static_tree = static_dtree;
	  static_d_desc.extra_bits = extra_dbits;
	  static_bl_desc.extra_bits = extra_blbits;
	#endif*/

	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES - 1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1 << extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length - 1] = code;

	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1 << extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    bl_count[bits] = 0;
	  }

	  n = 0;
	  while (n <= 143) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES + 1, bl_count);

	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES; n++) {
	    static_dtree[n * 2 + 1]/*.Len*/ = 5;
	    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
	  }

	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
	  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

	  //static_init_done = true;
	}


	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */

	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

	  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}


	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s)
	{
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}

	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header)
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */
	{
	  bi_windup(s);        /* align on byte boundary */

	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	//  while (len--) {
	//    put_byte(s, *buf++);
	//  }
	  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}

	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n * 2;
	  var _m2 = m * 2;
	  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
	         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
	}

	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1;  /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;

	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}


	// inlined manually
	// var SMALLEST = 1;

	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist;           /* distance of matched string */
	  var lc;             /* match length or unmatched char (if dist == 0) */
	  var lx = 0;         /* running index in l_buf */
	  var code;           /* the code to send */
	  var extra;          /* number of extra bits to send */

	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;

	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra);       /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");

	        send_code(s, code, dtree);       /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra);   /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */

	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");

	    } while (lx < s.last_lit);
	  }

	  send_code(s, END_BLOCK, ltree);
	}


	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree     = desc.dyn_tree;
	  var stree    = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems    = desc.stat_desc.elems;
	  var n, m;          /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node;          /* new node being created */

	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE;

	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2]/*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;

	    } else {
	      tree[n * 2 + 1]/*.Len*/ = 0;
	    }
	  }

	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2]/*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;

	    if (has_stree) {
	      s.static_len -= stree[node * 2 + 1]/*.Len*/;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;

	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems;              /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1/*SMALLEST*/];
	    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	    /***/

	    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;

	    /* Create a new node father of n and m */
	    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

	    /* and insert the new node in the heap */
	    s.heap[1/*SMALLEST*/] = node++;
	    pqdownheap(s, tree, 1/*SMALLEST*/);

	  } while (s.heap_len >= 2);

	  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);

	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}


	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2]/*.Freq*/ += count;

	    } else if (curlen !== 0) {

	      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
	      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

	    } else {
	      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
	    }

	    count = 0;
	    prevlen = curlen;

	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  /* tree[max_code+1].Len = -1; */  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count - 3, 2);

	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count - 3, 3);

	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count - 11, 7);
	    }

	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex;  /* index of last bit length code of non zero freq */

	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */

	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));

	  return max_blindex;
	}


	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank;                    /* index in bl_order */

	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes - 1,   5);
	  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}


	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;

	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }

	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
	      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS; n++) {
	    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }

	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}


	var static_init_done = false;

	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s)
	{

	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }

	  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

	  s.bi_buf = 0;
	  s.bi_valid = 0;

	  /* Initialize the first block of the first file: */
	  init_block(s);
	}


	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}


	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES << 1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}


	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
	  var max_blindex = 0;        /* index of last bit length code of non zero freq */

	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {

	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN) {
	      s.strm.data_type = detect_data_type(s);
	    }

	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));

	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */

	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);

	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
	    static_lenb = (s.static_len + 3 + 7) >>> 3;

	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));

	    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }

	  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */

	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);

	  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

	    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);

	  } else {
	    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);

	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}

	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;

	  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;

	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc * 2]/*.Freq*/++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--;             /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

	    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
	    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
	  }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility

	//#ifdef TRUNCATE_BLOCK
	//  /* Try to guess if it is profitable to stop the current block here */
	//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	//    /* Compute an upper bound for the compressed length */
	//    out_length = s.last_lit*8;
	//    in_length = s.strstart - s.block_start;
	//
	//    for (dcode = 0; dcode < D_CODES; dcode++) {
	//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	//    }
	//    out_length >>>= 3;
	//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	//    //       s->last_lit, in_length, out_length,
	//    //       100L - out_length*100L/in_length));
	//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	//      return true;
	//    }
	//  }
	//#endif

	  return (s.last_lit === s.lit_bufsize - 1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}

	exports._tr_init  = _tr_init;
	exports._tr_stored_block = _tr_stored_block;
	exports._tr_flush_block  = _tr_flush_block;
	exports._tr_tally = _tr_tally;
	exports._tr_align = _tr_align;


/***/ },
/* 142 */
/***/ function(module, exports) {

	'use strict';

	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.

	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;

	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;

	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s1 | (s2 << 16)) |0;
	}


	module.exports = adler32;


/***/ },
/* 143 */
/***/ function(module, exports) {

	'use strict';

	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.


	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];

	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }

	  return table;
	}

	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();


	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;

	  crc ^= -1;

	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }

	  return (crc ^ (-1)); // >>> 0;
	}


	module.exports = crc32;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var utils         = __webpack_require__(140);
	var adler32       = __webpack_require__(142);
	var crc32         = __webpack_require__(143);
	var inflate_fast  = __webpack_require__(145);
	var inflate_table = __webpack_require__(146);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;

	/* The deflate compression method */
	var Z_DEFLATED  = 8;


	/* STATES ====================================================================*/
	/* ===========================================================================*/


	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

	/* ===========================================================================*/



	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;


	function zswap32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}


	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */

	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */

	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */

	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */

	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */

	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */

	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */

	  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils.Buf16(288); /* work area for code table building */

	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}

	function inflateResetKeep(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}

	function inflateReset(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);

	}

	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;

	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }

	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }

	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}

	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;

	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */

	  state = new InflateState();

	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}

	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}


	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;

	var lenfix, distfix; // We have no pointers in JS, so keep tables separate

	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;

	    lenfix = new utils.Buf32(512);
	    distfix = new utils.Buf32(32);

	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }

	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }

	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

	    /* do this just once */
	    virgin = false;
	  }

	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}


	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;

	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;

	    state.window = new utils.Buf8(state.wsize);
	  }

	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils.arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}

	function inflate(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;

	  var n; // temporary var for NEED_BITS

	  var order = /* permutation of code lengths */
	    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }

	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---

	  _in = have;
	  _out = left;
	  ret = Z_OK;

	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	    case HEAD:
	      if (state.wrap === 0) {
	        state.mode = TYPEDO;
	        break;
	      }
	      //=== NEEDBITS(16);
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//

	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = FLAGS;
	        break;
	      }
	      state.flags = 0;           /* expect zlib header */
	      if (state.head) {
	        state.head.done = false;
	      }
	      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	        strm.msg = 'incorrect header check';
	        state.mode = BAD;
	        break;
	      }
	      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	      len = (hold & 0x0f)/*BITS(4)*/ + 8;
	      if (state.wbits === 0) {
	        state.wbits = len;
	      }
	      else if (len > state.wbits) {
	        strm.msg = 'invalid window size';
	        state.mode = BAD;
	        break;
	      }
	      state.dmax = 1 << len;
	      //Tracev((stderr, "inflate:   zlib header ok\n"));
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = hold & 0x200 ? DICTID : TYPE;
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      break;
	    case FLAGS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.flags = hold;
	      if ((state.flags & 0xff) !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      if (state.flags & 0xe000) {
	        strm.msg = 'unknown header flags set';
	        state.mode = BAD;
	        break;
	      }
	      if (state.head) {
	        state.head.text = ((hold >> 8) & 1);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = TIME;
	      /* falls through */
	    case TIME:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.time = hold;
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC4(state.check, hold)
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        hbuf[2] = (hold >>> 16) & 0xff;
	        hbuf[3] = (hold >>> 24) & 0xff;
	        state.check = crc32(state.check, hbuf, 4, 0);
	        //===
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = OS;
	      /* falls through */
	    case OS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.xflags = (hold & 0xff);
	        state.head.os = (hold >> 8);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = EXLEN;
	      /* falls through */
	    case EXLEN:
	      if (state.flags & 0x0400) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length = hold;
	        if (state.head) {
	          state.head.extra_len = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      else if (state.head) {
	        state.head.extra = null/*Z_NULL*/;
	      }
	      state.mode = EXTRA;
	      /* falls through */
	    case EXTRA:
	      if (state.flags & 0x0400) {
	        copy = state.length;
	        if (copy > have) { copy = have; }
	        if (copy) {
	          if (state.head) {
	            len = state.head.extra_len - state.length;
	            if (!state.head.extra) {
	              // Use untyped array for more conveniend processing later
	              state.head.extra = new Array(state.head.extra_len);
	            }
	            utils.arraySet(
	              state.head.extra,
	              input,
	              next,
	              // extra field is limited to 65536 bytes
	              // - no need for additional size check
	              copy,
	              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	              len
	            );
	            //zmemcpy(state.head.extra + len, next,
	            //        len + copy > state.head.extra_max ?
	            //        state.head.extra_max - len : copy);
	          }
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          state.length -= copy;
	        }
	        if (state.length) { break inf_leave; }
	      }
	      state.length = 0;
	      state.mode = NAME;
	      /* falls through */
	    case NAME:
	      if (state.flags & 0x0800) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          // TODO: 2 or 1 bytes?
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/)) {
	            state.head.name += String.fromCharCode(len);
	          }
	        } while (len && copy < have);

	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.name = null;
	      }
	      state.length = 0;
	      state.mode = COMMENT;
	      /* falls through */
	    case COMMENT:
	      if (state.flags & 0x1000) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/)) {
	            state.head.comment += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.comment = null;
	      }
	      state.mode = HCRC;
	      /* falls through */
	    case HCRC:
	      if (state.flags & 0x0200) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.check & 0xffff)) {
	          strm.msg = 'header crc mismatch';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      if (state.head) {
	        state.head.hcrc = ((state.flags >> 9) & 1);
	        state.head.done = true;
	      }
	      strm.adler = state.check = 0;
	      state.mode = TYPE;
	      break;
	    case DICTID:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      strm.adler = state.check = zswap32(hold);
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = DICT;
	      /* falls through */
	    case DICT:
	      if (state.havedict === 0) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        return Z_NEED_DICT;
	      }
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      /* falls through */
	    case TYPE:
	      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case TYPEDO:
	      if (state.last) {
	        //--- BYTEBITS() ---//
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        state.mode = CHECK;
	        break;
	      }
	      //=== NEEDBITS(3); */
	      while (bits < 3) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.last = (hold & 0x01)/*BITS(1)*/;
	      //--- DROPBITS(1) ---//
	      hold >>>= 1;
	      bits -= 1;
	      //---//

	      switch ((hold & 0x03)/*BITS(2)*/) {
	      case 0:                             /* stored block */
	        //Tracev((stderr, "inflate:     stored block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = STORED;
	        break;
	      case 1:                             /* fixed block */
	        fixedtables(state);
	        //Tracev((stderr, "inflate:     fixed codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = LEN_;             /* decode codes */
	        if (flush === Z_TREES) {
	          //--- DROPBITS(2) ---//
	          hold >>>= 2;
	          bits -= 2;
	          //---//
	          break inf_leave;
	        }
	        break;
	      case 2:                             /* dynamic block */
	        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = TABLE;
	        break;
	      case 3:
	        strm.msg = 'invalid block type';
	        state.mode = BAD;
	      }
	      //--- DROPBITS(2) ---//
	      hold >>>= 2;
	      bits -= 2;
	      //---//
	      break;
	    case STORED:
	      //--- BYTEBITS() ---// /* go to byte boundary */
	      hold >>>= bits & 7;
	      bits -= bits & 7;
	      //---//
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	        strm.msg = 'invalid stored block lengths';
	        state.mode = BAD;
	        break;
	      }
	      state.length = hold & 0xffff;
	      //Tracev((stderr, "inflate:       stored length %u\n",
	      //        state.length));
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = COPY_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case COPY_:
	      state.mode = COPY;
	      /* falls through */
	    case COPY:
	      copy = state.length;
	      if (copy) {
	        if (copy > have) { copy = have; }
	        if (copy > left) { copy = left; }
	        if (copy === 0) { break inf_leave; }
	        //--- zmemcpy(put, next, copy); ---
	        utils.arraySet(output, input, next, copy, put);
	        //---//
	        have -= copy;
	        next += copy;
	        left -= copy;
	        put += copy;
	        state.length -= copy;
	        break;
	      }
	      //Tracev((stderr, "inflate:       stored end\n"));
	      state.mode = TYPE;
	      break;
	    case TABLE:
	      //=== NEEDBITS(14); */
	      while (bits < 14) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	      if (state.nlen > 286 || state.ndist > 30) {
	        strm.msg = 'too many length or distance symbols';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracev((stderr, "inflate:       table sizes ok\n"));
	      state.have = 0;
	      state.mode = LENLENS;
	      /* falls through */
	    case LENLENS:
	      while (state.have < state.ncode) {
	        //=== NEEDBITS(3);
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	        //--- DROPBITS(3) ---//
	        hold >>>= 3;
	        bits -= 3;
	        //---//
	      }
	      while (state.have < 19) {
	        state.lens[order[state.have++]] = 0;
	      }
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      //state.next = state.codes;
	      //state.lencode = state.next;
	      // Switch to use dynamic table
	      state.lencode = state.lendyn;
	      state.lenbits = 7;

	      opts = { bits: state.lenbits };
	      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	      state.lenbits = opts.bits;

	      if (ret) {
	        strm.msg = 'invalid code lengths set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, "inflate:       code lengths ok\n"));
	      state.have = 0;
	      state.mode = CODELENS;
	      /* falls through */
	    case CODELENS:
	      while (state.have < state.nlen + state.ndist) {
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_val < 16) {
	          //--- DROPBITS(here.bits) ---//
	          hold >>>= here_bits;
	          bits -= here_bits;
	          //---//
	          state.lens[state.have++] = here_val;
	        }
	        else {
	          if (here_val === 16) {
	            //=== NEEDBITS(here.bits + 2);
	            n = here_bits + 2;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            if (state.have === 0) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            len = state.lens[state.have - 1];
	            copy = 3 + (hold & 0x03);//BITS(2);
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	          }
	          else if (here_val === 17) {
	            //=== NEEDBITS(here.bits + 3);
	            n = here_bits + 3;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 3 + (hold & 0x07);//BITS(3);
	            //--- DROPBITS(3) ---//
	            hold >>>= 3;
	            bits -= 3;
	            //---//
	          }
	          else {
	            //=== NEEDBITS(here.bits + 7);
	            n = here_bits + 7;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 11 + (hold & 0x7f);//BITS(7);
	            //--- DROPBITS(7) ---//
	            hold >>>= 7;
	            bits -= 7;
	            //---//
	          }
	          if (state.have + copy > state.nlen + state.ndist) {
	            strm.msg = 'invalid bit length repeat';
	            state.mode = BAD;
	            break;
	          }
	          while (copy--) {
	            state.lens[state.have++] = len;
	          }
	        }
	      }

	      /* handle error breaks in while */
	      if (state.mode === BAD) { break; }

	      /* check for end-of-block code (better have one) */
	      if (state.lens[256] === 0) {
	        strm.msg = 'invalid code -- missing end-of-block';
	        state.mode = BAD;
	        break;
	      }

	      /* build code tables -- note: do not change the lenbits or distbits
	         values here (9 and 6) without reading the comments in inftrees.h
	         concerning the ENOUGH constants, which depend on those values */
	      state.lenbits = 9;

	      opts = { bits: state.lenbits };
	      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.lenbits = opts.bits;
	      // state.lencode = state.next;

	      if (ret) {
	        strm.msg = 'invalid literal/lengths set';
	        state.mode = BAD;
	        break;
	      }

	      state.distbits = 6;
	      //state.distcode.copy(state.codes);
	      // Switch to use dynamic table
	      state.distcode = state.distdyn;
	      opts = { bits: state.distbits };
	      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.distbits = opts.bits;
	      // state.distcode = state.next;

	      if (ret) {
	        strm.msg = 'invalid distances set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, 'inflate:       codes ok\n'));
	      state.mode = LEN_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case LEN_:
	      state.mode = LEN;
	      /* falls through */
	    case LEN:
	      if (have >= 6 && left >= 258) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        inflate_fast(strm, _out);
	        //--- LOAD() ---
	        put = strm.next_out;
	        output = strm.output;
	        left = strm.avail_out;
	        next = strm.next_in;
	        input = strm.input;
	        have = strm.avail_in;
	        hold = state.hold;
	        bits = state.bits;
	        //---

	        if (state.mode === TYPE) {
	          state.back = -1;
	        }
	        break;
	      }
	      state.back = 0;
	      for (;;) {
	        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if (here_bits <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if (here_op && (here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.lencode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      state.length = here_val;
	      if (here_op === 0) {
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        state.mode = LIT;
	        break;
	      }
	      if (here_op & 32) {
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.back = -1;
	        state.mode = TYPE;
	        break;
	      }
	      if (here_op & 64) {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break;
	      }
	      state.extra = here_op & 15;
	      state.mode = LENEXT;
	      /* falls through */
	    case LENEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	      //Tracevv((stderr, "inflate:         length %u\n", state.length));
	      state.was = state.length;
	      state.mode = DIST;
	      /* falls through */
	    case DIST:
	      for (;;) {
	        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if ((here_bits) <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if ((here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.distcode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      if (here_op & 64) {
	        strm.msg = 'invalid distance code';
	        state.mode = BAD;
	        break;
	      }
	      state.offset = here_val;
	      state.extra = (here_op) & 15;
	      state.mode = DISTEXT;
	      /* falls through */
	    case DISTEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	//#ifdef INFLATE_STRICT
	      if (state.offset > state.dmax) {
	        strm.msg = 'invalid distance too far back';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	      state.mode = MATCH;
	      /* falls through */
	    case MATCH:
	      if (left === 0) { break inf_leave; }
	      copy = _out - left;
	      if (state.offset > copy) {         /* copy from window */
	        copy = state.offset - copy;
	        if (copy > state.whave) {
	          if (state.sane) {
	            strm.msg = 'invalid distance too far back';
	            state.mode = BAD;
	            break;
	          }
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	        }
	        if (copy > state.wnext) {
	          copy -= state.wnext;
	          from = state.wsize - copy;
	        }
	        else {
	          from = state.wnext - copy;
	        }
	        if (copy > state.length) { copy = state.length; }
	        from_source = state.window;
	      }
	      else {                              /* copy from output */
	        from_source = output;
	        from = put - state.offset;
	        copy = state.length;
	      }
	      if (copy > left) { copy = left; }
	      left -= copy;
	      state.length -= copy;
	      do {
	        output[put++] = from_source[from++];
	      } while (--copy);
	      if (state.length === 0) { state.mode = LEN; }
	      break;
	    case LIT:
	      if (left === 0) { break inf_leave; }
	      output[put++] = state.length;
	      left--;
	      state.mode = LEN;
	      break;
	    case CHECK:
	      if (state.wrap) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          // Use '|' insdead of '+' to make sure that result is signed
	          hold |= input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        _out -= left;
	        strm.total_out += _out;
	        state.total += _out;
	        if (_out) {
	          strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

	        }
	        _out = left;
	        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	          strm.msg = 'incorrect data check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   check matches trailer\n"));
	      }
	      state.mode = LENGTH;
	      /* falls through */
	    case LENGTH:
	      if (state.wrap && state.flags) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.total & 0xffffffff)) {
	          strm.msg = 'incorrect length check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   length matches trailer\n"));
	      }
	      state.mode = DONE;
	      /* falls through */
	    case DONE:
	      ret = Z_STREAM_END;
	      break inf_leave;
	    case BAD:
	      ret = Z_DATA_ERROR;
	      break inf_leave;
	    case MEM:
	      return Z_MEM_ERROR;
	    case SYNC:
	      /* falls through */
	    default:
	      return Z_STREAM_ERROR;
	    }
	  }

	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */

	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---

	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}

	function inflateEnd(strm) {

	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }

	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}

	function inflateGetHeader(strm, head) {
	  var state;

	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}

	function inflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var state;
	  var dictid;
	  var ret;

	  /* check state */
	  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  if (state.wrap !== 0 && state.mode !== DICT) {
	    return Z_STREAM_ERROR;
	  }

	  /* check for correct dictionary identifier */
	  if (state.mode === DICT) {
	    dictid = 1; /* adler32(0, null, 0)*/
	    /* dictid = adler32(dictid, dictionary, dictLength); */
	    dictid = adler32(dictid, dictionary, dictLength, 0);
	    if (dictid !== state.check) {
	      return Z_DATA_ERROR;
	    }
	  }
	  /* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */
	  ret = updatewindow(strm, dictionary, dictLength, dictLength);
	  if (ret) {
	    state.mode = MEM;
	    return Z_MEM_ERROR;
	  }
	  state.havedict = 1;
	  // Tracev((stderr, "inflate:   dictionary set\n"));
	  return Z_OK;
	}

	exports.inflateReset = inflateReset;
	exports.inflateReset2 = inflateReset2;
	exports.inflateResetKeep = inflateResetKeep;
	exports.inflateInit = inflateInit;
	exports.inflateInit2 = inflateInit2;
	exports.inflate = inflate;
	exports.inflateEnd = inflateEnd;
	exports.inflateGetHeader = inflateGetHeader;
	exports.inflateSetDictionary = inflateSetDictionary;
	exports.inflateInfo = 'pako inflate (from Nodeca project)';

	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/


/***/ },
/* 145 */
/***/ function(module, exports) {

	'use strict';

	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	module.exports = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;


	  var input, output; // JS specific, because we have no pointers

	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;


	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */

	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }

	    here = lcode[hold & lmask];

	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];

	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;

	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }

	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }

	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);

	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;

	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var utils = __webpack_require__(140);

	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];

	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];

	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];

	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];

	module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */

	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;

	  var here_bits, here_op, here_val;

	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */

	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }

	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;


	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;

	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }

	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }

	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }

	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }

	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */

	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;

	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;

	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }

	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */

	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }

	  var i = 0;
	  /* process all codes and make table entries */
	  for (;;) {
	    i++;
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }

	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);

	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }

	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }

	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }

	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */

	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }

	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }

	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }

	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }

	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};


/***/ },
/* 147 */
/***/ function(module, exports) {

	'use strict';


	module.exports = {

	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,

	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,

	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,


	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,

	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,

	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	var Buffer = __webpack_require__(18).Buffer;

	function JSInflater(/*Buffer*/input) {

	    var WSIZE = 0x8000,
	        slide = new Buffer(0x10000),
	        windowPos = 0,
	        fixedTableList = null,
	        fixedTableDist,
	        fixedLookup,
	        bitBuf = 0,
	        bitLen = 0,
	        method = -1,
	        eof = false,
	        copyLen = 0,
	        copyDist = 0,
	        tblList, tblDist, bitList, bitdist,

	        inputPosition = 0,

	        MASK_BITS = [0x0000, 0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff, 0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff],
	        LENS = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0],
	        LEXT = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99],
	        DISTS = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577],
	        DEXT = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13],
	        BITORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

	    function HuffTable(clen, cnum, cval, blist, elist, lookupm) {

	        this.status = 0;
	        this.root = null;
	        this.maxbit = 0;

	        var el, f, tail,
	            offsets = [],
	            countTbl = [],
	            sTbl = [],
	            values = [],
	            tentry = {extra: 0, bitcnt: 0, lbase: 0, next: null};

	        tail = this.root = null;
	        for(var i = 0; i < 0x11; i++)  { countTbl[i] = 0; sTbl[i] = 0; offsets[i] = 0; }
	        for(i = 0; i < 0x120; i++) values[i] = 0;

	        el = cnum > 256 ? clen[256] : 16;

	        var pidx = -1;
	        while (++pidx < cnum) countTbl[clen[pidx]]++;

	        if(countTbl[0] == cnum) return;

	        for(var j = 1; j <= 16; j++) if(countTbl[j] != 0) break;
	        var bitLen = j;
	        for(i = 16; i != 0; i--) if(countTbl[i] != 0) break;
	        var maxLen = i;

	        lookupm < j && (lookupm = j);

	        var dCodes = 1 << j;
	        for(; j < i; j++, dCodes <<= 1)
	            if((dCodes -= countTbl[j]) < 0) {
	                this.status = 2;
	                this.maxbit = lookupm;
	                return;
	            }

	        if((dCodes -= countTbl[i]) < 0) {
	            this.status = 2;
	            this.maxbit = lookupm;
	            return;
	        }

	        countTbl[i] += dCodes;
	        offsets[1] = j = 0;
	        pidx = 1;
	        var xp = 2;
	        while(--i > 0) offsets[xp++] = (j += countTbl[pidx++]);
	        pidx = 0;
	        i = 0;
	        do {
	            (j = clen[pidx++]) && (values[offsets[j]++] = i);
	        } while(++i < cnum);
	        cnum = offsets[maxLen];
	        offsets[0] = i = 0;
	        pidx = 0;

	        var level = -1,
	            w = sTbl[0] = 0,
	            cnode = null,
	            tblCnt = 0,
	            tblStack = [];

	        for(; bitLen <= maxLen; bitLen++) {
	            var kccnt = countTbl[bitLen];
	            while(kccnt-- > 0) {
	                while(bitLen > w + sTbl[1 + level]) {
	                    w += sTbl[1 + level];
	                    level++;
	                    tblCnt = (tblCnt = maxLen - w) > lookupm ? lookupm : tblCnt;
	                    if((f = 1 << (j = bitLen - w)) > kccnt + 1) {
	                        f -= kccnt + 1;
	                        xp = bitLen;
	                        while(++j < tblCnt) {
	                            if((f <<= 1) <= countTbl[++xp]) break;
	                            f -= countTbl[xp];
	                        }
	                    }
	                    if(w + j > el && w < el) j = el - w;
	                    tblCnt = 1 << j;
	                    sTbl[1 + level] = j;
	                    cnode = [];
	                    while (cnode.length < tblCnt) cnode.push({extra: 0, bitcnt: 0, lbase: 0, next: null});
	                    if (tail == null) {
	                        tail = this.root = {next:null, list:null};
	                    } else {
	                        tail = tail.next = {next:null, list:null}
	                    }
	                    tail.next = null;
	                    tail.list = cnode;

	                    tblStack[level] = cnode;

	                    if(level > 0) {
	                        offsets[level] = i;
	                        tentry.bitcnt = sTbl[level];
	                        tentry.extra = 16 + j;
	                        tentry.next = cnode;
	                        j = (i & ((1 << w) - 1)) >> (w - sTbl[level]);

	                        tblStack[level-1][j].extra = tentry.extra;
	                        tblStack[level-1][j].bitcnt = tentry.bitcnt;
	                        tblStack[level-1][j].lbase = tentry.lbase;
	                        tblStack[level-1][j].next = tentry.next;
	                    }
	                }
	                tentry.bitcnt = bitLen - w;
	                if(pidx >= cnum)
	                    tentry.extra = 99;
	                else if(values[pidx] < cval) {
	                    tentry.extra = (values[pidx] < 256 ? 16 : 15);
	                    tentry.lbase = values[pidx++];
	                } else {
	                    tentry.extra = elist[values[pidx] - cval];
	                    tentry.lbase = blist[values[pidx++] - cval];
	                }

	                f = 1 << (bitLen - w);
	                for(j = i >> w; j < tblCnt; j += f) {
	                    cnode[j].extra = tentry.extra;
	                    cnode[j].bitcnt = tentry.bitcnt;
	                    cnode[j].lbase = tentry.lbase;
	                    cnode[j].next = tentry.next;
	                }
	                for(j = 1 << (bitLen - 1); (i & j) != 0; j >>= 1)
	                    i ^= j;
	                i ^= j;
	                while((i & ((1 << w) - 1)) != offsets[level]) {
	                    w -= sTbl[level];
	                    level--;
	                }
	            }
	        }

	        this.maxbit = sTbl[1];
	        this.status = ((dCodes != 0 && maxLen != 1) ? 1 : 0);
	    }

	    function addBits(n) {
	        while(bitLen < n) {
	            bitBuf |= input[inputPosition++] << bitLen;
	            bitLen += 8;
	        }
	        return bitBuf;
	    }

	    function cutBits(n) {
	        bitLen -= n;
	        return bitBuf >>= n;
	    }

	    function maskBits(n) {
	        while(bitLen < n) {
	            bitBuf |= input[inputPosition++] << bitLen;
	            bitLen += 8;
	        }
	        var res = bitBuf & MASK_BITS[n];
	        bitBuf >>= n;
	        bitLen -= n;
	        return res;
	    }

	    function codes(buff, off, size) {
	        var e, t;
	        if(size == 0) return 0;

	        var n = 0;
	        for(;;) {
	            t = tblList.list[addBits(bitList) & MASK_BITS[bitList]];
	            e = t.extra;
	            while(e > 16) {
	                if(e == 99) return -1;
	                cutBits(t.bitcnt);
	                e -= 16;
	                t = t.next[addBits(e) & MASK_BITS[e]];
	                e = t.extra;
	            }
	            cutBits(t.bitcnt);
	            if(e == 16) {
	                windowPos &= WSIZE - 1;
	                buff[off + n++] = slide[windowPos++] = t.lbase;
	                if(n == size) return size;
	                continue;
	            }
	            if(e == 15) break;

	            copyLen = t.lbase + maskBits(e);
	            t = tblDist.list[addBits(bitdist) & MASK_BITS[bitdist]];
	            e = t.extra;

	            while(e > 16) {
	                if(e == 99) return -1;
	                cutBits(t.bitcnt);
	                e -= 16;
	                t = t.next[addBits(e) & MASK_BITS[e]];
	                e = t.extra
	            }
	            cutBits(t.bitcnt);
	            copyDist = windowPos - t.lbase - maskBits(e);

	            while(copyLen > 0 && n < size) {
	                copyLen--;
	                copyDist &= WSIZE - 1;
	                windowPos &= WSIZE - 1;
	                buff[off + n++] = slide[windowPos++] = slide[copyDist++];
	            }

	            if(n == size) return size;
	        }

	        method = -1; // done
	        return n;
	    }

	    function stored(buff, off, size) {
	        cutBits(bitLen & 7);
	        var n = maskBits(0x10);
	        if(n != ((~maskBits(0x10)) & 0xffff)) return -1;
	        copyLen = n;

	        n = 0;
	        while(copyLen > 0 && n < size) {
	            copyLen--;
	            windowPos &= WSIZE - 1;
	            buff[off + n++] = slide[windowPos++] = maskBits(8);
	        }

	        if(copyLen == 0) method = -1;
	        return n;
	    }

	    function fixed(buff, off, size) {
	        var fixed_bd = 0;
	        if(fixedTableList == null) {
	            var lengths = [];

	            for(var symbol = 0; symbol < 144; symbol++) lengths[symbol] = 8;
	            for(; symbol < 256; symbol++) lengths[symbol] = 9;
	            for(; symbol < 280; symbol++) lengths[symbol] = 7;
	            for(; symbol < 288; symbol++) lengths[symbol] = 8;

	            fixedLookup = 7;

	            var htbl = new HuffTable(lengths, 288, 257, LENS, LEXT, fixedLookup);

	            if(htbl.status != 0) return -1;

	            fixedTableList = htbl.root;
	            fixedLookup = htbl.maxbit;

	            for(symbol = 0; symbol < 30; symbol++) lengths[symbol] = 5;
	            fixed_bd = 5;

	            htbl = new HuffTable(lengths, 30, 0, DISTS, DEXT, fixed_bd);
	            if(htbl.status > 1) {
	                fixedTableList = null;
	                return -1;
	            }
	            fixedTableDist = htbl.root;
	            fixed_bd = htbl.maxbit;
	        }

	        tblList = fixedTableList;
	        tblDist = fixedTableDist;
	        bitList = fixedLookup;
	        bitdist = fixed_bd;
	        return codes(buff, off, size);
	    }

	    function dynamic(buff, off, size) {
	        var ll = new Array(0x023C);

	        for (var m = 0; m < 0x023C; m++) ll[m] = 0;

	        var llencnt = 257 + maskBits(5),
	            dcodescnt = 1 + maskBits(5),
	            bitlencnt = 4 + maskBits(4);

	        if(llencnt > 286 || dcodescnt > 30) return -1;

	        for(var j = 0; j < bitlencnt; j++) ll[BITORDER[j]] = maskBits(3);
	        for(; j < 19; j++) ll[BITORDER[j]] = 0;

	        // build decoding table for trees--single level, 7 bit lookup
	        bitList = 7;
	        var hufTable = new HuffTable(ll, 19, 19, null, null, bitList);
	        if(hufTable.status != 0)
	            return -1;	// incomplete code set

	        tblList = hufTable.root;
	        bitList = hufTable.maxbit;
	        var lencnt = llencnt + dcodescnt,
	            i = 0,
	            lastLen = 0;
	        while(i < lencnt) {
	            var hufLcode = tblList.list[addBits(bitList) & MASK_BITS[bitList]];
	            j = hufLcode.bitcnt;
	            cutBits(j);
	            j = hufLcode.lbase;
	            if(j < 16)
	                ll[i++] = lastLen = j;
	            else if(j == 16) {
	                j = 3 + maskBits(2);
	                if(i + j > lencnt) return -1;
	                while(j-- > 0) ll[i++] = lastLen;
	            } else if(j == 17) {
	                j = 3 + maskBits(3);
	                if(i + j > lencnt) return -1;
	                while(j-- > 0) ll[i++] = 0;
	                lastLen = 0;
	            } else {
	                j = 11 + maskBits(7);
	                if(i + j > lencnt) return -1;
	                while(j-- > 0) ll[i++] = 0;
	                lastLen = 0;
	            }
	        }
	        bitList = 9;
	        hufTable = new HuffTable(ll, llencnt, 257, LENS, LEXT, bitList);
	        bitList == 0 && (hufTable.status = 1);

	        if (hufTable.status != 0) return -1;

	        tblList = hufTable.root;
	        bitList = hufTable.maxbit;

	        for(i = 0; i < dcodescnt; i++) ll[i] = ll[i + llencnt];
	        bitdist = 6;
	        hufTable = new HuffTable(ll, dcodescnt, 0, DISTS, DEXT, bitdist);
	        tblDist = hufTable.root;
	        bitdist = hufTable.maxbit;

	        if((bitdist == 0 && llencnt > 257) || hufTable.status != 0) return -1;

	        return codes(buff, off, size);
	    }

	    return {
	        inflate : function(/*Buffer*/outputBuffer) {
	            tblList = null;

	            var size = outputBuffer.length,
	                offset = 0, i;

	            while(offset < size) {
	                if(eof && method == -1) return;
	                if(copyLen > 0) {
	                    if(method != 0) {
	                        while(copyLen > 0 && offset < size) {
	                            copyLen--;
	                            copyDist &= WSIZE - 1;
	                            windowPos &= WSIZE - 1;
	                            outputBuffer[offset++] = (slide[windowPos++] = slide[copyDist++]);
	                        }
	                    } else {
	                        while(copyLen > 0 && offset < size) {
	                            copyLen--;
	                            windowPos &= WSIZE - 1;
	                            outputBuffer[offset++] = (slide[windowPos++] = maskBits(8));
	                        }
	                        copyLen == 0 && (method = -1); // done
	                    }
	                    if (offset == size) return;
	                }

	                if(method == -1) {
	                    if(eof) break;
	                    eof = maskBits(1) != 0;
	                    method = maskBits(2);
	                    tblList = null;
	                    copyLen = 0;
	                }
	                switch(method) {
	                    case 0: i = stored(outputBuffer, offset, size - offset); break;
	                    case 1: i = tblList != null ? codes(outputBuffer, offset, size - offset) : fixed(outputBuffer, offset, size - offset); break;
	                    case 2: i = tblList != null ? codes(outputBuffer, offset, size - offset) : dynamic(outputBuffer, offset, size - offset); break;
	                    default: i = -1; break;
	                }

	                if(i == -1) return;
	                offset += i;
	            }
	        }
	    };
	}

	module.exports = function(/*Buffer*/inbuf) {
	    var zlib = __webpack_require__(135);
	    return {
	        inflateAsync : function(/*Function*/callback) {
	            var tmp = zlib.createInflateRaw(),
	                parts = [], total = 0;
	            tmp.on('data', function(data) {
	                parts.push(data);
	                total += data.length;
	            });
	            tmp.on('end', function() {
	                var buf = new Buffer(total), written = 0;
	                buf.fill(0);

	                for (var i = 0; i < parts.length; i++) {
	                    var part = parts[i];
	                    part.copy(buf, written);
	                    written += part.length;
	                }
	                callback && callback(buf);
	            });
	            tmp.end(inbuf)
	        },

	        inflate : function(/*Buffer*/outputBuffer) {
	            var x = {
	                x: new JSInflater(inbuf)
	            };
	            x.x.inflate(outputBuffer);
	            delete(x.x);
	        }
	    }
	};


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var ZipEntry = __webpack_require__(124),
	    Headers = __webpack_require__(130),
	    Utils = __webpack_require__(125);

	module.exports = function(/*String|Buffer*/input, /*Number*/inputType) {
	    var entryList = [],
	        entryTable = {},
	        _comment = new Buffer(0),
	        filename = "",
	        fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	        inBuffer = null,
	        mainHeader = new Headers.MainHeader();

	    if (inputType == Utils.Constants.FILE) {
	        // is a filename
	        filename = input;
	        inBuffer = fs.readFileSync(filename);
	        readMainHeader();
	    } else if (inputType == Utils.Constants.BUFFER) {
	        // is a memory buffer
	        inBuffer = input;
	        readMainHeader();
	    } else {
	        // none. is a new file
	    }

	    function readEntries() {
	        entryTable = {};
	        entryList = new Array(mainHeader.diskEntries);  // total number of entries
	        var index = mainHeader.offset;  // offset of first CEN header
	        for(var i = 0; i < entryList.length; i++) {

	            var tmp = index,
	                entry = new ZipEntry(inBuffer);
	            entry.header = inBuffer.slice(tmp, tmp += Utils.Constants.CENHDR);

	            entry.entryName = inBuffer.slice(tmp, tmp += entry.header.fileNameLength);

	            if (entry.header.extraLength) {
	                entry.extra = inBuffer.slice(tmp, tmp += entry.header.extraLength);
	            }

	            if (entry.header.commentLength)
	                entry.comment = inBuffer.slice(tmp, tmp + entry.header.commentLength);

	            index += entry.header.entryHeaderSize;

	            entryList[i] = entry;
	            entryTable[entry.entryName] = entry;
	        }
	    }

	    function readMainHeader() {
	        var i = inBuffer.length - Utils.Constants.ENDHDR, // END header size
	            n = Math.max(0, i - 0xFFFF), // 0xFFFF is the max zip file comment length
	            endOffset = -1; // Start offset of the END header

	        for (i; i >= n; i--) {
	            if (inBuffer[i] != 0x50) continue; // quick check that the byte is 'P'
	            if (inBuffer.readUInt32LE(i) == Utils.Constants.ENDSIG) { // "PK\005\006"
	                endOffset = i;
	                break;
	            }
	        }
	        if (!~endOffset)
	            throw Utils.Errors.INVALID_FORMAT;

	        mainHeader.loadFromBinary(inBuffer.slice(endOffset, endOffset + Utils.Constants.ENDHDR));
	        if (mainHeader.commentLength) {
	            _comment = inBuffer.slice(endOffset + Utils.Constants.ENDHDR);
	        }
	        readEntries();
	    }

	    return {
	        /**
	         * Returns an array of ZipEntry objects existent in the current opened archive
	         * @return Array
	         */
	        get entries () {
	            return entryList;
	        },

	        /**
	         * Archive comment
	         * @return {String}
	         */
	        get comment () { return _comment.toString(); },
	        set comment(val) {
	            mainHeader.commentLength = val.length;
	            _comment = val;
	        },

	        /**
	         * Returns a reference to the entry with the given name or null if entry is inexistent
	         *
	         * @param entryName
	         * @return ZipEntry
	         */
	        getEntry : function(/*String*/entryName) {
	            return entryTable[entryName] || null;
	        },

	        /**
	         * Adds the given entry to the entry list
	         *
	         * @param entry
	         */
	        setEntry : function(/*ZipEntry*/entry) {
	            entryList.push(entry);
	            entryTable[entry.entryName] = entry;
	            mainHeader.totalEntries = entryList.length;
	        },

	        /**
	         * Removes the entry with the given name from the entry list.
	         *
	         * If the entry is a directory, then all nested files and directories will be removed
	         * @param entryName
	         */
	        deleteEntry : function(/*String*/entryName) {
	            var entry = entryTable[entryName];
	            if (entry && entry.isDirectory) {
	                var _self = this;
	                this.getEntryChildren(entry).forEach(function(child) {
	                    if (child.entryName != entryName) {
	                        _self.deleteEntry(child.entryName)
	                    }
	                })
	            }
	            entryList.splice(entryList.indexOf(entry), 1);
	            delete(entryTable[entryName]);
	            mainHeader.totalEntries = entryList.length;
	        },

	        /**
	         *  Iterates and returns all nested files and directories of the given entry
	         *
	         * @param entry
	         * @return Array
	         */
	        getEntryChildren : function(/*ZipEntry*/entry) {
	            if (entry.isDirectory) {
	                var list = [],
	                    name = entry.entryName,
	                    len = name.length;

	                entryList.forEach(function(zipEntry) {
	                    if (zipEntry.entryName.substr(0, len) == name) {
	                        list.push(zipEntry);
	                    }
	                });
	                return list;
	            }
	            return []
	        },

	        /**
	         * Returns the zip file
	         *
	         * @return Buffer
	         */
	        compressToBuffer : function() {
	            if (entryList.length > 1) {
	                entryList.sort(function(a, b) {
	                    var nameA = a.entryName.toLowerCase();
	                    var nameB = b.entryName.toLowerCase();
	                    if (nameA < nameB) {return -1}
	                    if (nameA > nameB) {return 1}
	                    return 0;
	                });
	            }

	            var totalSize = 0,
	                dataBlock = [],
	                entryHeaders = [],
	                dindex = 0;

	            mainHeader.size = 0;
	            mainHeader.offset = 0;

	            entryList.forEach(function(entry) {
	                entry.header.offset = dindex;

	                // compress data and set local and entry header accordingly. Reason why is called first
	                var compressedData = entry.getCompressedData();
	                // data header
	                var dataHeader = entry.header.dataHeaderToBinary();
	                var postHeader = new Buffer(entry.entryName + entry.extra.toString());
	                var dataLength = dataHeader.length + postHeader.length + compressedData.length;

	                dindex += dataLength;

	                dataBlock.push(dataHeader);
	                dataBlock.push(postHeader);
	                dataBlock.push(compressedData);

	                var entryHeader = entry.packHeader();
	                entryHeaders.push(entryHeader);
	                mainHeader.size += entryHeader.length;
	                totalSize += (dataLength + entryHeader.length);
	            });

	            totalSize += mainHeader.mainHeaderSize; // also includes zip file comment length
	            // point to end of data and begining of central directory first record
	            mainHeader.offset = dindex;

	            dindex = 0;
	            var outBuffer = new Buffer(totalSize);
	            dataBlock.forEach(function(content) {
	                content.copy(outBuffer, dindex); // write data blocks
	                dindex += content.length;
	            });
	            entryHeaders.forEach(function(content) {
	                content.copy(outBuffer, dindex); // write central directory entries
	                dindex += content.length;
	            });

	            var mh = mainHeader.toBinary();
	            if (_comment) {
	                _comment.copy(mh, Utils.Constants.ENDHDR); // add zip file comment
	            }

	            mh.copy(outBuffer, dindex); // write main header

	            return outBuffer
	        },

	        toAsyncBuffer : function(/*Function*/onSuccess,/*Function*/onFail,/*Function*/onItemStart,/*Function*/onItemEnd) {
	            if (entryList.length > 1) {
	                entryList.sort(function(a, b) {
	                    var nameA = a.entryName.toLowerCase();
	                    var nameB = b.entryName.toLowerCase();
	                    if (nameA > nameB) {return -1}
	                    if (nameA < nameB) {return 1}
	                    return 0;
	                });
	            }

	            var totalSize = 0,
	                dataBlock = [],
	                entryHeaders = [],
	                dindex = 0;

	            mainHeader.size = 0;
	            mainHeader.offset = 0;

	            var compress=function(entryList){
	                var self=arguments.callee;
	                var entry;
	                if(entryList.length){
	                    var entry=entryList.pop();
	                    var name=entry.entryName + entry.extra.toString();
	                    if(onItemStart)onItemStart(name);
	                    entry.getCompressedDataAsync(function(compressedData){
	                        if(onItemEnd)onItemEnd(name);

	                        entry.header.offset = dindex;
	                        // data header
	                        var dataHeader = entry.header.dataHeaderToBinary();
	                        var postHeader = new Buffer(name);
	                        var dataLength = dataHeader.length + postHeader.length + compressedData.length;

	                        dindex += dataLength;

	                        dataBlock.push(dataHeader);
	                        dataBlock.push(postHeader);
	                        dataBlock.push(compressedData);

	                        var entryHeader = entry.packHeader();
	                        entryHeaders.push(entryHeader);
	                        mainHeader.size += entryHeader.length;
	                        totalSize += (dataLength + entryHeader.length);

	                        if(entryList.length){
	                            self(entryList);
	                        }else{


	                            totalSize += mainHeader.mainHeaderSize; // also includes zip file comment length
	                            // point to end of data and begining of central directory first record
	                            mainHeader.offset = dindex;

	                            dindex = 0;
	                            var outBuffer = new Buffer(totalSize);
	                            dataBlock.forEach(function(content) {
	                                content.copy(outBuffer, dindex); // write data blocks
	                                dindex += content.length;
	                            });
	                            entryHeaders.forEach(function(content) {
	                                content.copy(outBuffer, dindex); // write central directory entries
	                                dindex += content.length;
	                            });

	                            var mh = mainHeader.toBinary();
	                            if (_comment) {
	                                _comment.copy(mh, Utils.Constants.ENDHDR); // add zip file comment
	                            }

	                            mh.copy(outBuffer, dindex); // write main header

	                            onSuccess(outBuffer);
	                        }
	                    });
	                }
	            };

	            compress(entryList);
	        }
	    }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Various HTTP utilities.
	 */

	'use strict';

	const Executor = __webpack_require__(22).Executor,
	    HttpClient = __webpack_require__(22).HttpClient,
	    HttpRequest = __webpack_require__(22).Request,
	    Command = __webpack_require__(62).Command,
	    CommandName = __webpack_require__(62).Name,
	    error = __webpack_require__(64),
	    promise = __webpack_require__(66);



	/**
	 * Queries a WebDriver server for its current status.
	 * @param {string} url Base URL of the server to query.
	 * @return {!Promise<!Object>} A promise that resolves with
	 *     a hash of the server status.
	 */
	function getStatus(url) {
	  var client = new HttpClient(url);
	  var executor = new Executor(client);
	  var command = new Command(CommandName.GET_SERVER_STATUS);
	  return executor.execute(command);
	}


	// PUBLIC API


	/**
	 * Queries a WebDriver server for its current status.
	 * @param {string} url Base URL of the server to query.
	 * @return {!Promise<!Object>} A promise that resolves with
	 *     a hash of the server status.
	 */
	exports.getStatus = getStatus;


	/**
	 * Waits for a WebDriver server to be healthy and accepting requests.
	 * @param {string} url Base URL of the server to query.
	 * @param {number} timeout How long to wait for the server.
	 * @param {Promise=} opt_cancelToken A promise used as a cancellation signal:
	 *     if resolved before the server is ready, the wait will be terminated
	 *     early with a {@link promise.CancellationError}.
	 * @return {!Promise} A promise that will resolve when the server is ready, or
	 *     if the wait is cancelled.
	 */
	exports.waitForServer = function(url, timeout, opt_cancelToken) {
	  return new Promise((onResolve, onReject) => {
	    let start = Date.now();

	    let done = false;
	    let resolve = (status) => {
	      done = true;
	      onResolve(status);
	    };
	    let reject = (err) => {
	      done = true;
	      onReject(err);
	    };

	    if (opt_cancelToken) {
	      opt_cancelToken.then(_ => reject(new promise.CancellationError));
	    }

	    checkServerStatus();
	    function checkServerStatus() {
	      return getStatus(url).then(status => resolve(status), onError);
	    }

	    function onError(e) {
	      // Some servers don't support the status command. If they are able to
	      // response with an error, then can consider the server ready.
	      if (e instanceof error.UnsupportedOperationError) {
	        resolve({});
	        return;
	      }

	      if (Date.now() - start > timeout) {
	        reject(Error('Timed out waiting for the WebDriver server at ' + url));
	      } else {
	        setTimeout(function() {
	          if (!done) {
	            checkServerStatus();
	          }
	        }, 50);
	      }
	    }
	  });
	};


	/**
	 * Polls a URL with GET requests until it returns a 2xx response or the
	 * timeout expires.
	 * @param {string} url The URL to poll.
	 * @param {number} timeout How long to wait, in milliseconds.
	 * @param {Promise=} opt_cancelToken A promise used as a cancellation signal:
	 *     if resolved before the a 2xx response is received, the wait will be
	 *     terminated early with a {@link promise.CancellationError}.
	 * @return {!Promise} A promise that will resolve when a 2xx is received from
	 *     the given URL, or if the wait is cancelled.
	 */
	exports.waitForUrl = function(url, timeout, opt_cancelToken) {
	  return new Promise((onResolve, onReject) => {
	    let client = new HttpClient(url);
	    let request = new HttpRequest('GET', '');
	    let start = Date.now();

	    let done = false;
	    let resolve = () => {
	      done = true;
	      onResolve();
	    };
	    let reject = (err) => {
	      done = true;
	      onReject(err);
	    };

	    if (opt_cancelToken) {
	      opt_cancelToken.then(_ => reject(new promise.CancellationError));
	    }

	    testUrl();

	    function testUrl() {
	      client.send(request).then(onResponse, onError);
	    }

	    function onError() {
	      if (Date.now() - start > timeout) {
	        reject(Error('Timed out waiting for the URL to return 2xx: ' + url));
	      } else {
	        setTimeout(function() {
	          if (!done) {
	            testUrl();
	          }
	        }, 50);
	      }
	    }

	    function onResponse(response) {
	      if (done) {
	        return;
	      }
	      if (response.status > 199 && response.status < 300) {
	        resolve();
	        return;
	      }
	      onError();
	    }
	  });
	};


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	const childProcess = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"child_process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));


	/**
	 * A hash with configuration options for an executed command.
	 *
	 * - `args` - Command line arguments.
	 * - `env` - Command environment; will inherit from the current process if
	 *     missing.
	 * - `stdio` - IO configuration for the spawned server process. For more
	 *     information, refer to the documentation of `child_process.spawn`.
	 *
	 * @typedef {{
	 *   args: (!Array<string>|undefined),
	 *   env: (!Object<string, string>|undefined),
	 *   stdio: (string|!Array<string|number|!stream.Stream|null|undefined>|
	 *           undefined)
	 * }}
	 */
	var Options;


	/**
	 * Describes a command's termination conditions.
	 */
	class Result {
	  /**
	   * @param {?number} code The exit code, or {@code null} if the command did not
	   *     exit normally.
	   * @param {?string} signal The signal used to kill the command, or
	   *     {@code null}.
	   */
	  constructor(code, signal) {
	    /** @type {?number} */
	    this.code = code;

	    /** @type {?string} */
	    this.signal = signal;
	  }

	  /** @override */
	  toString() {
	    return `Result(code=${this.code}, signal=${this.signal})`;
	  }
	}


	const COMMAND_RESULT = /** !WeakMap<!Command, !Promise<!Result>> */new WeakMap;
	const KILL_HOOK = /** !WeakMap<!Command, function(string)> */new WeakMap;

	/**
	 * Represents a command running in a sub-process.
	 */
	class Command {
	  /**
	   * @param {!Promise<!Result>} result The command result.
	   * @param {function(string)} onKill The function to call when {@link #kill()}
	   *     is called.
	   */
	  constructor(result, onKill) {
	    COMMAND_RESULT.set(this, result);
	    KILL_HOOK.set(this, onKill);
	  }

	  /**
	   * @return {!Promise<!Result>} A promise for the result of this
	   *     command.
	   */
	  result() {
	    return /** @type {!Promise<!Result>} */(COMMAND_RESULT.get(this));
	  }

	  /**
	   * Sends a signal to the underlying process.
	   * @param {string=} opt_signal The signal to send; defaults to `SIGTERM`.
	   */
	  kill(opt_signal) {
	    KILL_HOOK.get(this)(opt_signal || 'SIGTERM');
	  }
	}


	// PUBLIC API


	/**
	 * Spawns a child process. The returned {@link Command} may be used to wait
	 * for the process result or to send signals to the process.
	 *
	 * @param {string} command The executable to spawn.
	 * @param {Options=} opt_options The command options.
	 * @return {!Command} The launched command.
	 */
	module.exports = function exec(command, opt_options) {
	  var options = opt_options || {};

	  var proc = childProcess.spawn(command, options.args || [], {
	    env: options.env || process.env,
	    stdio: options.stdio || 'ignore'
	  });

	  // This process should not wait on the spawned child, however, we do
	  // want to ensure the child is killed when this process exits.
	  proc.unref();
	  process.once('exit', onProcessExit);

	  let result = new Promise(resolve => {
	    proc.once('exit', (code, signal) => {
	      proc = null;
	      process.removeListener('exit', onProcessExit);
	      resolve(new Result(code, signal));
	    });
	  });
	  return new Command(result, killCommand);

	  function onProcessExit() {
	    killCommand('SIGTERM');
	  }

	  function killCommand(signal) {
	    process.removeListener('exit', onProcessExit);
	    if (proc) {
	      proc.kill(signal);
	      proc = null;
	    }
	  }
	};

	// Exported to improve generated API documentation.

	module.exports.Command = Command;
	/** @typedef {!Options} */
	module.exports.Options = Options;
	module.exports.Result = Result;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	var os = __webpack_require__(153);


	function getLoInterface() {
	  var name;
	  if (process.platform === 'darwin') {
	    name = 'lo0';
	  } else if (process.platform === 'linux') {
	    name = 'lo';
	  }
	  return name ? os.networkInterfaces()[name] : null;
	}


	/**
	 * Queries the system network interfaces for an IP address.
	 * @param {boolean} loopback Whether to find a loopback address.
	 * @param {string=} opt_family The IP family (IPv4 or IPv6). Defaults to IPv4.
	 * @return {string} The located IP address or undefined.
	 */
	function getAddress(loopback, opt_family) {
	  var family = opt_family || 'IPv4';
	  var addresses = [];

	  var interfaces;
	  if (loopback) {
	    var lo = getLoInterface();
	    interfaces = lo ? [lo] : null;
	  }
	  interfaces = interfaces || os.networkInterfaces();
	  for (var key in interfaces) {
	    if (!interfaces.hasOwnProperty(key)) {
	      continue;
	    }

	    interfaces[key].forEach(function(ipAddress) {
	      if (ipAddress.family === family &&
	          ipAddress.internal === loopback) {
	        addresses.push(ipAddress.address);
	      }
	    });
	  }
	  return addresses[0];
	}


	// PUBLIC API


	/**
	 * Retrieves the external IP address for this host.
	 * @param {string=} opt_family The IP family to retrieve. Defaults to "IPv4".
	 * @return {string} The IP address or undefined if not available.
	 */
	exports.getAddress = function(opt_family) {
	  return getAddress(false, opt_family);
	};


	/**
	 * Retrieves a loopback address for this machine.
	 * @param {string=} opt_family The IP family to retrieve. Defaults to "IPv4".
	 * @return {string} The IP address or undefined if not available.
	 */
	exports.getLoopbackAddress = function(opt_family) {
	  return getAddress(true, opt_family);
	};


	/**
	 * Splits a hostport string, e.g. "www.example.com:80", into its component
	 * parts.
	 *
	 * @param {string} hostport The string to split.
	 * @return {{host: string, port: ?number}} A host and port. If no port is
	 *     present in the argument `hostport`, port is null.
	 */
	exports.splitHostAndPort = function(hostport) {
	  let lastIndex = hostport.lastIndexOf(':');
	  if (lastIndex < 0) {
	    return {host: hostport, port: null};
	  }

	  let firstIndex = hostport.indexOf(':');
	  if (firstIndex != lastIndex && !hostport.includes('[')) {
	    // Multiple colons but no brackets, so assume the string is an IPv6 address
	    // with no port (e.g. "1234:5678:9:0:1234:5678:9:0").
	    return {host: hostport, port: null};
	  }

	  let host = hostport.slice(0, lastIndex);
	  if (host.startsWith('[') && host.endsWith(']')) {
	    host = host.slice(1, -1);
	  }

	  let port = parseInt(hostport.slice(lastIndex + 1), 10);
	  return {host, port};
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 153 */
/***/ function(module, exports) {

	exports.endianness = function () { return 'LE' };

	exports.hostname = function () {
	    if (typeof location !== 'undefined') {
	        return location.hostname
	    }
	    else return '';
	};

	exports.loadavg = function () { return [] };

	exports.uptime = function () { return 0 };

	exports.freemem = function () {
	    return Number.MAX_VALUE;
	};

	exports.totalmem = function () {
	    return Number.MAX_VALUE;
	};

	exports.cpus = function () { return [] };

	exports.type = function () { return 'Browser' };

	exports.release = function () {
	    if (typeof navigator !== 'undefined') {
	        return navigator.appVersion;
	    }
	    return '';
	};

	exports.networkInterfaces
	= exports.getNetworkInterfaces
	= function () { return {} };

	exports.arch = function () { return 'javascript' };

	exports.platform = function () { return 'browser' };

	exports.tmpdir = exports.tmpDir = function () {
	    return '/tmp';
	};

	exports.EOL = '\n';


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a {@linkplain Driver WebDriver} client for
	 * Microsoft's Edge web browser. Before using this module,
	 * you must download and install the latest
	 * [MicrosoftEdgeDriver](http://go.microsoft.com/fwlink/?LinkId=619687) server.
	 * Ensure that the MicrosoftEdgeDriver is on your
	 * [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).
	 *
	 * There are three primary classes exported by this module:
	 *
	 * 1. {@linkplain ServiceBuilder}: configures the
	 *     {@link ./remote.DriverService remote.DriverService}
	 *     that manages the [MicrosoftEdgeDriver] child process.
	 *
	 * 2. {@linkplain Options}: defines configuration options for each new
	 *     MicrosoftEdgeDriver session, such as which
	 *     {@linkplain Options#setProxy proxy} to use when starting the browser.
	 *
	 * 3. {@linkplain Driver}: the WebDriver client; each new instance will control
	 *     a unique browser session.
	 *
	 * __Customizing the MicrosoftEdgeDriver Server__ <a id="custom-server"></a>
	 *
	 * By default, every MicrosoftEdge session will use a single driver service,
	 * which is started the first time a {@link Driver} instance is created and
	 * terminated when this process exits. The default service will inherit its
	 * environment from the current process.
	 * You may obtain a handle to this default service using
	 * {@link #getDefaultService getDefaultService()} and change its configuration
	 * with {@link #setDefaultService setDefaultService()}.
	 *
	 * You may also create a {@link Driver} with its own driver service. This is
	 * useful if you need to capture the server's log output for a specific session:
	 *
	 *     var edge = require('selenium-webdriver/edge');
	 *
	 *     var service = new edge.ServiceBuilder()
	 *         .setPort(55555)
	 *         .build();
	 *
	 *     var options = new edge.Options();
	 *     // configure browser options ...
	 *
	 *     var driver = new edge.Driver(options, service);
	 *
	 * Users should only instantiate the {@link Driver} class directly when they
	 * need a custom driver service configuration (as shown above). For normal
	 * operation, users should start MicrosoftEdge using the
	 * {@link ./builder.Builder selenium-webdriver.Builder}.
	 *
	 * [MicrosoftEdgeDriver]: https://msdn.microsoft.com/en-us/library/mt188085(v=vs.85).aspx
	 */

	'use strict';

	const fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    util = __webpack_require__(12);

	const http = __webpack_require__(22),
	    io = __webpack_require__(75),
	    capabilities = __webpack_require__(69),
	    promise = __webpack_require__(66),
	    Symbols = __webpack_require__(70),
	    webdriver = __webpack_require__(71),
	    portprober = __webpack_require__(121),
	    remote = __webpack_require__(122);

	const EDGEDRIVER_EXE = 'MicrosoftWebDriver.exe';


	/**
	 * Option keys.
	 * @enum {string}
	 */
	const CAPABILITY_KEY = {
	  PAGE_LOAD_STRATEGY: 'pageLoadStrategy'
	};


	/**
	 * Class for managing MicrosoftEdgeDriver specific options.
	 */
	class Options {
	  constructor() {
	    /** @private {!Object} */
	    this.options_ = {};

	    /** @private {?capabilities.ProxyConfig} */
	    this.proxy_ = null;
	  }

	  /**
	   * Extracts the MicrosoftEdgeDriver specific options from the given
	   * capabilities object.
	   * @param {!capabilities.Capabilities} caps The capabilities object.
	   * @return {!Options} The MicrosoftEdgeDriver options.
	   */
	  static fromCapabilities(caps) {
	    var options = new Options();
	    var map = options.options_;

	    Object.keys(CAPABILITY_KEY).forEach(function(key) {
	      key = CAPABILITY_KEY[key];
	      if (caps.has(key)) {
	        map[key] = caps.get(key);
	      }
	    });

	    if (caps.has(capabilities.Capability.PROXY)) {
	      options.setProxy(caps.get(capabilities.Capability.PROXY));
	    }

	    return options;
	  }

	  /**
	   * Sets the proxy settings for the new session.
	   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.
	   * @return {!Options} A self reference.
	   */
	  setProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * Sets the page load strategy for Edge.
	   * Supported values are "normal", "eager", and "none";
	   *
	   * @param {string} pageLoadStrategy The page load strategy to use.
	   * @return {!Options} A self reference.
	   */
	  setPageLoadStrategy(pageLoadStrategy) {
	    this.options_[CAPABILITY_KEY.PAGE_LOAD_STRATEGY] =
	      pageLoadStrategy.toLowerCase();
	    return this;
	  }

	  /**
	   * Converts this options instance to a {@link capabilities.Capabilities}
	   * object.
	   * @param {capabilities.Capabilities=} opt_capabilities The capabilities to
	   *     merge these options into, if any.
	   * @return {!capabilities.Capabilities} The capabilities.
	   */
	  toCapabilities(opt_capabilities) {
	    var caps = opt_capabilities || capabilities.Capabilities.edge();
	    if (this.proxy_) {
	      caps.set(capabilities.Capability.PROXY, this.proxy_);
	    }
	    Object.keys(this.options_).forEach(function(key) {
	      caps.set(key, this.options_[key]);
	    }, this);
	    return caps;
	  }

	  /**
	   * Converts this instance to its JSON wire protocol representation. Note this
	   * function is an implementation not intended for general use.
	   * @return {{pageLoadStrategy: (string|undefined)}}
	   *   The JSON wire protocol representation of this instance.
	   */
	  [Symbols.serialize]() {
	    var json = {};
	    for (var key in this.options_) {
	      if (this.options_[key] != null) {
	        json[key] = this.options_[key];
	      }
	    }
	    return json;
	  }
	}


	/**
	 * Creates {@link remote.DriverService} instances that manage a
	 * MicrosoftEdgeDriver server in a child process.
	 */
	class ServiceBuilder extends remote.DriverService.Builder {
	  /**
	   * @param {string=} opt_exe Path to the server executable to use. If omitted,
	   *   the builder will attempt to locate the MicrosoftEdgeDriver on the current
	   *   PATH.
	   * @throws {Error} If provided executable does not exist, or the
	   *   MicrosoftEdgeDriver cannot be found on the PATH.
	   */
	  constructor(opt_exe) {
	    let exe = opt_exe || io.findInPath(EDGEDRIVER_EXE, true);
	    if (!exe) {
	      throw Error(
	        'The ' + EDGEDRIVER_EXE + ' could not be found on the current PATH. ' +
	        'Please download the latest version of the MicrosoftEdgeDriver from ' +
	        'https://www.microsoft.com/en-us/download/details.aspx?id=48212 and ' +
	        'ensure it can be found on your PATH.');
	    }

	    super(exe);

	    // Binding to the loopback address will fail if not running with
	    // administrator privileges. Since we cannot test for that in script
	    // (or can we?), force the DriverService to use "localhost".
	    this.setHostname('localhost');
	  }
	}


	/** @type {remote.DriverService} */
	var defaultService = null;


	/**
	 * Sets the default service to use for new MicrosoftEdgeDriver instances.
	 * @param {!remote.DriverService} service The service to use.
	 * @throws {Error} If the default service is currently running.
	 */
	function setDefaultService(service) {
	  if (defaultService && defaultService.isRunning()) {
	    throw Error(
	      'The previously configured EdgeDriver service is still running. ' +
	      'You must shut it down before you may adjust its configuration.');
	  }
	  defaultService = service;
	}


	/**
	 * Returns the default MicrosoftEdgeDriver service. If such a service has
	 * not been configured, one will be constructed using the default configuration
	 * for an MicrosoftEdgeDriver executable found on the system PATH.
	 * @return {!remote.DriverService} The default MicrosoftEdgeDriver service.
	 */
	function getDefaultService() {
	  if (!defaultService) {
	    defaultService = new ServiceBuilder().build();
	  }
	  return defaultService;
	}


	/**
	 * Creates a new WebDriver client for Microsoft's Edge.
	 */
	class Driver extends webdriver.WebDriver {
	  /**
	   * Creates a new browser session for Microsoft's Edge browser.
	   *
	   * @param {(capabilities.Capabilities|Options)=} opt_config The configuration
	   *     options.
	   * @param {remote.DriverService=} opt_service The session to use; will use
	   *     the {@linkplain #getDefaultService default service} by default.
	   * @param {promise.ControlFlow=} opt_flow The control flow to use, or
	   *     {@code null} to use the currently active flow.
	   * @return {!Driver} A new driver instance.
	   */
	  static createSession(opt_config, opt_service, opt_flow) {
	    var service = opt_service || getDefaultService();
	    var client = service.start().then(url => new http.HttpClient(url));
	    var executor = new http.Executor(client);

	    var caps =
	        opt_config instanceof Options ? opt_config.toCapabilities() :
	        (opt_config || capabilities.Capabilities.edge());

	    return /** @type {!Driver} */(webdriver.WebDriver.createSession(
	        executor, caps, opt_flow, this, () => service.kill()));
	  }

	  /**
	   * This function is a no-op as file detectors are not supported by this
	   * implementation.
	   * @override
	   */
	  setFileDetector() {}
	}


	// PUBLIC API


	exports.Driver = Driver;
	exports.Options = Options;
	exports.ServiceBuilder = ServiceBuilder;
	exports.getDefaultService = getDefaultService;
	exports.setDefaultService = setDefaultService;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines the {@linkplain Driver WebDriver} client for Firefox.
	 * Before using this module, you must download the latest
	 * [geckodriver release] and ensure it can be found on your system [PATH].
	 *
	 * Each FirefoxDriver instance will be created with an anonymous profile,
	 * ensuring browser historys do not share session data (cookies, history, cache,
	 * offline storage, etc.)
	 *
	 * __Customizing the Firefox Profile__
	 *
	 * The {@link Profile} class may be used to configure the browser profile used
	 * with WebDriver, with functions to install additional
	 * {@linkplain Profile#addExtension extensions}, configure browser
	 * {@linkplain Profile#setPreference preferences}, and more. For example, you
	 * may wish to include Firebug:
	 *
	 *     var firefox = require('selenium-webdriver/firefox');
	 *
	 *     var profile = new firefox.Profile();
	 *     profile.addExtension('/path/to/firebug.xpi');
	 *     profile.setPreference('extensions.firebug.showChromeErrors', true);
	 *
	 *     var options = new firefox.Options().setProfile(profile);
	 *     var driver = new firefox.Driver(options);
	 *
	 * The {@link Profile} class may also be used to configure WebDriver based on a
	 * pre-existing browser profile:
	 *
	 *     var profile = new firefox.Profile(
	 *         '/usr/local/home/bob/.mozilla/firefox/3fgog75h.testing');
	 *     var options = new firefox.Options().setProfile(profile);
	 *     var driver = new firefox.Driver(options);
	 *
	 * The FirefoxDriver will _never_ modify a pre-existing profile; instead it will
	 * create a copy for it to modify. By extension, there are certain browser
	 * preferences that are required for WebDriver to function properly and they
	 * will always be overwritten.
	 *
	 * __Using a Custom Firefox Binary__
	 *
	 * On Windows and OSX, the FirefoxDriver will search for Firefox in its
	 * default installation location:
	 *
	 * * Windows: C:\Program Files and C:\Program Files (x86).
	 * * Mac OS X: /Applications/Firefox.app
	 *
	 * For Linux, Firefox will be located on the PATH: `$(where firefox)`.
	 *
	 * You can configure WebDriver to start use a custom Firefox installation with
	 * the {@link Binary} class:
	 *
	 *     var firefox = require('selenium-webdriver/firefox');
	 *     var binary = new firefox.Binary('/my/firefox/install/dir/firefox-bin');
	 *     var options = new firefox.Options().setBinary(binary);
	 *     var driver = new firefox.Driver(options);
	 *
	 * __Remote Testing__
	 *
	 * You may customize the Firefox binary and profile when running against a
	 * remote Selenium server. Your custom profile will be packaged as a zip and
	 * transfered to the remote host for use. The profile will be transferred
	 * _once for each new session_. The performance impact should be minimal if
	 * you've only configured a few extra browser preferences. If you have a large
	 * profile with several extensions, you should consider installing it on the
	 * remote host and defining its path via the {@link Options} class. Custom
	 * binaries are never copied to remote machines and must be referenced by
	 * installation path.
	 *
	 *     var options = new firefox.Options()
	 *         .setProfile('/profile/path/on/remote/host')
	 *         .setBinary('/install/dir/on/remote/host/firefox-bin');
	 *
	 *     var driver = new (require('selenium-webdriver')).Builder()
	 *         .forBrowser('firefox')
	 *         .usingServer('http://127.0.0.1:4444/wd/hub')
	 *         .setFirefoxOptions(options)
	 *         .build();
	 *
	 * __Testing Older Versions of Firefox__
	 *
	 * To test versions of Firefox prior to Firefox 47, you must disable the use of
	 * the geckodriver using the {@link Options} class.
	 *
	 *     var options = new firefox.Options().useGeckoDriver(false);
	 *     var driver = new firefox.Driver(options);
	 *
	 * Alternatively, you may disable the geckodriver at runtime by setting the
	 * environment variable `SELENIUM_MARIONETTE=false`.
	 *
	 * [geckodriver release]: https://github.com/mozilla/geckodriver/releases/
	 * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29
	 */

	'use strict';

	const url = __webpack_require__(52);

	const Binary = __webpack_require__(156).Binary,
	    Profile = __webpack_require__(157).Profile,
	    decodeProfile = __webpack_require__(157).decode,
	    http = __webpack_require__(22),
	    httpUtil = __webpack_require__(150),
	    io = __webpack_require__(75),
	    capabilities = __webpack_require__(69),
	    command = __webpack_require__(62),
	    logging = __webpack_require__(65),
	    promise = __webpack_require__(66),
	    webdriver = __webpack_require__(71),
	    net = __webpack_require__(152),
	    portprober = __webpack_require__(121),
	    remote = __webpack_require__(122);


	/**
	 * Firefox-specific capability keys. Users should use the {@linkplain Options}
	 * class instead of referencing these keys directly. _These keys are considered
	 * implementation details and may be removed or changed at any time._
	 *
	 * @enum {string}
	 */
	const Capability = {
	  /**
	   * Defines the Firefox binary to use. May be set to either a
	   * {@linkplain Binary} instance, or a string path to the Firefox executable.
	   */
	  BINARY: 'firefox_binary',

	  /**
	   * Specifies whether to use Mozilla's Marionette, or the legacy FirefoxDriver
	   * from the Selenium project. Defaults to false.
	   */
	  MARIONETTE: 'marionette',

	  /**
	   * Defines the Firefox profile to use. May be set to either a
	   * {@linkplain Profile} instance, or to a base-64 encoded zip of a profile
	   * directory.
	   */
	  PROFILE: 'firefox_profile'
	};


	/**
	 * Configuration options for the FirefoxDriver.
	 */
	class Options {
	  constructor() {
	    /** @private {Profile} */
	    this.profile_ = null;

	    /** @private {Binary} */
	    this.binary_ = null;

	    /** @private {logging.Preferences} */
	    this.logPrefs_ = null;

	    /** @private {?capabilities.ProxyConfig} */
	    this.proxy_ = null;

	    /** @private {boolean} */
	    this.marionette_ = true;
	  }

	  /**
	   * Sets the profile to use. The profile may be specified as a
	   * {@link Profile} object or as the path to an existing Firefox profile to use
	   * as a template.
	   *
	   * @param {(string|!Profile)} profile The profile to use.
	   * @return {!Options} A self reference.
	   */
	  setProfile(profile) {
	    if (typeof profile === 'string') {
	      profile = new Profile(profile);
	    }
	    this.profile_ = profile;
	    return this;
	  }

	  /**
	   * Sets the binary to use. The binary may be specified as the path to a Firefox
	   * executable, or as a {@link Binary} object.
	   *
	   * @param {(string|!Binary)} binary The binary to use.
	   * @return {!Options} A self reference.
	   */
	  setBinary(binary) {
	    if (typeof binary === 'string') {
	      binary = new Binary(binary);
	    }
	    this.binary_ = binary;
	    return this;
	  }

	  /**
	   * Sets the logging preferences for the new session.
	   * @param {logging.Preferences} prefs The logging preferences.
	   * @return {!Options} A self reference.
	   */
	  setLoggingPreferences(prefs) {
	    this.logPrefs_ = prefs;
	    return this;
	  }

	  /**
	   * Sets the proxy to use.
	   *
	   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.
	   * @return {!Options} A self reference.
	   */
	  setProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * Sets whether to use Mozilla's geckodriver to drive the browser. This option
	   * is enabled by default and required for Firefox 47+.
	   *
	   * @param {boolean} enable Whether to enable the geckodriver.
	   * @see https://github.com/mozilla/geckodriver
	   */
	  useGeckoDriver(enable) {
	    this.marionette_ = enable;
	    return this;
	  }

	  /**
	   * Converts these options to a {@link capabilities.Capabilities} instance.
	   *
	   * @return {!capabilities.Capabilities} A new capabilities object.
	   */
	  toCapabilities() {
	    var caps = capabilities.Capabilities.firefox();
	    if (this.logPrefs_) {
	      caps.set(capabilities.Capability.LOGGING_PREFS, this.logPrefs_);
	    }
	    if (this.proxy_) {
	      caps.set(capabilities.Capability.PROXY, this.proxy_);
	    }
	    if (this.binary_) {
	      caps.set(Capability.BINARY, this.binary_);
	    }
	    if (this.profile_) {
	      caps.set(Capability.PROFILE, this.profile_);
	    }
	    caps.set(Capability.MARIONETTE, this.marionette_);
	    return caps;
	  }
	}


	/**
	 * Enum of available command contexts.
	 *
	 * Command contexts are specific to Marionette, and may be used with the
	 * {@link #context=} method. Contexts allow you to direct all subsequent
	 * commands to either "content" (default) or "chrome". The latter gives
	 * you elevated security permissions.
	 *
	 * @enum {string}
	 */
	const Context = {
	  CONTENT: "content",
	  CHROME: "chrome",
	};


	const GECKO_DRIVER_EXE =
	    process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver';


	/**
	 * @return {string} .
	 * @throws {Error}
	 */
	function findGeckoDriver() {
	  let exe = io.findInPath(GECKO_DRIVER_EXE, true);
	  if (!exe) {
	    throw Error(
	      'The ' + GECKO_DRIVER_EXE + ' executable could not be found on the current ' +
	      'PATH. Please download the latest version from ' +
	      'https://github.com/mozilla/geckodriver/releases/' +
	      'WebDriver and ensure it can be found on your PATH.');
	  }
	  return exe;
	}


	/**
	 * @param {(Profile|string)} profile The profile to prepare.
	 * @param {number} port The port the FirefoxDriver should listen on.
	 * @return {!Promise<string>} a promise for the path to the profile directory.
	 */
	function prepareProfile(profile, port) {
	  if (typeof profile === 'string') {
	    return decodeProfile(/** @type {string} */(profile)).then(dir => {
	      profile = new Profile(dir);
	      profile.setPreference('webdriver_firefox_port', port);
	      return profile.writeToDisk();
	    });
	  }

	  profile = profile || new Profile;
	  profile.setPreference('webdriver_firefox_port', port);
	  return profile.writeToDisk();
	}


	function normalizeProxyConfiguration(config) {
	  if ('manual' === config.proxyType) {
	    if (config.ftpProxy && !config.ftpProxyPort) {
	      let hostAndPort = net.splitHostAndPort(config.ftpProxy);
	      config.ftpProxy = hostAndPort.host;
	      config.ftpProxyPort = hostAndPort.port;
	    }

	    if (config.httpProxy && !config.httpProxyPort) {
	      let hostAndPort = net.splitHostAndPort(config.httpProxy);
	      config.httpProxy = hostAndPort.host;
	      config.httpProxyPort = hostAndPort.port;
	    }

	    if (config.sslProxy && !config.sslProxyPort) {
	      let hostAndPort = net.splitHostAndPort(config.sslProxy);
	      config.sslProxy = hostAndPort.host;
	      config.sslProxyPort = hostAndPort.port;
	    }

	    if (config.socksProxy && !config.socksProxyPort) {
	      let hostAndPort = net.splitHostAndPort(config.socksProxy);
	      config.socksProxy = hostAndPort.host;
	      config.socksProxyPort = hostAndPort.port;
	    }
	  } else if ('pac' === config.proxyType) {
	    if (config.proxyAutoconfigUrl && !config.pacUrl) {
	      config.pacUrl = config.proxyAutoconfigUrl;
	    }
	  }
	  return config;
	}


	/** @enum {string} */
	const ExtensionCommand = {
	  GET_CONTEXT: 'getContext',
	  SET_CONTEXT: 'setContext',
	};


	/**
	 * Creates a command executor with support for Marionette's custom commands.
	 * @param {!Promise<string>} serverUrl The server's URL.
	 * @return {!command.Executor} The new command executor.
	 */
	function createExecutor(serverUrl) {
	  let client = serverUrl.then(url => new http.HttpClient(url));
	  let executor = new http.Executor(client);
	  configureExecutor(executor);
	  return executor;
	}


	/**
	 * Configures the given executor with Firefox-specific commands.
	 * @param {!http.Executor} executor the executor to configure.
	 */
	function configureExecutor(executor) {
	  executor.defineCommand(
	      ExtensionCommand.GET_CONTEXT,
	      'GET',
	      '/session/:sessionId/moz/context');

	  executor.defineCommand(
	      ExtensionCommand.SET_CONTEXT,
	      'POST',
	      '/session/:sessionId/moz/context');
	}


	/**
	 * Creates {@link selenium-webdriver/remote.DriverService} instances that manage
	 * a [geckodriver](https://github.com/mozilla/geckodriver) server in a child
	 * process.
	 */
	class ServiceBuilder extends remote.DriverService.Builder {
	  /**
	   * @param {string=} opt_exe Path to the server executable to use. If omitted,
	   *     the builder will attempt to locate the geckodriver on the system PATH.
	   */
	  constructor(opt_exe) {
	    super(opt_exe || findGeckoDriver());
	    this.setLoopback(true);  // Required.
	  }

	  /**
	   * Enables verbose logging.
	   *
	   * @param {boolean=} opt_trace Whether to enable trace-level logging. By
	   *     default, only debug logging is enabled.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  enableVerboseLogging(opt_trace) {
	    return this.addArguments(opt_trace ? '-vv' : '-v');
	  }

	  /**
	   * Sets the path to the executable Firefox binary that the geckodriver should
	   * use. If this method is not called, this builder will attempt to locate
	   * Firefox in the default installation location for the current platform.
	   *
	   * @param {(string|!Binary)} binary Path to the executable Firefox binary to use.
	   * @return {!ServiceBuilder} A self reference.
	   * @see Binary#locate()
	   */
	  setFirefoxBinary(binary) {
	    let exe = typeof binary === 'string'
	        ? Promise.resolve(binary) : binary.locate();
	    return this.addArguments('-b', exe);
	  }
	}


	/**
	 * @typedef {{executor: !command.Executor,
	 *            capabilities: (!capabilities.Capabilities|
	 *                           {desired: (capabilities.Capabilities|undefined),
	 *                            required: (capabilities.Capabilities|undefined)}),
	 *            onQuit: function(this: void): ?}}
	 */
	var DriverSpec;


	/**
	 * @param {(http.Executor|remote.DriverService|undefined)} executor
	 * @param {!capabilities.Capabilities} caps
	 * @param {Profile} profile
	 * @param {Binary} binary
	 * @return {DriverSpec}
	 */
	function createGeckoDriver(executor, caps, profile, binary) {
	  let firefoxOptions = {};
	  caps.set('moz:firefoxOptions', firefoxOptions);

	  if (binary) {
	    if (binary.getExe()) {
	      firefoxOptions['binary'] = binary.getExe();
	    }

	    let args = binary.getArguments();
	    if (args.length) {
	      firefoxOptions['args'] = args;
	    }
	  }

	  if (profile) {
	    // If the user specified a template directory or any extensions to install,
	    // we need to encode the profile as a base64 string (which requires writing
	    // it to disk first). Otherwise, if the user just specified some custom
	    // preferences, we can send those directly.
	    if (profile.getTemplateDir() || profile.getExtensions().length) {
	      firefoxOptions['profile'] = profile.encode();

	    } else {
	      let prefs = profile.getPreferences();
	      if (Object.keys(prefs).length) {
	        firefoxOptions['prefs'] = prefs;
	      }
	    }
	  }

	  let sessionCaps = caps;
	  if (caps.has(capabilities.Capability.PROXY)) {
	    let proxy = normalizeProxyConfiguration(
	        caps.get(capabilities.Capability.PROXY));

	    // Marionette requires proxy settings to be specified as required
	    // capabilities. See mozilla/geckodriver#97
	    let required = new capabilities.Capabilities()
	        .set(capabilities.Capability.PROXY, proxy);

	    caps.delete(capabilities.Capability.PROXY);
	    sessionCaps = {required, desired: caps};
	  }

	  /** @type {!command.Executor} */
	  let cmdExecutor;
	  let onQuit = function() {};

	  if (executor instanceof http.Executor) {
	    configureExecutor(executor);
	    cmdExecutor = executor;
	  } else if (executor instanceof remote.DriverService) {
	    cmdExecutor = createExecutor(executor.start());
	    onQuit = () => executor.kill();
	  } else {
	    let builder = new ServiceBuilder();
	    if (binary) {
	      builder.setFirefoxBinary(binary);
	    }
	    let service = builder.build();
	    cmdExecutor = createExecutor(service.start());
	    onQuit = () => service.kill();
	  }

	  return {
	    executor: cmdExecutor,
	    capabilities: sessionCaps,
	    onQuit
	  };
	}


	/**
	 * @param {!capabilities.Capabilities} caps
	 * @param {Profile} profile
	 * @param {!Binary} binary
	 * @return {DriverSpec}
	 */
	function createLegacyDriver(caps, profile, binary, flow) {
	  profile = profile || new Profile;

	  let freePort = portprober.findFreePort();
	  let preparedProfile =
	      freePort.then(port => prepareProfile(profile, port));
	  let command = preparedProfile.then(dir => binary.launch(dir));

	  let serverUrl = command.then(() => freePort)
	      .then(function(/** number */port) {
	        let serverUrl = url.format({
	          protocol: 'http',
	          hostname: net.getLoopbackAddress(),
	          port: port + '',
	          pathname: '/hub'
	        });
	        let ready = httpUtil.waitForServer(serverUrl, 45 * 1000);
	        return ready.then(() => serverUrl);
	      });

	  return {
	    executor: createExecutor(serverUrl),
	    capabilities: caps,
	    onQuit: function() {
	      return command.then(command => {
	        command.kill();
	        return preparedProfile.then(io.rmDir)
	            .then(() => command.result(),
	                  () => command.result());
	      });
	    }
	  };
	}


	/**
	 * A WebDriver client for Firefox.
	 */
	class Driver extends webdriver.WebDriver {
	  /**
	   * Creates a new Firefox session.
	   *
	   * @param {(Options|capabilities.Capabilities|Object)=} opt_config The
	   *    configuration options for this driver, specified as either an
	   *    {@link Options} or {@link capabilities.Capabilities}, or as a raw hash
	   *    object.
	   * @param {(http.Executor|remote.DriverService)=} opt_executor Either a
	   *   pre-configured command executor to use for communicating with an
	   *   externally managed remote end (which is assumed to already be running),
	   *   or the `DriverService` to use to start the geckodriver in a child
	   *   process.
	   *
	   *   If an executor is provided, care should e taken not to use reuse it with
	   *   other clients as its internal command mappings will be updated to support
	   *   Firefox-specific commands.
	   *
	   *   _This parameter may only be used with Mozilla's GeckoDriver._
	   *
	   * @param {promise.ControlFlow=} opt_flow The flow to
	   *     schedule commands through. Defaults to the active flow object.
	   * @throws {Error} If a custom command executor is provided and the driver is
	   *     configured to use the legacy FirefoxDriver from the Selenium project.
	   * @return {!Driver} A new driver instance.
	   */
	  static createSession(opt_config, opt_executor, opt_flow) {
	    let caps;
	    if (opt_config instanceof Options) {
	      caps = opt_config.toCapabilities();
	    } else {
	      caps = new capabilities.Capabilities(opt_config);
	    }

	    let binary = caps.get(Capability.BINARY) || new Binary();
	    caps.delete(Capability.BINARY);
	    if (typeof binary === 'string') {
	      binary = new Binary(binary);
	    }

	    let profile;
	    if (caps.has(Capability.PROFILE)) {
	      profile = caps.get(Capability.PROFILE);
	      caps.delete(Capability.PROFILE);
	    }

	    // Users must now explicitly disable marionette to use the legacy
	    // FirefoxDriver.
	    let noMarionette =
	        caps.get(Capability.MARIONETTE) === false
	            || /^0|false$/i.test(process.env['SELENIUM_MARIONETTE']);
	    let useMarionette = !noMarionette;

	    let spec;
	    if (useMarionette) {
	      spec = createGeckoDriver(opt_executor, caps, profile, binary);
	    } else {
	      if (opt_executor) {
	        throw Error('You may not use a custom command executor with the legacy'
	            + ' FirefoxDriver');
	      }
	      spec = createLegacyDriver(caps, profile, binary, opt_flow);
	    }

	    return /** @type {!Driver} */(webdriver.WebDriver.createSession(
	        spec.executor, spec.capabilities, opt_flow, this, spec.onQuit));
	  }

	  /**
	   * This function is a no-op as file detectors are not supported by this
	   * implementation.
	   * @override
	   */
	  setFileDetector() {
	  }

	  /**
	   * Get the context that is currently in effect.
	   *
	   * @return {!promise.Thenable<Context>} Current context.
	   */
	  getContext() {
	    return this.schedule(
	        new command.Command(ExtensionCommand.GET_CONTEXT),
	        'get WebDriver.context');
	  }

	  /**
	   * Changes target context for commands between chrome- and content.
	   *
	   * Changing the current context has a stateful impact on all subsequent
	   * commands. The {@link Context.CONTENT} context has normal web
	   * platform document permissions, as if you would evaluate arbitrary
	   * JavaScript. The {@link Context.CHROME} context gets elevated
	   * permissions that lets you manipulate the browser chrome itself,
	   * with full access to the XUL toolkit.
	   *
	   * Use your powers wisely.
	   *
	   * @param {!promise.Thenable<void>} ctx The context to switch to.
	   */
	  setContext(ctx) {
	    return this.schedule(
	        new command.Command(ExtensionCommand.SET_CONTEXT)
	            .setParameter("context", ctx),
	        'set WebDriver.context');
	  }
	}


	// PUBLIC API


	exports.Binary = Binary;
	exports.Context = Context;
	exports.Driver = Driver;
	exports.Options = Options;
	exports.Profile = Profile;
	exports.ServiceBuilder = ServiceBuilder;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname, process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Manages Firefox binaries. This module is considered internal;
	 * users should use {@link ./firefox selenium-webdriver/firefox}.
	 */

	'use strict';

	const child = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"child_process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    path = __webpack_require__(61),
	    util = __webpack_require__(12);

	const isDevMode = __webpack_require__(63),
	    Symbols = __webpack_require__(70),
	    io = __webpack_require__(75),
	    exec = __webpack_require__(151);



	/** @const */
	const NO_FOCUS_LIB_X86 = isDevMode ?
	    path.join(__dirname, '../../../../cpp/prebuilt/i386/libnoblur.so') :
	    path.join(__dirname, '../lib/firefox/i386/libnoblur.so') ;

	/** @const */
	const NO_FOCUS_LIB_AMD64 = isDevMode ?
	    path.join(__dirname, '../../../../cpp/prebuilt/amd64/libnoblur64.so') :
	    path.join(__dirname, '../lib/firefox/amd64/libnoblur64.so') ;

	const X_IGNORE_NO_FOCUS_LIB = 'x_ignore_nofocus.so';


	let foundBinary = null;
	let foundDevBinary = null;


	/**
	 * Checks the default Windows Firefox locations in Program Files.
	 *
	 * @param {boolean=} opt_dev Whether to find the Developer Edition.
	 * @return {!Promise<?string>} A promise for the located executable.
	 *     The promise will resolve to {@code null} if Firefox was not found.
	 */
	function defaultWindowsLocation(opt_dev) {
	  var files = [
	    process.env['PROGRAMFILES'] || 'C:\\Program Files',
	    process.env['PROGRAMFILES(X86)'] || 'C:\\Program Files (x86)'
	  ].map(function(prefix) {
	    if (opt_dev) {
	      return path.join(prefix, 'Firefox Developer Edition\\firefox.exe');
	    }
	    return path.join(prefix, 'Mozilla Firefox\\firefox.exe');
	  });
	  return io.exists(files[0]).then(function(exists) {
	    return exists ? files[0] : io.exists(files[1]).then(function(exists) {
	      return exists ? files[1] : null;
	    });
	  });
	}


	/**
	 * Locates the Firefox binary for the current system.
	 *
	 * @param {boolean=} opt_dev Whether to find the Developer Edition. This only
	 *     used on Windows and OSX.
	 * @return {!Promise<string>} A promise for the located binary. The promise will
	 *     be rejected if Firefox cannot be located.
	 */
	function findFirefox(opt_dev) {
	  if (opt_dev && foundDevBinary) {
	    return foundDevBinary;
	  }

	  if (!opt_dev && foundBinary) {
	    return foundBinary;
	  }

	  let found;
	  if (process.platform === 'darwin') {
	    let exe = opt_dev
	        ? '/Applications/FirefoxDeveloperEdition.app/Contents/MacOS/firefox-bin'
	        : '/Applications/Firefox.app/Contents/MacOS/firefox-bin';
	    found = io.exists(exe).then(exists => exists ? exe : null);

	  } else if (process.platform === 'win32') {
	    found = defaultWindowsLocation(opt_dev);

	  } else {
	    found = Promise.resolve(io.findInPath('firefox'));
	  }

	  found = found.then(found => {
	    if (found) {
	      return found;
	    }
	    throw Error('Could not locate Firefox on the current system');
	  });

	  if (opt_dev) {
	    return foundDevBinary = found;
	  } else {
	    return foundBinary = found;
	  }
	}


	/**
	 * Copies the no focus libs into the given profile directory.
	 * @param {string} profileDir Path to the profile directory to install into.
	 * @return {!Promise<string>} The LD_LIBRARY_PATH prefix string to use
	 *     for the installed libs.
	 */
	function installNoFocusLibs(profileDir) {
	  var x86 = path.join(profileDir, 'x86');
	  var amd64 = path.join(profileDir, 'amd64');

	  return io.mkdir(x86)
	      .then(() => copyLib(NO_FOCUS_LIB_X86, x86))
	      .then(() => io.mkdir(amd64))
	      .then(() => copyLib(NO_FOCUS_LIB_AMD64, amd64))
	      .then(function() {
	        return x86 + ':' + amd64;
	      });

	  function copyLib(src, dir) {
	    return io.copy(src, path.join(dir, X_IGNORE_NO_FOCUS_LIB));
	  }
	}


	/**
	 * Provides a mechanism to configure and launch Firefox in a subprocess for
	 * use with WebDriver.
	 *
	 * If created _without_ a path for the Firefox binary to use, this class will
	 * attempt to find Firefox when {@link #launch()} is called. For OSX and
	 * Windows, this class will look for Firefox in the current platform's default
	 * installation location (e.g. /Applications/Firefox.app on OSX). For all other
	 * platforms, the Firefox executable must be available on your system `PATH`.
	 *
	 * @final
	 */
	class Binary {
	  /**
	   * @param {string=} opt_exe Path to the Firefox binary to use.
	   */
	  constructor(opt_exe) {
	    /** @private {(string|undefined)} */
	    this.exe_ = opt_exe;

	    /** @private {!Array.<string>} */
	    this.args_ = [];

	    /** @private {!Object<string, string>} */
	    this.env_ = {};
	    Object.assign(this.env_, process.env, {
	      MOZ_CRASHREPORTER_DISABLE: '1',
	      MOZ_NO_REMOTE: '1',
	      NO_EM_RESTART: '1'
	    });

	    /** @private {boolean} */
	    this.devEdition_ = false;
	  }

	  /**
	   * @return {(string|undefined)} The path to the Firefox executable to use, or
	   *     `undefined` if WebDriver should attempt to locate Firefox automatically
	   *     on the current system.
	   */
	  getExe() {
	    return this.exe_;
	  }

	  /**
	   * Add arguments to the command line used to start Firefox.
	   * @param {...(string|!Array.<string>)} var_args Either the arguments to add
	   *     as varargs, or the arguments as an array.
	   */
	  addArguments(var_args) {
	    for (var i = 0; i < arguments.length; i++) {
	      if (Array.isArray(arguments[i])) {
	        this.args_ = this.args_.concat(arguments[i]);
	      } else {
	        this.args_.push(arguments[i]);
	      }
	    }
	  }

	  /**
	   * @return {!Array<string>} The command line arguments to use when starting
	   *     the browser.
	   */
	  getArguments() {
	    return this.args_;
	  }

	  /**
	   * Specifies whether to use Firefox Developer Edition instead of the normal
	   * stable channel. Setting this option has no effect if this instance was
	   * created with a path to a specific Firefox binary.
	   *
	   * This method has no effect on Unix systems where the Firefox application
	   * has the same (default) name regardless of version.
	   *
	   * @param {boolean=} opt_use Whether to use the developer edition. Defaults to
	   *     true.
	   */
	  useDevEdition(opt_use) {
	    this.devEdition_ = opt_use === undefined || !!opt_use;
	  }

	  /**
	   * Returns a promise for the Firefox executable used by this instance. The
	   * returned promise will be immediately resolved if the user supplied an
	   * executable path when this instance was created. Otherwise, an attempt will
	   * be made to find Firefox on the current system.
	   *
	   * @return {!Promise<string>} a promise for the path to the Firefox executable
	   *     used by this instance.
	   */
	  locate() {
	    return Promise.resolve(this.exe_ || findFirefox(this.devEdition_));
	  }

	  /**
	   * Launches Firefox and returns a promise that will be fulfilled when the
	   * process terminates.
	   * @param {string} profile Path to the profile directory to use.
	   * @return {!Promise<!exec.Command>} A promise for the handle to the started
	   *     subprocess.
	   */
	  launch(profile) {
	    let env = {};
	    Object.assign(env, this.env_, {XRE_PROFILE_PATH: profile});

	    let args = ['-foreground'].concat(this.args_);

	    return this.locate().then(function(firefox) {
	      if (process.platform === 'win32' || process.platform === 'darwin') {
	        return exec(firefox, {args: args, env: env});
	      }
	      return installNoFocusLibs(profile).then(function(ldLibraryPath) {
	        env['LD_LIBRARY_PATH'] = ldLibraryPath + ':' + env['LD_LIBRARY_PATH'];
	        env['LD_PRELOAD'] = X_IGNORE_NO_FOCUS_LIB;
	        return exec(firefox, {args: args, env: env});
	      });
	    });
	  }

	  /**
	   * Returns a promise for the wire representation of this binary. Note: the
	   * FirefoxDriver only supports passing the path to the binary executable over
	   * the wire; all command line arguments and environment variables will be
	   * discarded.
	   *
	   * @return {!Promise<string>} A promise for this binary's wire representation.
	   */
	  [Symbols.serialize]() {
	    return this.locate();
	  }
	}


	// PUBLIC API


	exports.Binary = Binary;


	/* WEBPACK VAR INJECTION */}.call(exports, "/", __webpack_require__(13)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname, Buffer) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Profile management module. This module is considered internal;
	 * users should use {@link selenium-webdriver/firefox}.
	 */

	'use strict';

	const AdmZip = __webpack_require__(123),
	    fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    path = __webpack_require__(61),
	    vm = __webpack_require__(158);

	const isDevMode = __webpack_require__(63),
	    Symbols = __webpack_require__(70),
	    io = __webpack_require__(75),
	    extension = __webpack_require__(160);


	/** @const */
	const WEBDRIVER_PREFERENCES_PATH = isDevMode
	    ? path.join(__dirname, '../../../firefox-driver/webdriver.json')
	    : path.join(__dirname, '../lib/firefox/webdriver.json');

	/** @const */
	const WEBDRIVER_EXTENSION_PATH = isDevMode
	    ? path.join(__dirname,
	        '../../../../build/javascript/firefox-driver/webdriver.xpi')
	    : path.join(__dirname, '../lib/firefox/webdriver.xpi');

	/** @const */
	const WEBDRIVER_EXTENSION_NAME = 'fxdriver@googlecode.com';



	/** @type {Object} */
	var defaultPreferences = null;

	/**
	 * Synchronously loads the default preferences used for the FirefoxDriver.
	 * @return {!Object} The default preferences JSON object.
	 */
	function getDefaultPreferences() {
	  if (!defaultPreferences) {
	    var contents = /** @type {string} */(
	        fs.readFileSync(WEBDRIVER_PREFERENCES_PATH, 'utf8'));
	    defaultPreferences = /** @type {!Object} */(JSON.parse(contents));
	  }
	  return defaultPreferences;
	}


	/**
	 * Parses a user.js file in a Firefox profile directory.
	 * @param {string} f Path to the file to parse.
	 * @return {!Promise<!Object>} A promise for the parsed preferences as
	 *     a JSON object. If the file does not exist, an empty object will be
	 *     returned.
	 */
	function loadUserPrefs(f) {
	  return io.read(f).then(
	      function onSuccess(contents) {
	        var prefs = {};
	        var context = vm.createContext({
	          'user_pref': function(key, value) {
	            prefs[key] = value;
	          }
	        });
	        vm.runInContext(contents.toString(), context, f);
	        return prefs;
	      },
	      function onError(err) {
	        if (err && err.code === 'ENOENT') {
	          return {};
	        }
	        throw err;
	      });
	}



	/**
	 * @param {!Object} prefs The default preferences to write. Will be
	 *     overridden by user.js preferences in the template directory and the
	 *     frozen preferences required by WebDriver.
	 * @param {string} dir Path to the directory write the file to.
	 * @return {!Promise<string>} A promise for the profile directory,
	 *     to be fulfilled when user preferences have been written.
	 */
	function writeUserPrefs(prefs, dir) {
	  var userPrefs = path.join(dir, 'user.js');
	  return loadUserPrefs(userPrefs).then(function(overrides) {
	    Object.assign(prefs, overrides);
	    Object.assign(prefs, getDefaultPreferences()['frozen']);

	    var contents = Object.keys(prefs).map(function(key) {
	      return 'user_pref(' + JSON.stringify(key) + ', ' +
	          JSON.stringify(prefs[key]) + ');';
	    }).join('\n');

	    return new Promise((resolve, reject) => {
	      fs.writeFile(userPrefs, contents, function(err) {
	        err && reject(err) || resolve(dir);
	      });
	    });
	  });
	};


	/**
	 * Installs a group of extensions in the given profile directory. If the
	 * WebDriver extension is not included in this set, the default version
	 * bundled with this package will be installed.
	 * @param {!Array.<string>} extensions The extensions to install, as a
	 *     path to an unpacked extension directory or a path to a xpi file.
	 * @param {string} dir The profile directory to install to.
	 * @param {boolean=} opt_excludeWebDriverExt Whether to skip installation of
	 *     the default WebDriver extension.
	 * @return {!Promise<string>} A promise for the main profile directory
	 *     once all extensions have been installed.
	 */
	function installExtensions(extensions, dir, opt_excludeWebDriverExt) {
	  var hasWebDriver = !!opt_excludeWebDriverExt;
	  var next = 0;
	  var extensionDir = path.join(dir, 'extensions');

	  return new Promise(function(fulfill, reject) {
	    io.mkdir(extensionDir).then(installNext, reject);

	    function installNext() {
	      if (next >= extensions.length) {
	        if (hasWebDriver) {
	          fulfill(dir);
	        } else {
	          install(WEBDRIVER_EXTENSION_PATH);
	        }
	      } else {
	        install(extensions[next++]);
	      }
	    }

	    function install(ext) {
	      extension.install(ext, extensionDir).then(function(id) {
	        hasWebDriver = hasWebDriver || (id === WEBDRIVER_EXTENSION_NAME);
	        installNext();
	      }, reject);
	    }
	  });
	}


	/**
	 * Decodes a base64 encoded profile.
	 * @param {string} data The base64 encoded string.
	 * @return {!Promise<string>} A promise for the path to the decoded profile
	 *     directory.
	 */
	function decode(data) {
	  return io.tmpFile().then(function(file) {
	    var buf = new Buffer(data, 'base64');
	    return io.write(file, buf)
	        .then(io.tmpDir)
	        .then(function(dir) {
	          var zip = new AdmZip(file);
	          zip.extractAllTo(dir);  // Sync only? Why?? :-(
	          return dir;
	        });
	  });
	}



	/**
	 * Models a Firefox profile directory for use with the FirefoxDriver. The
	 * {@code Profile} directory uses an in-memory model until
	 * {@link #writeToDisk} or {@link #encode} is called.
	 */
	class Profile {
	  /**
	   * @param {string=} opt_dir Path to an existing Firefox profile directory to
	   *     use a template for this profile. If not specified, a blank profile will
	   *     be used.
	   */
	  constructor(opt_dir) {
	    /** @private {!Object} */
	    this.preferences_ = {};

	    /** @private {boolean} */
	    this.nativeEventsEnabled_ = true;

	    /** @private {(string|undefined)} */
	    this.template_ = opt_dir;

	    /** @private {number} */
	    this.port_ = 0;

	    /** @private {!Array<string>} */
	    this.extensions_ = [];
	  }

	  /**
	   * @return {(string|undefined)} Path to an existing Firefox profile directory
	   *     to use as a template when writing this Profile to disk.
	   */
	  getTemplateDir() {
	    return this.template_;
	  }

	  /**
	   * Registers an extension to be included with this profile.
	   * @param {string} extension Path to the extension to include, as either an
	   *     unpacked extension directory or the path to a xpi file.
	   */
	  addExtension(extension) {
	    this.extensions_.push(extension);
	  }

	  /**
	   * @return {!Array<string>} A list of extensions to install in this profile.
	   */
	  getExtensions() {
	    return this.extensions_;
	  }

	  /**
	   * Sets a desired preference for this profile.
	   * @param {string} key The preference key.
	   * @param {(string|number|boolean)} value The preference value.
	   * @throws {Error} If attempting to set a frozen preference.
	   */
	  setPreference(key, value) {
	    var frozen = getDefaultPreferences()['frozen'];
	    if (frozen.hasOwnProperty(key) && frozen[key] !== value) {
	      throw Error('You may not set ' + key + '=' + JSON.stringify(value)
	          + '; value is frozen for proper WebDriver functionality ('
	          + key + '=' + JSON.stringify(frozen[key]) + ')');
	    }
	    this.preferences_[key] = value;
	  }

	  /**
	   * Returns the currently configured value of a profile preference. This does
	   * not include any defaults defined in the profile's template directory user.js
	   * file (if a template were specified on construction).
	   * @param {string} key The desired preference.
	   * @return {(string|number|boolean|undefined)} The current value of the
	   *     requested preference.
	   */
	  getPreference(key) {
	    return this.preferences_[key];
	  }

	  /**
	   * @return {!Object} A copy of all currently configured preferences.
	   */
	  getPreferences() {
	    return Object.assign({}, this.preferences_);
	  }

	  /**
	   * Specifies which host the driver should listen for commands on. If not
	   * specified, the driver will default to "localhost". This option should be
	   * specified when "localhost" is not mapped to the loopback address
	   * (127.0.0.1) in `/etc/hosts`.
	   *
	   * @param {string} host the host the driver should listen for commands on
	   */
	  setHost(host) {
	    this.preferences_['webdriver_firefox_allowed_hosts'] = host;
	  }

	  /**
	   * @return {number} The port this profile is currently configured to use, or
	   *     0 if the port will be selected at random when the profile is written
	   *     to disk.
	   */
	  getPort() {
	    return this.port_;
	  }

	  /**
	   * Sets the port to use for the WebDriver extension loaded by this profile.
	   * @param {number} port The desired port, or 0 to use any free port.
	   */
	  setPort(port) {
	    this.port_ = port;
	  }

	  /**
	   * @return {boolean} Whether the FirefoxDriver is configured to automatically
	   *     accept untrusted SSL certificates.
	   */
	  acceptUntrustedCerts() {
	    return !!this.preferences_['webdriver_accept_untrusted_certs'];
	  }

	  /**
	   * Sets whether the FirefoxDriver should automatically accept untrusted SSL
	   * certificates.
	   * @param {boolean} value .
	   */
	  setAcceptUntrustedCerts(value) {
	    this.preferences_['webdriver_accept_untrusted_certs'] = !!value;
	  }

	  /**
	   * Sets whether to assume untrusted certificates come from untrusted issuers.
	   * @param {boolean} value .
	   */
	  setAssumeUntrustedCertIssuer(value) {
	    this.preferences_['webdriver_assume_untrusted_issuer'] = !!value;
	  }

	  /**
	   * @return {boolean} Whether to assume untrusted certs come from untrusted
	   *     issuers.
	   */
	  assumeUntrustedCertIssuer() {
	    return !!this.preferences_['webdriver_assume_untrusted_issuer'];
	  }

	  /**
	   * Sets whether to use native events with this profile.
	   * @param {boolean} enabled .
	   */
	  setNativeEventsEnabled(enabled) {
	    this.nativeEventsEnabled_ = enabled;
	  }

	  /**
	   * Returns whether native events are enabled in this profile.
	   * @return {boolean} .
	   */
	  nativeEventsEnabled() {
	    return this.nativeEventsEnabled_;
	  }

	  /**
	   * Writes this profile to disk.
	   * @param {boolean=} opt_excludeWebDriverExt Whether to exclude the WebDriver
	   *     extension from the generated profile. Used to reduce the size of an
	   *     {@link #encode() encoded profile} since the server will always install
	   *     the extension itself.
	   * @return {!Promise<string>} A promise for the path to the new profile
	   *     directory.
	   */
	  writeToDisk(opt_excludeWebDriverExt) {
	    var profileDir = io.tmpDir();
	    if (this.template_) {
	      profileDir = profileDir.then(function(dir) {
	        return io.copyDir(
	            /** @type {string} */(this.template_),
	            dir, /(parent\.lock|lock|\.parentlock)/);
	      }.bind(this));
	    }

	    // Freeze preferences for async operations.
	    var prefs = {};
	    Object.assign(prefs, getDefaultPreferences()['mutable']);
	    Object.assign(prefs, getDefaultPreferences()['frozen']);
	    Object.assign(prefs, this.preferences_);

	    // Freeze extensions for async operations.
	    var extensions = this.extensions_.concat();

	    return profileDir.then(function(dir) {
	      return writeUserPrefs(prefs, dir);
	    }).then(function(dir) {
	      return installExtensions(extensions, dir, !!opt_excludeWebDriverExt);
	    });
	  }

	  /**
	   * Write profile to disk, compress its containing directory, and return
	   * it as a Base64 encoded string.
	   *
	   * @return {!Promise<string>} A promise for the encoded profile as
	   *     Base64 string.
	   *
	   */
	  encode() {
	    return this.writeToDisk(true).then(function(dir) {
	      var zip = new AdmZip();
	      zip.addLocalFolder(dir, '');
	      // Stored compression, see https://en.wikipedia.org/wiki/Zip_(file_format)
	      zip.getEntries().forEach(function(entry) {
	        entry.header.method = 0;
	      });

	      return io.tmpFile().then(function(file) {
	        zip.writeZip(file);  // Sync! Why oh why :-(
	        return io.read(file);
	      });
	    }).then(function(data) {
	      return data.toString('base64');
	    });
	  }

	  /**
	   * Encodes this profile as a zipped, base64 encoded directory.
	   * @return {!Promise<string>} A promise for the encoded profile.
	   */
	  [Symbols.serialize]() {
	    return this.encode();
	  }
	}


	// PUBLIC API


	exports.Profile = Profile;
	exports.decode = decode;
	exports.loadUserPrefs = loadUserPrefs;

	/* WEBPACK VAR INJECTION */}.call(exports, "/", __webpack_require__(18).Buffer))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var indexOf = __webpack_require__(159);

	var Object_keys = function (obj) {
	    if (Object.keys) return Object.keys(obj)
	    else {
	        var res = [];
	        for (var key in obj) res.push(key)
	        return res;
	    }
	};

	var forEach = function (xs, fn) {
	    if (xs.forEach) return xs.forEach(fn)
	    else for (var i = 0; i < xs.length; i++) {
	        fn(xs[i], i, xs);
	    }
	};

	var defineProp = (function() {
	    try {
	        Object.defineProperty({}, '_', {});
	        return function(obj, name, value) {
	            Object.defineProperty(obj, name, {
	                writable: true,
	                enumerable: false,
	                configurable: true,
	                value: value
	            })
	        };
	    } catch(e) {
	        return function(obj, name, value) {
	            obj[name] = value;
	        };
	    }
	}());

	var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
	'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
	'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
	'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
	'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

	function Context() {}
	Context.prototype = {};

	var Script = exports.Script = function NodeScript (code) {
	    if (!(this instanceof Script)) return new Script(code);
	    this.code = code;
	};

	Script.prototype.runInContext = function (context) {
	    if (!(context instanceof Context)) {
	        throw new TypeError("needs a 'context' argument.");
	    }
	    
	    var iframe = document.createElement('iframe');
	    if (!iframe.style) iframe.style = {};
	    iframe.style.display = 'none';
	    
	    document.body.appendChild(iframe);
	    
	    var win = iframe.contentWindow;
	    var wEval = win.eval, wExecScript = win.execScript;

	    if (!wEval && wExecScript) {
	        // win.eval() magically appears when this is called in IE:
	        wExecScript.call(win, 'null');
	        wEval = win.eval;
	    }
	    
	    forEach(Object_keys(context), function (key) {
	        win[key] = context[key];
	    });
	    forEach(globals, function (key) {
	        if (context[key]) {
	            win[key] = context[key];
	        }
	    });
	    
	    var winKeys = Object_keys(win);

	    var res = wEval.call(win, this.code);
	    
	    forEach(Object_keys(win), function (key) {
	        // Avoid copying circular objects like `top` and `window` by only
	        // updating existing context properties or new properties in the `win`
	        // that was only introduced after the eval.
	        if (key in context || indexOf(winKeys, key) === -1) {
	            context[key] = win[key];
	        }
	    });

	    forEach(globals, function (key) {
	        if (!(key in context)) {
	            defineProp(context, key, win[key]);
	        }
	    });
	    
	    document.body.removeChild(iframe);
	    
	    return res;
	};

	Script.prototype.runInThisContext = function () {
	    return eval(this.code); // maybe...
	};

	Script.prototype.runInNewContext = function (context) {
	    var ctx = Script.createContext(context);
	    var res = this.runInContext(ctx);

	    forEach(Object_keys(ctx), function (key) {
	        context[key] = ctx[key];
	    });

	    return res;
	};

	forEach(Object_keys(Script.prototype), function (name) {
	    exports[name] = Script[name] = function (code) {
	        var s = Script(code);
	        return s[name].apply(s, [].slice.call(arguments, 1));
	    };
	});

	exports.createScript = function (code) {
	    return exports.Script(code);
	};

	exports.createContext = Script.createContext = function (context) {
	    var copy = new Context();
	    if(typeof context === 'object') {
	        forEach(Object_keys(context), function (key) {
	            copy[key] = context[key];
	        });
	    }
	    return copy;
	};


/***/ },
/* 159 */
/***/ function(module, exports) {

	
	var indexOf = [].indexOf;

	module.exports = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/** @fileoverview Utilities for working with Firefox extensions. */

	'use strict';

	const AdmZip = __webpack_require__(123),
	    fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    path = __webpack_require__(61),
	    xml = __webpack_require__(161);

	const io = __webpack_require__(75);


	/**
	 * Thrown when there an add-on is malformed.
	 */
	class AddonFormatError extends Error {
	  /** @param {string} msg The error message. */
	  constructor(msg) {
	    super(msg);
	    /** @override */
	    this.name = this.constructor.name;
	  }
	}



	/**
	 * Installs an extension to the given directory.
	 * @param {string} extension Path to the extension to install, as either a xpi
	 *     file or a directory.
	 * @param {string} dir Path to the directory to install the extension in.
	 * @return {!Promise<string>} A promise for the add-on ID once
	 *     installed.
	 */
	function install(extension, dir) {
	  return getDetails(extension).then(function(details) {
	    var dst = path.join(dir, details.id);
	    if (extension.slice(-4) === '.xpi') {
	      if (!details.unpack) {
	        return io.copy(extension, dst + '.xpi').then(() => details.id);
	      } else {
	        return Promise.resolve().then(function() {
	          // TODO: find an async library for inflating a zip archive.
	          new AdmZip(extension).extractAllTo(dst, true);
	          return details.id;
	        });
	      }
	    } else {
	      return io.copyDir(extension, dst).then(() => details.id);
	    }
	  });
	}


	/**
	 * Describes a Firefox add-on.
	 * @typedef {{id: string, name: string, version: string, unpack: boolean}}
	 */
	var AddonDetails;

	/** @typedef {{$: !Object<string, string>}} */
	var RdfRoot;



	/**
	 * Extracts the details needed to install an add-on.
	 * @param {string} addonPath Path to the extension directory.
	 * @return {!Promise<!AddonDetails>} A promise for the add-on details.
	 */
	function getDetails(addonPath) {
	  return readManifest(addonPath).then(function(doc) {
	    var em = getNamespaceId(doc, 'http://www.mozilla.org/2004/em-rdf#');
	    var rdf = getNamespaceId(
	        doc, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');

	    var description = doc[rdf + 'RDF'][rdf + 'Description'][0];
	    var details = {
	      id: getNodeText(description, em + 'id'),
	      name: getNodeText(description, em + 'name'),
	      version: getNodeText(description, em + 'version'),
	      unpack: getNodeText(description, em + 'unpack') || false
	    };

	    if (typeof details.unpack === 'string') {
	      details.unpack = details.unpack.toLowerCase() === 'true';
	    }

	    if (!details.id) {
	      throw new AddonFormatError('Could not find add-on ID for ' + addonPath);
	    }

	    return details;
	  });

	  function getNodeText(node, name) {
	    return node[name] && node[name][0] || '';
	  }

	  function getNamespaceId(doc, url) {
	    var keys = Object.keys(doc);
	    if (keys.length !== 1) {
	      throw new AddonFormatError('Malformed manifest for add-on ' + addonPath);
	    }

	    var namespaces = /** @type {!RdfRoot} */(doc[keys[0]]).$;
	    var id = '';
	    Object.keys(namespaces).some(function(ns) {
	      if (namespaces[ns] !== url) {
	        return false;
	      }

	      if (ns.indexOf(':') != -1) {
	        id = ns.split(':')[1] + ':';
	      }
	      return true;
	    });
	    return id;
	  }
	}


	/**
	 * Reads the manifest for a Firefox add-on.
	 * @param {string} addonPath Path to a Firefox add-on as a xpi or an extension.
	 * @return {!Promise<!Object>} A promise for the parsed manifest.
	 */
	function readManifest(addonPath) {
	  var manifest;

	  if (addonPath.slice(-4) === '.xpi') {
	    manifest = new Promise((resolve, reject) => {
	      let zip = new AdmZip(addonPath);

	      if (!zip.getEntry('install.rdf')) {
	        reject(new AddonFormatError(
	            'Could not find install.rdf in ' + addonPath));
	        return;
	      }

	      zip.readAsTextAsync('install.rdf', resolve);
	    });
	  } else {
	    manifest = io.stat(addonPath).then(function(stats) {
	      if (!stats.isDirectory()) {
	        throw Error(
	            'Add-on path is niether a xpi nor a directory: ' + addonPath);
	      }
	      return io.read(path.join(addonPath, 'install.rdf'));
	    });
	  }

	  return manifest.then(function(content) {
	    return new Promise((resolve, reject) => {
	      xml.parseString(content, (err, data) => {
	        if (err) {
	          reject(err);
	        } else {
	          resolve(data);
	        }
	      });
	    });
	  });
	}


	// PUBLIC API


	exports.install = install;


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  "use strict";
	  var bom, builder, escapeCDATA, events, isEmpty, processName, processors, requiresCDATA, sax, setImmediate, wrapCDATA,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty,
	    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	  sax = __webpack_require__(162);

	  events = __webpack_require__(30);

	  builder = __webpack_require__(163);

	  bom = __webpack_require__(320);

	  processors = __webpack_require__(321);

	  setImmediate = __webpack_require__(33).setImmediate;

	  isEmpty = function(thing) {
	    return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
	  };

	  processName = function(processors, processedName) {
	    var i, len, process;
	    for (i = 0, len = processors.length; i < len; i++) {
	      process = processors[i];
	      processedName = process(processedName);
	    }
	    return processedName;
	  };

	  requiresCDATA = function(entry) {
	    return entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0;
	  };

	  wrapCDATA = function(entry) {
	    return "<![CDATA[" + (escapeCDATA(entry)) + "]]>";
	  };

	  escapeCDATA = function(entry) {
	    return entry.replace(']]>', ']]]]><![CDATA[>');
	  };

	  exports.processors = processors;

	  exports.defaults = {
	    "0.1": {
	      explicitCharkey: false,
	      trim: true,
	      normalize: true,
	      normalizeTags: false,
	      attrkey: "@",
	      charkey: "#",
	      explicitArray: false,
	      ignoreAttrs: false,
	      mergeAttrs: false,
	      explicitRoot: false,
	      validator: null,
	      xmlns: false,
	      explicitChildren: false,
	      childkey: '@@',
	      charsAsChildren: false,
	      includeWhiteChars: false,
	      async: false,
	      strict: true,
	      attrNameProcessors: null,
	      attrValueProcessors: null,
	      tagNameProcessors: null,
	      valueProcessors: null,
	      emptyTag: ''
	    },
	    "0.2": {
	      explicitCharkey: false,
	      trim: false,
	      normalize: false,
	      normalizeTags: false,
	      attrkey: "$",
	      charkey: "_",
	      explicitArray: true,
	      ignoreAttrs: false,
	      mergeAttrs: false,
	      explicitRoot: true,
	      validator: null,
	      xmlns: false,
	      explicitChildren: false,
	      preserveChildrenOrder: false,
	      childkey: '$$',
	      charsAsChildren: false,
	      includeWhiteChars: false,
	      async: false,
	      strict: true,
	      attrNameProcessors: null,
	      attrValueProcessors: null,
	      tagNameProcessors: null,
	      valueProcessors: null,
	      rootName: 'root',
	      xmldec: {
	        'version': '1.0',
	        'encoding': 'UTF-8',
	        'standalone': true
	      },
	      doctype: null,
	      renderOpts: {
	        'pretty': true,
	        'indent': '  ',
	        'newline': '\n'
	      },
	      headless: false,
	      chunkSize: 10000,
	      emptyTag: '',
	      cdata: false
	    }
	  };

	  exports.ValidationError = (function(superClass) {
	    extend(ValidationError, superClass);

	    function ValidationError(message) {
	      this.message = message;
	    }

	    return ValidationError;

	  })(Error);

	  exports.Builder = (function() {
	    function Builder(opts) {
	      var key, ref, value;
	      this.options = {};
	      ref = exports.defaults["0.2"];
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this.options[key] = value;
	      }
	      for (key in opts) {
	        if (!hasProp.call(opts, key)) continue;
	        value = opts[key];
	        this.options[key] = value;
	      }
	    }

	    Builder.prototype.buildObject = function(rootObj) {
	      var attrkey, charkey, render, rootElement, rootName;
	      attrkey = this.options.attrkey;
	      charkey = this.options.charkey;
	      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === exports.defaults['0.2'].rootName)) {
	        rootName = Object.keys(rootObj)[0];
	        rootObj = rootObj[rootName];
	      } else {
	        rootName = this.options.rootName;
	      }
	      render = (function(_this) {
	        return function(element, obj) {
	          var attr, child, entry, index, key, value;
	          if (typeof obj !== 'object') {
	            if (_this.options.cdata && requiresCDATA(obj)) {
	              element.raw(wrapCDATA(obj));
	            } else {
	              element.txt(obj);
	            }
	          } else {
	            for (key in obj) {
	              if (!hasProp.call(obj, key)) continue;
	              child = obj[key];
	              if (key === attrkey) {
	                if (typeof child === "object") {
	                  for (attr in child) {
	                    value = child[attr];
	                    element = element.att(attr, value);
	                  }
	                }
	              } else if (key === charkey) {
	                if (_this.options.cdata && requiresCDATA(child)) {
	                  element = element.raw(wrapCDATA(child));
	                } else {
	                  element = element.txt(child);
	                }
	              } else if (Array.isArray(child)) {
	                for (index in child) {
	                  if (!hasProp.call(child, index)) continue;
	                  entry = child[index];
	                  if (typeof entry === 'string') {
	                    if (_this.options.cdata && requiresCDATA(entry)) {
	                      element = element.ele(key).raw(wrapCDATA(entry)).up();
	                    } else {
	                      element = element.ele(key, entry).up();
	                    }
	                  } else {
	                    element = render(element.ele(key), entry).up();
	                  }
	                }
	              } else if (typeof child === "object") {
	                element = render(element.ele(key), child).up();
	              } else {
	                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
	                  element = element.ele(key).raw(wrapCDATA(child)).up();
	                } else {
	                  if (child == null) {
	                    child = '';
	                  }
	                  element = element.ele(key, child.toString()).up();
	                }
	              }
	            }
	          }
	          return element;
	        };
	      })(this);
	      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
	        headless: this.options.headless,
	        allowSurrogateChars: this.options.allowSurrogateChars
	      });
	      return render(rootElement, rootObj).end(this.options.renderOpts);
	    };

	    return Builder;

	  })();

	  exports.Parser = (function(superClass) {
	    extend(Parser, superClass);

	    function Parser(opts) {
	      this.parseString = bind(this.parseString, this);
	      this.reset = bind(this.reset, this);
	      this.assignOrPush = bind(this.assignOrPush, this);
	      this.processAsync = bind(this.processAsync, this);
	      var key, ref, value;
	      if (!(this instanceof exports.Parser)) {
	        return new exports.Parser(opts);
	      }
	      this.options = {};
	      ref = exports.defaults["0.2"];
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this.options[key] = value;
	      }
	      for (key in opts) {
	        if (!hasProp.call(opts, key)) continue;
	        value = opts[key];
	        this.options[key] = value;
	      }
	      if (this.options.xmlns) {
	        this.options.xmlnskey = this.options.attrkey + "ns";
	      }
	      if (this.options.normalizeTags) {
	        if (!this.options.tagNameProcessors) {
	          this.options.tagNameProcessors = [];
	        }
	        this.options.tagNameProcessors.unshift(processors.normalize);
	      }
	      this.reset();
	    }

	    Parser.prototype.processAsync = function() {
	      var chunk, err, error1;
	      try {
	        if (this.remaining.length <= this.options.chunkSize) {
	          chunk = this.remaining;
	          this.remaining = '';
	          this.saxParser = this.saxParser.write(chunk);
	          return this.saxParser.close();
	        } else {
	          chunk = this.remaining.substr(0, this.options.chunkSize);
	          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
	          this.saxParser = this.saxParser.write(chunk);
	          return setImmediate(this.processAsync);
	        }
	      } catch (error1) {
	        err = error1;
	        if (!this.saxParser.errThrown) {
	          this.saxParser.errThrown = true;
	          return this.emit(err);
	        }
	      }
	    };

	    Parser.prototype.assignOrPush = function(obj, key, newValue) {
	      if (!(key in obj)) {
	        if (!this.options.explicitArray) {
	          return obj[key] = newValue;
	        } else {
	          return obj[key] = [newValue];
	        }
	      } else {
	        if (!(obj[key] instanceof Array)) {
	          obj[key] = [obj[key]];
	        }
	        return obj[key].push(newValue);
	      }
	    };

	    Parser.prototype.reset = function() {
	      var attrkey, charkey, ontext, stack;
	      this.removeAllListeners();
	      this.saxParser = sax.parser(this.options.strict, {
	        trim: false,
	        normalize: false,
	        xmlns: this.options.xmlns
	      });
	      this.saxParser.errThrown = false;
	      this.saxParser.onerror = (function(_this) {
	        return function(error) {
	          _this.saxParser.resume();
	          if (!_this.saxParser.errThrown) {
	            _this.saxParser.errThrown = true;
	            return _this.emit("error", error);
	          }
	        };
	      })(this);
	      this.saxParser.onend = (function(_this) {
	        return function() {
	          if (!_this.saxParser.ended) {
	            _this.saxParser.ended = true;
	            return _this.emit("end", _this.resultObject);
	          }
	        };
	      })(this);
	      this.saxParser.ended = false;
	      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
	      this.resultObject = null;
	      stack = [];
	      attrkey = this.options.attrkey;
	      charkey = this.options.charkey;
	      this.saxParser.onopentag = (function(_this) {
	        return function(node) {
	          var key, newValue, obj, processedKey, ref;
	          obj = {};
	          obj[charkey] = "";
	          if (!_this.options.ignoreAttrs) {
	            ref = node.attributes;
	            for (key in ref) {
	              if (!hasProp.call(ref, key)) continue;
	              if (!(attrkey in obj) && !_this.options.mergeAttrs) {
	                obj[attrkey] = {};
	              }
	              newValue = _this.options.attrValueProcessors ? processName(_this.options.attrValueProcessors, node.attributes[key]) : node.attributes[key];
	              processedKey = _this.options.attrNameProcessors ? processName(_this.options.attrNameProcessors, key) : key;
	              if (_this.options.mergeAttrs) {
	                _this.assignOrPush(obj, processedKey, newValue);
	              } else {
	                obj[attrkey][processedKey] = newValue;
	              }
	            }
	          }
	          obj["#name"] = _this.options.tagNameProcessors ? processName(_this.options.tagNameProcessors, node.name) : node.name;
	          if (_this.options.xmlns) {
	            obj[_this.options.xmlnskey] = {
	              uri: node.uri,
	              local: node.local
	            };
	          }
	          return stack.push(obj);
	        };
	      })(this);
	      this.saxParser.onclosetag = (function(_this) {
	        return function() {
	          var cdata, emptyStr, err, error1, key, node, nodeName, obj, objClone, old, s, xpath;
	          obj = stack.pop();
	          nodeName = obj["#name"];
	          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
	            delete obj["#name"];
	          }
	          if (obj.cdata === true) {
	            cdata = obj.cdata;
	            delete obj.cdata;
	          }
	          s = stack[stack.length - 1];
	          if (obj[charkey].match(/^\s*$/) && !cdata) {
	            emptyStr = obj[charkey];
	            delete obj[charkey];
	          } else {
	            if (_this.options.trim) {
	              obj[charkey] = obj[charkey].trim();
	            }
	            if (_this.options.normalize) {
	              obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
	            }
	            obj[charkey] = _this.options.valueProcessors ? processName(_this.options.valueProcessors, obj[charkey]) : obj[charkey];
	            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
	              obj = obj[charkey];
	            }
	          }
	          if (isEmpty(obj)) {
	            obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
	          }
	          if (_this.options.validator != null) {
	            xpath = "/" + ((function() {
	              var i, len, results;
	              results = [];
	              for (i = 0, len = stack.length; i < len; i++) {
	                node = stack[i];
	                results.push(node["#name"]);
	              }
	              return results;
	            })()).concat(nodeName).join("/");
	            try {
	              obj = _this.options.validator(xpath, s && s[nodeName], obj);
	            } catch (error1) {
	              err = error1;
	              _this.emit("error", err);
	            }
	          }
	          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
	            if (!_this.options.preserveChildrenOrder) {
	              node = {};
	              if (_this.options.attrkey in obj) {
	                node[_this.options.attrkey] = obj[_this.options.attrkey];
	                delete obj[_this.options.attrkey];
	              }
	              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
	                node[_this.options.charkey] = obj[_this.options.charkey];
	                delete obj[_this.options.charkey];
	              }
	              if (Object.getOwnPropertyNames(obj).length > 0) {
	                node[_this.options.childkey] = obj;
	              }
	              obj = node;
	            } else if (s) {
	              s[_this.options.childkey] = s[_this.options.childkey] || [];
	              objClone = {};
	              for (key in obj) {
	                if (!hasProp.call(obj, key)) continue;
	                objClone[key] = obj[key];
	              }
	              s[_this.options.childkey].push(objClone);
	              delete obj["#name"];
	              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
	                obj = obj[charkey];
	              }
	            }
	          }
	          if (stack.length > 0) {
	            return _this.assignOrPush(s, nodeName, obj);
	          } else {
	            if (_this.options.explicitRoot) {
	              old = obj;
	              obj = {};
	              obj[nodeName] = old;
	            }
	            _this.resultObject = obj;
	            _this.saxParser.ended = true;
	            return _this.emit("end", _this.resultObject);
	          }
	        };
	      })(this);
	      ontext = (function(_this) {
	        return function(text) {
	          var charChild, s;
	          s = stack[stack.length - 1];
	          if (s) {
	            s[charkey] += text;
	            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, '').trim() !== '')) {
	              s[_this.options.childkey] = s[_this.options.childkey] || [];
	              charChild = {
	                '#name': '__text__'
	              };
	              charChild[charkey] = text;
	              if (_this.options.normalize) {
	                charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
	              }
	              s[_this.options.childkey].push(charChild);
	            }
	            return s;
	          }
	        };
	      })(this);
	      this.saxParser.ontext = ontext;
	      return this.saxParser.oncdata = (function(_this) {
	        return function(text) {
	          var s;
	          s = ontext(text);
	          if (s) {
	            return s.cdata = true;
	          }
	        };
	      })(this);
	    };

	    Parser.prototype.parseString = function(str, cb) {
	      var err, error1;
	      if ((cb != null) && typeof cb === "function") {
	        this.on("end", function(result) {
	          this.reset();
	          return cb(null, result);
	        });
	        this.on("error", function(err) {
	          this.reset();
	          return cb(err);
	        });
	      }
	      try {
	        str = str.toString();
	        if (str.trim() === '') {
	          this.emit("end", null);
	          return true;
	        }
	        str = bom.stripBOM(str);
	        if (this.options.async) {
	          this.remaining = str;
	          setImmediate(this.processAsync);
	          return this.saxParser;
	        }
	        return this.saxParser.write(str).close();
	      } catch (error1) {
	        err = error1;
	        if (!(this.saxParser.errThrown || this.saxParser.ended)) {
	          this.emit('error', err);
	          return this.saxParser.errThrown = true;
	        } else if (this.saxParser.ended) {
	          throw err;
	        }
	      }
	    };

	    return Parser;

	  })(events.EventEmitter);

	  exports.parseString = function(str, a, b) {
	    var cb, options, parser;
	    if (b != null) {
	      if (typeof b === 'function') {
	        cb = b;
	      }
	      if (typeof a === 'object') {
	        options = a;
	      }
	    } else {
	      if (typeof a === 'function') {
	        cb = a;
	      }
	      options = {};
	    }
	    parser = new exports.Parser(options);
	    return parser.parseString(str, cb);
	  };

	}).call(this);


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {;(function (sax) { // wrapper for non-node envs
	  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
	  sax.SAXParser = SAXParser
	  sax.SAXStream = SAXStream
	  sax.createStream = createStream

	  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
	  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
	  // since that's the earliest that a buffer overrun could occur.  This way, checks are
	  // as rare as required, but as often as necessary to ensure never crossing this bound.
	  // Furthermore, buffers are only tested at most once per write(), so passing a very
	  // large string into write() might have undesirable effects, but this is manageable by
	  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
	  // edge case, result in creating at most one complete copy of the string passed in.
	  // Set to Infinity to have unlimited buffers.
	  sax.MAX_BUFFER_LENGTH = 64 * 1024

	  var buffers = [
	    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
	    'procInstName', 'procInstBody', 'entity', 'attribName',
	    'attribValue', 'cdata', 'script'
	  ]

	  sax.EVENTS = [
	    'text',
	    'processinginstruction',
	    'sgmldeclaration',
	    'doctype',
	    'comment',
	    'opentagstart',
	    'attribute',
	    'opentag',
	    'closetag',
	    'opencdata',
	    'cdata',
	    'closecdata',
	    'error',
	    'end',
	    'ready',
	    'script',
	    'opennamespace',
	    'closenamespace'
	  ]

	  function SAXParser (strict, opt) {
	    if (!(this instanceof SAXParser)) {
	      return new SAXParser(strict, opt)
	    }

	    var parser = this
	    clearBuffers(parser)
	    parser.q = parser.c = ''
	    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
	    parser.opt = opt || {}
	    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
	    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'
	    parser.tags = []
	    parser.closed = parser.closedRoot = parser.sawRoot = false
	    parser.tag = parser.error = null
	    parser.strict = !!strict
	    parser.noscript = !!(strict || parser.opt.noscript)
	    parser.state = S.BEGIN
	    parser.strictEntities = parser.opt.strictEntities
	    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)
	    parser.attribList = []

	    // namespaces form a prototype chain.
	    // it always points at the current tag,
	    // which protos to its parent tag.
	    if (parser.opt.xmlns) {
	      parser.ns = Object.create(rootNS)
	    }

	    // mostly just for error reporting
	    parser.trackPosition = parser.opt.position !== false
	    if (parser.trackPosition) {
	      parser.position = parser.line = parser.column = 0
	    }
	    emit(parser, 'onready')
	  }

	  if (!Object.create) {
	    Object.create = function (o) {
	      function F () {}
	      F.prototype = o
	      var newf = new F()
	      return newf
	    }
	  }

	  if (!Object.keys) {
	    Object.keys = function (o) {
	      var a = []
	      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
	      return a
	    }
	  }

	  function checkBufferLength (parser) {
	    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
	    var maxActual = 0
	    for (var i = 0, l = buffers.length; i < l; i++) {
	      var len = parser[buffers[i]].length
	      if (len > maxAllowed) {
	        // Text/cdata nodes can get big, and since they're buffered,
	        // we can get here under normal conditions.
	        // Avoid issues by emitting the text node now,
	        // so at least it won't get any bigger.
	        switch (buffers[i]) {
	          case 'textNode':
	            closeText(parser)
	            break

	          case 'cdata':
	            emitNode(parser, 'oncdata', parser.cdata)
	            parser.cdata = ''
	            break

	          case 'script':
	            emitNode(parser, 'onscript', parser.script)
	            parser.script = ''
	            break

	          default:
	            error(parser, 'Max buffer length exceeded: ' + buffers[i])
	        }
	      }
	      maxActual = Math.max(maxActual, len)
	    }
	    // schedule the next check for the earliest possible buffer overrun.
	    var m = sax.MAX_BUFFER_LENGTH - maxActual
	    parser.bufferCheckPosition = m + parser.position
	  }

	  function clearBuffers (parser) {
	    for (var i = 0, l = buffers.length; i < l; i++) {
	      parser[buffers[i]] = ''
	    }
	  }

	  function flushBuffers (parser) {
	    closeText(parser)
	    if (parser.cdata !== '') {
	      emitNode(parser, 'oncdata', parser.cdata)
	      parser.cdata = ''
	    }
	    if (parser.script !== '') {
	      emitNode(parser, 'onscript', parser.script)
	      parser.script = ''
	    }
	  }

	  SAXParser.prototype = {
	    end: function () { end(this) },
	    write: write,
	    resume: function () { this.error = null; return this },
	    close: function () { return this.write(null) },
	    flush: function () { flushBuffers(this) }
	  }

	  var Stream
	  try {
	    Stream = __webpack_require__(29).Stream
	  } catch (ex) {
	    Stream = function () {}
	  }

	  var streamWraps = sax.EVENTS.filter(function (ev) {
	    return ev !== 'error' && ev !== 'end'
	  })

	  function createStream (strict, opt) {
	    return new SAXStream(strict, opt)
	  }

	  function SAXStream (strict, opt) {
	    if (!(this instanceof SAXStream)) {
	      return new SAXStream(strict, opt)
	    }

	    Stream.apply(this)

	    this._parser = new SAXParser(strict, opt)
	    this.writable = true
	    this.readable = true

	    var me = this

	    this._parser.onend = function () {
	      me.emit('end')
	    }

	    this._parser.onerror = function (er) {
	      me.emit('error', er)

	      // if didn't throw, then means error was handled.
	      // go ahead and clear error, so we can write again.
	      me._parser.error = null
	    }

	    this._decoder = null

	    streamWraps.forEach(function (ev) {
	      Object.defineProperty(me, 'on' + ev, {
	        get: function () {
	          return me._parser['on' + ev]
	        },
	        set: function (h) {
	          if (!h) {
	            me.removeAllListeners(ev)
	            me._parser['on' + ev] = h
	            return h
	          }
	          me.on(ev, h)
	        },
	        enumerable: true,
	        configurable: false
	      })
	    })
	  }

	  SAXStream.prototype = Object.create(Stream.prototype, {
	    constructor: {
	      value: SAXStream
	    }
	  })

	  SAXStream.prototype.write = function (data) {
	    if (typeof Buffer === 'function' &&
	      typeof Buffer.isBuffer === 'function' &&
	      Buffer.isBuffer(data)) {
	      if (!this._decoder) {
	        var SD = __webpack_require__(43).StringDecoder
	        this._decoder = new SD('utf8')
	      }
	      data = this._decoder.write(data)
	    }

	    this._parser.write(data.toString())
	    this.emit('data', data)
	    return true
	  }

	  SAXStream.prototype.end = function (chunk) {
	    if (chunk && chunk.length) {
	      this.write(chunk)
	    }
	    this._parser.end()
	    return true
	  }

	  SAXStream.prototype.on = function (ev, handler) {
	    var me = this
	    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
	      me._parser['on' + ev] = function () {
	        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)
	        args.splice(0, 0, ev)
	        me.emit.apply(me, args)
	      }
	    }

	    return Stream.prototype.on.call(me, ev, handler)
	  }

	  // character classes and tokens
	  var whitespace = '\r\n\t '

	  // this really needs to be replaced with character classes.
	  // XML allows all manner of ridiculous numbers and digits.
	  var number = '0124356789'
	  var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

	  // (Letter | "_" | ":")
	  var quote = '\'"'
	  var attribEnd = whitespace + '>'
	  var CDATA = '[CDATA['
	  var DOCTYPE = 'DOCTYPE'
	  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'
	  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'
	  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

	  // turn all the string character sets into character class objects.
	  whitespace = charClass(whitespace)
	  number = charClass(number)
	  letter = charClass(letter)

	  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
	  // This implementation works on strings, a single character at a time
	  // as such, it cannot ever support astral-plane characters (10000-EFFFF)
	  // without a significant breaking change to either this  parser, or the
	  // JavaScript language.  Implementation of an emoji-capable xml parser
	  // is left as an exercise for the reader.
	  var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

	  var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

	  var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/
	  var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

	  quote = charClass(quote)
	  attribEnd = charClass(attribEnd)

	  function charClass (str) {
	    return str.split('').reduce(function (s, c) {
	      s[c] = true
	      return s
	    }, {})
	  }

	  function isRegExp (c) {
	    return Object.prototype.toString.call(c) === '[object RegExp]'
	  }

	  function is (charclass, c) {
	    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
	  }

	  function not (charclass, c) {
	    return !is(charclass, c)
	  }

	  var S = 0
	  sax.STATE = {
	    BEGIN: S++, // leading byte order mark or whitespace
	    BEGIN_WHITESPACE: S++, // leading whitespace
	    TEXT: S++, // general stuff
	    TEXT_ENTITY: S++, // &amp and such.
	    OPEN_WAKA: S++, // <
	    SGML_DECL: S++, // <!BLARG
	    SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
	    DOCTYPE: S++, // <!DOCTYPE
	    DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
	    DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
	    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
	    COMMENT_STARTING: S++, // <!-
	    COMMENT: S++, // <!--
	    COMMENT_ENDING: S++, // <!-- blah -
	    COMMENT_ENDED: S++, // <!-- blah --
	    CDATA: S++, // <![CDATA[ something
	    CDATA_ENDING: S++, // ]
	    CDATA_ENDING_2: S++, // ]]
	    PROC_INST: S++, // <?hi
	    PROC_INST_BODY: S++, // <?hi there
	    PROC_INST_ENDING: S++, // <?hi "there" ?
	    OPEN_TAG: S++, // <strong
	    OPEN_TAG_SLASH: S++, // <strong /
	    ATTRIB: S++, // <a
	    ATTRIB_NAME: S++, // <a foo
	    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
	    ATTRIB_VALUE: S++, // <a foo=
	    ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
	    ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
	    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
	    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
	    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
	    CLOSE_TAG: S++, // </a
	    CLOSE_TAG_SAW_WHITE: S++, // </a   >
	    SCRIPT: S++, // <script> ...
	    SCRIPT_ENDING: S++ // <script> ... <
	  }

	  sax.XML_ENTITIES = {
	    'amp': '&',
	    'gt': '>',
	    'lt': '<',
	    'quot': '"',
	    'apos': "'"
	  }

	  sax.ENTITIES = {
	    'amp': '&',
	    'gt': '>',
	    'lt': '<',
	    'quot': '"',
	    'apos': "'",
	    'AElig': 198,
	    'Aacute': 193,
	    'Acirc': 194,
	    'Agrave': 192,
	    'Aring': 197,
	    'Atilde': 195,
	    'Auml': 196,
	    'Ccedil': 199,
	    'ETH': 208,
	    'Eacute': 201,
	    'Ecirc': 202,
	    'Egrave': 200,
	    'Euml': 203,
	    'Iacute': 205,
	    'Icirc': 206,
	    'Igrave': 204,
	    'Iuml': 207,
	    'Ntilde': 209,
	    'Oacute': 211,
	    'Ocirc': 212,
	    'Ograve': 210,
	    'Oslash': 216,
	    'Otilde': 213,
	    'Ouml': 214,
	    'THORN': 222,
	    'Uacute': 218,
	    'Ucirc': 219,
	    'Ugrave': 217,
	    'Uuml': 220,
	    'Yacute': 221,
	    'aacute': 225,
	    'acirc': 226,
	    'aelig': 230,
	    'agrave': 224,
	    'aring': 229,
	    'atilde': 227,
	    'auml': 228,
	    'ccedil': 231,
	    'eacute': 233,
	    'ecirc': 234,
	    'egrave': 232,
	    'eth': 240,
	    'euml': 235,
	    'iacute': 237,
	    'icirc': 238,
	    'igrave': 236,
	    'iuml': 239,
	    'ntilde': 241,
	    'oacute': 243,
	    'ocirc': 244,
	    'ograve': 242,
	    'oslash': 248,
	    'otilde': 245,
	    'ouml': 246,
	    'szlig': 223,
	    'thorn': 254,
	    'uacute': 250,
	    'ucirc': 251,
	    'ugrave': 249,
	    'uuml': 252,
	    'yacute': 253,
	    'yuml': 255,
	    'copy': 169,
	    'reg': 174,
	    'nbsp': 160,
	    'iexcl': 161,
	    'cent': 162,
	    'pound': 163,
	    'curren': 164,
	    'yen': 165,
	    'brvbar': 166,
	    'sect': 167,
	    'uml': 168,
	    'ordf': 170,
	    'laquo': 171,
	    'not': 172,
	    'shy': 173,
	    'macr': 175,
	    'deg': 176,
	    'plusmn': 177,
	    'sup1': 185,
	    'sup2': 178,
	    'sup3': 179,
	    'acute': 180,
	    'micro': 181,
	    'para': 182,
	    'middot': 183,
	    'cedil': 184,
	    'ordm': 186,
	    'raquo': 187,
	    'frac14': 188,
	    'frac12': 189,
	    'frac34': 190,
	    'iquest': 191,
	    'times': 215,
	    'divide': 247,
	    'OElig': 338,
	    'oelig': 339,
	    'Scaron': 352,
	    'scaron': 353,
	    'Yuml': 376,
	    'fnof': 402,
	    'circ': 710,
	    'tilde': 732,
	    'Alpha': 913,
	    'Beta': 914,
	    'Gamma': 915,
	    'Delta': 916,
	    'Epsilon': 917,
	    'Zeta': 918,
	    'Eta': 919,
	    'Theta': 920,
	    'Iota': 921,
	    'Kappa': 922,
	    'Lambda': 923,
	    'Mu': 924,
	    'Nu': 925,
	    'Xi': 926,
	    'Omicron': 927,
	    'Pi': 928,
	    'Rho': 929,
	    'Sigma': 931,
	    'Tau': 932,
	    'Upsilon': 933,
	    'Phi': 934,
	    'Chi': 935,
	    'Psi': 936,
	    'Omega': 937,
	    'alpha': 945,
	    'beta': 946,
	    'gamma': 947,
	    'delta': 948,
	    'epsilon': 949,
	    'zeta': 950,
	    'eta': 951,
	    'theta': 952,
	    'iota': 953,
	    'kappa': 954,
	    'lambda': 955,
	    'mu': 956,
	    'nu': 957,
	    'xi': 958,
	    'omicron': 959,
	    'pi': 960,
	    'rho': 961,
	    'sigmaf': 962,
	    'sigma': 963,
	    'tau': 964,
	    'upsilon': 965,
	    'phi': 966,
	    'chi': 967,
	    'psi': 968,
	    'omega': 969,
	    'thetasym': 977,
	    'upsih': 978,
	    'piv': 982,
	    'ensp': 8194,
	    'emsp': 8195,
	    'thinsp': 8201,
	    'zwnj': 8204,
	    'zwj': 8205,
	    'lrm': 8206,
	    'rlm': 8207,
	    'ndash': 8211,
	    'mdash': 8212,
	    'lsquo': 8216,
	    'rsquo': 8217,
	    'sbquo': 8218,
	    'ldquo': 8220,
	    'rdquo': 8221,
	    'bdquo': 8222,
	    'dagger': 8224,
	    'Dagger': 8225,
	    'bull': 8226,
	    'hellip': 8230,
	    'permil': 8240,
	    'prime': 8242,
	    'Prime': 8243,
	    'lsaquo': 8249,
	    'rsaquo': 8250,
	    'oline': 8254,
	    'frasl': 8260,
	    'euro': 8364,
	    'image': 8465,
	    'weierp': 8472,
	    'real': 8476,
	    'trade': 8482,
	    'alefsym': 8501,
	    'larr': 8592,
	    'uarr': 8593,
	    'rarr': 8594,
	    'darr': 8595,
	    'harr': 8596,
	    'crarr': 8629,
	    'lArr': 8656,
	    'uArr': 8657,
	    'rArr': 8658,
	    'dArr': 8659,
	    'hArr': 8660,
	    'forall': 8704,
	    'part': 8706,
	    'exist': 8707,
	    'empty': 8709,
	    'nabla': 8711,
	    'isin': 8712,
	    'notin': 8713,
	    'ni': 8715,
	    'prod': 8719,
	    'sum': 8721,
	    'minus': 8722,
	    'lowast': 8727,
	    'radic': 8730,
	    'prop': 8733,
	    'infin': 8734,
	    'ang': 8736,
	    'and': 8743,
	    'or': 8744,
	    'cap': 8745,
	    'cup': 8746,
	    'int': 8747,
	    'there4': 8756,
	    'sim': 8764,
	    'cong': 8773,
	    'asymp': 8776,
	    'ne': 8800,
	    'equiv': 8801,
	    'le': 8804,
	    'ge': 8805,
	    'sub': 8834,
	    'sup': 8835,
	    'nsub': 8836,
	    'sube': 8838,
	    'supe': 8839,
	    'oplus': 8853,
	    'otimes': 8855,
	    'perp': 8869,
	    'sdot': 8901,
	    'lceil': 8968,
	    'rceil': 8969,
	    'lfloor': 8970,
	    'rfloor': 8971,
	    'lang': 9001,
	    'rang': 9002,
	    'loz': 9674,
	    'spades': 9824,
	    'clubs': 9827,
	    'hearts': 9829,
	    'diams': 9830
	  }

	  Object.keys(sax.ENTITIES).forEach(function (key) {
	    var e = sax.ENTITIES[key]
	    var s = typeof e === 'number' ? String.fromCharCode(e) : e
	    sax.ENTITIES[key] = s
	  })

	  for (var s in sax.STATE) {
	    sax.STATE[sax.STATE[s]] = s
	  }

	  // shorthand
	  S = sax.STATE

	  function emit (parser, event, data) {
	    parser[event] && parser[event](data)
	  }

	  function emitNode (parser, nodeType, data) {
	    if (parser.textNode) closeText(parser)
	    emit(parser, nodeType, data)
	  }

	  function closeText (parser) {
	    parser.textNode = textopts(parser.opt, parser.textNode)
	    if (parser.textNode) emit(parser, 'ontext', parser.textNode)
	    parser.textNode = ''
	  }

	  function textopts (opt, text) {
	    if (opt.trim) text = text.trim()
	    if (opt.normalize) text = text.replace(/\s+/g, ' ')
	    return text
	  }

	  function error (parser, er) {
	    closeText(parser)
	    if (parser.trackPosition) {
	      er += '\nLine: ' + parser.line +
	        '\nColumn: ' + parser.column +
	        '\nChar: ' + parser.c
	    }
	    er = new Error(er)
	    parser.error = er
	    emit(parser, 'onerror', er)
	    return parser
	  }

	  function end (parser) {
	    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')
	    if ((parser.state !== S.BEGIN) &&
	      (parser.state !== S.BEGIN_WHITESPACE) &&
	      (parser.state !== S.TEXT)) {
	      error(parser, 'Unexpected end')
	    }
	    closeText(parser)
	    parser.c = ''
	    parser.closed = true
	    emit(parser, 'onend')
	    SAXParser.call(parser, parser.strict, parser.opt)
	    return parser
	  }

	  function strictFail (parser, message) {
	    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
	      throw new Error('bad call to strictFail')
	    }
	    if (parser.strict) {
	      error(parser, message)
	    }
	  }

	  function newTag (parser) {
	    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
	    var parent = parser.tags[parser.tags.length - 1] || parser
	    var tag = parser.tag = { name: parser.tagName, attributes: {} }

	    // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
	    if (parser.opt.xmlns) {
	      tag.ns = parent.ns
	    }
	    parser.attribList.length = 0
	    emitNode(parser, 'onopentagstart', tag)
	  }

	  function qname (name, attribute) {
	    var i = name.indexOf(':')
	    var qualName = i < 0 ? [ '', name ] : name.split(':')
	    var prefix = qualName[0]
	    var local = qualName[1]

	    // <x "xmlns"="http://foo">
	    if (attribute && name === 'xmlns') {
	      prefix = 'xmlns'
	      local = ''
	    }

	    return { prefix: prefix, local: local }
	  }

	  function attrib (parser) {
	    if (!parser.strict) {
	      parser.attribName = parser.attribName[parser.looseCase]()
	    }

	    if (parser.attribList.indexOf(parser.attribName) !== -1 ||
	      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
	      parser.attribName = parser.attribValue = ''
	      return
	    }

	    if (parser.opt.xmlns) {
	      var qn = qname(parser.attribName, true)
	      var prefix = qn.prefix
	      var local = qn.local

	      if (prefix === 'xmlns') {
	        // namespace binding attribute. push the binding into scope
	        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
	          strictFail(parser,
	            'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
	            'Actual: ' + parser.attribValue)
	        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
	          strictFail(parser,
	            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
	            'Actual: ' + parser.attribValue)
	        } else {
	          var tag = parser.tag
	          var parent = parser.tags[parser.tags.length - 1] || parser
	          if (tag.ns === parent.ns) {
	            tag.ns = Object.create(parent.ns)
	          }
	          tag.ns[local] = parser.attribValue
	        }
	      }

	      // defer onattribute events until all attributes have been seen
	      // so any new bindings can take effect. preserve attribute order
	      // so deferred events can be emitted in document order
	      parser.attribList.push([parser.attribName, parser.attribValue])
	    } else {
	      // in non-xmlns mode, we can emit the event right away
	      parser.tag.attributes[parser.attribName] = parser.attribValue
	      emitNode(parser, 'onattribute', {
	        name: parser.attribName,
	        value: parser.attribValue
	      })
	    }

	    parser.attribName = parser.attribValue = ''
	  }

	  function openTag (parser, selfClosing) {
	    if (parser.opt.xmlns) {
	      // emit namespace binding events
	      var tag = parser.tag

	      // add namespace info to tag
	      var qn = qname(parser.tagName)
	      tag.prefix = qn.prefix
	      tag.local = qn.local
	      tag.uri = tag.ns[qn.prefix] || ''

	      if (tag.prefix && !tag.uri) {
	        strictFail(parser, 'Unbound namespace prefix: ' +
	          JSON.stringify(parser.tagName))
	        tag.uri = qn.prefix
	      }

	      var parent = parser.tags[parser.tags.length - 1] || parser
	      if (tag.ns && parent.ns !== tag.ns) {
	        Object.keys(tag.ns).forEach(function (p) {
	          emitNode(parser, 'onopennamespace', {
	            prefix: p,
	            uri: tag.ns[p]
	          })
	        })
	      }

	      // handle deferred onattribute events
	      // Note: do not apply default ns to attributes:
	      //   http://www.w3.org/TR/REC-xml-names/#defaulting
	      for (var i = 0, l = parser.attribList.length; i < l; i++) {
	        var nv = parser.attribList[i]
	        var name = nv[0]
	        var value = nv[1]
	        var qualName = qname(name, true)
	        var prefix = qualName.prefix
	        var local = qualName.local
	        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')
	        var a = {
	          name: name,
	          value: value,
	          prefix: prefix,
	          local: local,
	          uri: uri
	        }

	        // if there's any attributes with an undefined namespace,
	        // then fail on them now.
	        if (prefix && prefix !== 'xmlns' && !uri) {
	          strictFail(parser, 'Unbound namespace prefix: ' +
	            JSON.stringify(prefix))
	          a.uri = prefix
	        }
	        parser.tag.attributes[name] = a
	        emitNode(parser, 'onattribute', a)
	      }
	      parser.attribList.length = 0
	    }

	    parser.tag.isSelfClosing = !!selfClosing

	    // process the tag
	    parser.sawRoot = true
	    parser.tags.push(parser.tag)
	    emitNode(parser, 'onopentag', parser.tag)
	    if (!selfClosing) {
	      // special case for <script> in non-strict mode.
	      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
	        parser.state = S.SCRIPT
	      } else {
	        parser.state = S.TEXT
	      }
	      parser.tag = null
	      parser.tagName = ''
	    }
	    parser.attribName = parser.attribValue = ''
	    parser.attribList.length = 0
	  }

	  function closeTag (parser) {
	    if (!parser.tagName) {
	      strictFail(parser, 'Weird empty close tag.')
	      parser.textNode += '</>'
	      parser.state = S.TEXT
	      return
	    }

	    if (parser.script) {
	      if (parser.tagName !== 'script') {
	        parser.script += '</' + parser.tagName + '>'
	        parser.tagName = ''
	        parser.state = S.SCRIPT
	        return
	      }
	      emitNode(parser, 'onscript', parser.script)
	      parser.script = ''
	    }

	    // first make sure that the closing tag actually exists.
	    // <a><b></c></b></a> will close everything, otherwise.
	    var t = parser.tags.length
	    var tagName = parser.tagName
	    if (!parser.strict) {
	      tagName = tagName[parser.looseCase]()
	    }
	    var closeTo = tagName
	    while (t--) {
	      var close = parser.tags[t]
	      if (close.name !== closeTo) {
	        // fail the first time in strict mode
	        strictFail(parser, 'Unexpected close tag')
	      } else {
	        break
	      }
	    }

	    // didn't find it.  we already failed for strict, so just abort.
	    if (t < 0) {
	      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)
	      parser.textNode += '</' + parser.tagName + '>'
	      parser.state = S.TEXT
	      return
	    }
	    parser.tagName = tagName
	    var s = parser.tags.length
	    while (s-- > t) {
	      var tag = parser.tag = parser.tags.pop()
	      parser.tagName = parser.tag.name
	      emitNode(parser, 'onclosetag', parser.tagName)

	      var x = {}
	      for (var i in tag.ns) {
	        x[i] = tag.ns[i]
	      }

	      var parent = parser.tags[parser.tags.length - 1] || parser
	      if (parser.opt.xmlns && tag.ns !== parent.ns) {
	        // remove namespace bindings introduced by tag
	        Object.keys(tag.ns).forEach(function (p) {
	          var n = tag.ns[p]
	          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })
	        })
	      }
	    }
	    if (t === 0) parser.closedRoot = true
	    parser.tagName = parser.attribValue = parser.attribName = ''
	    parser.attribList.length = 0
	    parser.state = S.TEXT
	  }

	  function parseEntity (parser) {
	    var entity = parser.entity
	    var entityLC = entity.toLowerCase()
	    var num
	    var numStr = ''

	    if (parser.ENTITIES[entity]) {
	      return parser.ENTITIES[entity]
	    }
	    if (parser.ENTITIES[entityLC]) {
	      return parser.ENTITIES[entityLC]
	    }
	    entity = entityLC
	    if (entity.charAt(0) === '#') {
	      if (entity.charAt(1) === 'x') {
	        entity = entity.slice(2)
	        num = parseInt(entity, 16)
	        numStr = num.toString(16)
	      } else {
	        entity = entity.slice(1)
	        num = parseInt(entity, 10)
	        numStr = num.toString(10)
	      }
	    }
	    entity = entity.replace(/^0+/, '')
	    if (numStr.toLowerCase() !== entity) {
	      strictFail(parser, 'Invalid character entity')
	      return '&' + parser.entity + ';'
	    }

	    return String.fromCodePoint(num)
	  }

	  function beginWhiteSpace (parser, c) {
	    if (c === '<') {
	      parser.state = S.OPEN_WAKA
	      parser.startTagPosition = parser.position
	    } else if (not(whitespace, c)) {
	      // have to process this as a text node.
	      // weird, but happens.
	      strictFail(parser, 'Non-whitespace before first tag.')
	      parser.textNode = c
	      parser.state = S.TEXT
	    }
	  }

	  function charAt (chunk, i) {
	    var result = ''
	    if (i < chunk.length) {
	      result = chunk.charAt(i)
	    }
	    return result
	  }

	  function write (chunk) {
	    var parser = this
	    if (this.error) {
	      throw this.error
	    }
	    if (parser.closed) {
	      return error(parser,
	        'Cannot write after close. Assign an onready handler.')
	    }
	    if (chunk === null) {
	      return end(parser)
	    }
	    if (typeof chunk === 'object') {
	      chunk = chunk.toString()
	    }
	    var i = 0
	    var c = ''
	    while (true) {
	      c = charAt(chunk, i++)
	      parser.c = c
	      if (!c) {
	        break
	      }
	      if (parser.trackPosition) {
	        parser.position++
	        if (c === '\n') {
	          parser.line++
	          parser.column = 0
	        } else {
	          parser.column++
	        }
	      }
	      switch (parser.state) {
	        case S.BEGIN:
	          parser.state = S.BEGIN_WHITESPACE
	          if (c === '\uFEFF') {
	            continue
	          }
	          beginWhiteSpace(parser, c)
	          continue

	        case S.BEGIN_WHITESPACE:
	          beginWhiteSpace(parser, c)
	          continue

	        case S.TEXT:
	          if (parser.sawRoot && !parser.closedRoot) {
	            var starti = i - 1
	            while (c && c !== '<' && c !== '&') {
	              c = charAt(chunk, i++)
	              if (c && parser.trackPosition) {
	                parser.position++
	                if (c === '\n') {
	                  parser.line++
	                  parser.column = 0
	                } else {
	                  parser.column++
	                }
	              }
	            }
	            parser.textNode += chunk.substring(starti, i - 1)
	          }
	          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
	            parser.state = S.OPEN_WAKA
	            parser.startTagPosition = parser.position
	          } else {
	            if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {
	              strictFail(parser, 'Text data outside of root node.')
	            }
	            if (c === '&') {
	              parser.state = S.TEXT_ENTITY
	            } else {
	              parser.textNode += c
	            }
	          }
	          continue

	        case S.SCRIPT:
	          // only non-strict
	          if (c === '<') {
	            parser.state = S.SCRIPT_ENDING
	          } else {
	            parser.script += c
	          }
	          continue

	        case S.SCRIPT_ENDING:
	          if (c === '/') {
	            parser.state = S.CLOSE_TAG
	          } else {
	            parser.script += '<' + c
	            parser.state = S.SCRIPT
	          }
	          continue

	        case S.OPEN_WAKA:
	          // either a /, ?, !, or text is coming next.
	          if (c === '!') {
	            parser.state = S.SGML_DECL
	            parser.sgmlDecl = ''
	          } else if (is(whitespace, c)) {
	            // wait for it...
	          } else if (is(nameStart, c)) {
	            parser.state = S.OPEN_TAG
	            parser.tagName = c
	          } else if (c === '/') {
	            parser.state = S.CLOSE_TAG
	            parser.tagName = ''
	          } else if (c === '?') {
	            parser.state = S.PROC_INST
	            parser.procInstName = parser.procInstBody = ''
	          } else {
	            strictFail(parser, 'Unencoded <')
	            // if there was some whitespace, then add that in.
	            if (parser.startTagPosition + 1 < parser.position) {
	              var pad = parser.position - parser.startTagPosition
	              c = new Array(pad).join(' ') + c
	            }
	            parser.textNode += '<' + c
	            parser.state = S.TEXT
	          }
	          continue

	        case S.SGML_DECL:
	          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
	            emitNode(parser, 'onopencdata')
	            parser.state = S.CDATA
	            parser.sgmlDecl = ''
	            parser.cdata = ''
	          } else if (parser.sgmlDecl + c === '--') {
	            parser.state = S.COMMENT
	            parser.comment = ''
	            parser.sgmlDecl = ''
	          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
	            parser.state = S.DOCTYPE
	            if (parser.doctype || parser.sawRoot) {
	              strictFail(parser,
	                'Inappropriately located doctype declaration')
	            }
	            parser.doctype = ''
	            parser.sgmlDecl = ''
	          } else if (c === '>') {
	            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)
	            parser.sgmlDecl = ''
	            parser.state = S.TEXT
	          } else if (is(quote, c)) {
	            parser.state = S.SGML_DECL_QUOTED
	            parser.sgmlDecl += c
	          } else {
	            parser.sgmlDecl += c
	          }
	          continue

	        case S.SGML_DECL_QUOTED:
	          if (c === parser.q) {
	            parser.state = S.SGML_DECL
	            parser.q = ''
	          }
	          parser.sgmlDecl += c
	          continue

	        case S.DOCTYPE:
	          if (c === '>') {
	            parser.state = S.TEXT
	            emitNode(parser, 'ondoctype', parser.doctype)
	            parser.doctype = true // just remember that we saw it.
	          } else {
	            parser.doctype += c
	            if (c === '[') {
	              parser.state = S.DOCTYPE_DTD
	            } else if (is(quote, c)) {
	              parser.state = S.DOCTYPE_QUOTED
	              parser.q = c
	            }
	          }
	          continue

	        case S.DOCTYPE_QUOTED:
	          parser.doctype += c
	          if (c === parser.q) {
	            parser.q = ''
	            parser.state = S.DOCTYPE
	          }
	          continue

	        case S.DOCTYPE_DTD:
	          parser.doctype += c
	          if (c === ']') {
	            parser.state = S.DOCTYPE
	          } else if (is(quote, c)) {
	            parser.state = S.DOCTYPE_DTD_QUOTED
	            parser.q = c
	          }
	          continue

	        case S.DOCTYPE_DTD_QUOTED:
	          parser.doctype += c
	          if (c === parser.q) {
	            parser.state = S.DOCTYPE_DTD
	            parser.q = ''
	          }
	          continue

	        case S.COMMENT:
	          if (c === '-') {
	            parser.state = S.COMMENT_ENDING
	          } else {
	            parser.comment += c
	          }
	          continue

	        case S.COMMENT_ENDING:
	          if (c === '-') {
	            parser.state = S.COMMENT_ENDED
	            parser.comment = textopts(parser.opt, parser.comment)
	            if (parser.comment) {
	              emitNode(parser, 'oncomment', parser.comment)
	            }
	            parser.comment = ''
	          } else {
	            parser.comment += '-' + c
	            parser.state = S.COMMENT
	          }
	          continue

	        case S.COMMENT_ENDED:
	          if (c !== '>') {
	            strictFail(parser, 'Malformed comment')
	            // allow <!-- blah -- bloo --> in non-strict mode,
	            // which is a comment of " blah -- bloo "
	            parser.comment += '--' + c
	            parser.state = S.COMMENT
	          } else {
	            parser.state = S.TEXT
	          }
	          continue

	        case S.CDATA:
	          if (c === ']') {
	            parser.state = S.CDATA_ENDING
	          } else {
	            parser.cdata += c
	          }
	          continue

	        case S.CDATA_ENDING:
	          if (c === ']') {
	            parser.state = S.CDATA_ENDING_2
	          } else {
	            parser.cdata += ']' + c
	            parser.state = S.CDATA
	          }
	          continue

	        case S.CDATA_ENDING_2:
	          if (c === '>') {
	            if (parser.cdata) {
	              emitNode(parser, 'oncdata', parser.cdata)
	            }
	            emitNode(parser, 'onclosecdata')
	            parser.cdata = ''
	            parser.state = S.TEXT
	          } else if (c === ']') {
	            parser.cdata += ']'
	          } else {
	            parser.cdata += ']]' + c
	            parser.state = S.CDATA
	          }
	          continue

	        case S.PROC_INST:
	          if (c === '?') {
	            parser.state = S.PROC_INST_ENDING
	          } else if (is(whitespace, c)) {
	            parser.state = S.PROC_INST_BODY
	          } else {
	            parser.procInstName += c
	          }
	          continue

	        case S.PROC_INST_BODY:
	          if (!parser.procInstBody && is(whitespace, c)) {
	            continue
	          } else if (c === '?') {
	            parser.state = S.PROC_INST_ENDING
	          } else {
	            parser.procInstBody += c
	          }
	          continue

	        case S.PROC_INST_ENDING:
	          if (c === '>') {
	            emitNode(parser, 'onprocessinginstruction', {
	              name: parser.procInstName,
	              body: parser.procInstBody
	            })
	            parser.procInstName = parser.procInstBody = ''
	            parser.state = S.TEXT
	          } else {
	            parser.procInstBody += '?' + c
	            parser.state = S.PROC_INST_BODY
	          }
	          continue

	        case S.OPEN_TAG:
	          if (is(nameBody, c)) {
	            parser.tagName += c
	          } else {
	            newTag(parser)
	            if (c === '>') {
	              openTag(parser)
	            } else if (c === '/') {
	              parser.state = S.OPEN_TAG_SLASH
	            } else {
	              if (not(whitespace, c)) {
	                strictFail(parser, 'Invalid character in tag name')
	              }
	              parser.state = S.ATTRIB
	            }
	          }
	          continue

	        case S.OPEN_TAG_SLASH:
	          if (c === '>') {
	            openTag(parser, true)
	            closeTag(parser)
	          } else {
	            strictFail(parser, 'Forward-slash in opening tag not followed by >')
	            parser.state = S.ATTRIB
	          }
	          continue

	        case S.ATTRIB:
	          // haven't read the attribute name yet.
	          if (is(whitespace, c)) {
	            continue
	          } else if (c === '>') {
	            openTag(parser)
	          } else if (c === '/') {
	            parser.state = S.OPEN_TAG_SLASH
	          } else if (is(nameStart, c)) {
	            parser.attribName = c
	            parser.attribValue = ''
	            parser.state = S.ATTRIB_NAME
	          } else {
	            strictFail(parser, 'Invalid attribute name')
	          }
	          continue

	        case S.ATTRIB_NAME:
	          if (c === '=') {
	            parser.state = S.ATTRIB_VALUE
	          } else if (c === '>') {
	            strictFail(parser, 'Attribute without value')
	            parser.attribValue = parser.attribName
	            attrib(parser)
	            openTag(parser)
	          } else if (is(whitespace, c)) {
	            parser.state = S.ATTRIB_NAME_SAW_WHITE
	          } else if (is(nameBody, c)) {
	            parser.attribName += c
	          } else {
	            strictFail(parser, 'Invalid attribute name')
	          }
	          continue

	        case S.ATTRIB_NAME_SAW_WHITE:
	          if (c === '=') {
	            parser.state = S.ATTRIB_VALUE
	          } else if (is(whitespace, c)) {
	            continue
	          } else {
	            strictFail(parser, 'Attribute without value')
	            parser.tag.attributes[parser.attribName] = ''
	            parser.attribValue = ''
	            emitNode(parser, 'onattribute', {
	              name: parser.attribName,
	              value: ''
	            })
	            parser.attribName = ''
	            if (c === '>') {
	              openTag(parser)
	            } else if (is(nameStart, c)) {
	              parser.attribName = c
	              parser.state = S.ATTRIB_NAME
	            } else {
	              strictFail(parser, 'Invalid attribute name')
	              parser.state = S.ATTRIB
	            }
	          }
	          continue

	        case S.ATTRIB_VALUE:
	          if (is(whitespace, c)) {
	            continue
	          } else if (is(quote, c)) {
	            parser.q = c
	            parser.state = S.ATTRIB_VALUE_QUOTED
	          } else {
	            strictFail(parser, 'Unquoted attribute value')
	            parser.state = S.ATTRIB_VALUE_UNQUOTED
	            parser.attribValue = c
	          }
	          continue

	        case S.ATTRIB_VALUE_QUOTED:
	          if (c !== parser.q) {
	            if (c === '&') {
	              parser.state = S.ATTRIB_VALUE_ENTITY_Q
	            } else {
	              parser.attribValue += c
	            }
	            continue
	          }
	          attrib(parser)
	          parser.q = ''
	          parser.state = S.ATTRIB_VALUE_CLOSED
	          continue

	        case S.ATTRIB_VALUE_CLOSED:
	          if (is(whitespace, c)) {
	            parser.state = S.ATTRIB
	          } else if (c === '>') {
	            openTag(parser)
	          } else if (c === '/') {
	            parser.state = S.OPEN_TAG_SLASH
	          } else if (is(nameStart, c)) {
	            strictFail(parser, 'No whitespace between attributes')
	            parser.attribName = c
	            parser.attribValue = ''
	            parser.state = S.ATTRIB_NAME
	          } else {
	            strictFail(parser, 'Invalid attribute name')
	          }
	          continue

	        case S.ATTRIB_VALUE_UNQUOTED:
	          if (not(attribEnd, c)) {
	            if (c === '&') {
	              parser.state = S.ATTRIB_VALUE_ENTITY_U
	            } else {
	              parser.attribValue += c
	            }
	            continue
	          }
	          attrib(parser)
	          if (c === '>') {
	            openTag(parser)
	          } else {
	            parser.state = S.ATTRIB
	          }
	          continue

	        case S.CLOSE_TAG:
	          if (!parser.tagName) {
	            if (is(whitespace, c)) {
	              continue
	            } else if (not(nameStart, c)) {
	              if (parser.script) {
	                parser.script += '</' + c
	                parser.state = S.SCRIPT
	              } else {
	                strictFail(parser, 'Invalid tagname in closing tag.')
	              }
	            } else {
	              parser.tagName = c
	            }
	          } else if (c === '>') {
	            closeTag(parser)
	          } else if (is(nameBody, c)) {
	            parser.tagName += c
	          } else if (parser.script) {
	            parser.script += '</' + parser.tagName
	            parser.tagName = ''
	            parser.state = S.SCRIPT
	          } else {
	            if (not(whitespace, c)) {
	              strictFail(parser, 'Invalid tagname in closing tag')
	            }
	            parser.state = S.CLOSE_TAG_SAW_WHITE
	          }
	          continue

	        case S.CLOSE_TAG_SAW_WHITE:
	          if (is(whitespace, c)) {
	            continue
	          }
	          if (c === '>') {
	            closeTag(parser)
	          } else {
	            strictFail(parser, 'Invalid characters in closing tag')
	          }
	          continue

	        case S.TEXT_ENTITY:
	        case S.ATTRIB_VALUE_ENTITY_Q:
	        case S.ATTRIB_VALUE_ENTITY_U:
	          var returnState
	          var buffer
	          switch (parser.state) {
	            case S.TEXT_ENTITY:
	              returnState = S.TEXT
	              buffer = 'textNode'
	              break

	            case S.ATTRIB_VALUE_ENTITY_Q:
	              returnState = S.ATTRIB_VALUE_QUOTED
	              buffer = 'attribValue'
	              break

	            case S.ATTRIB_VALUE_ENTITY_U:
	              returnState = S.ATTRIB_VALUE_UNQUOTED
	              buffer = 'attribValue'
	              break
	          }

	          if (c === ';') {
	            parser[buffer] += parseEntity(parser)
	            parser.entity = ''
	            parser.state = returnState
	          } else if (is(parser.entity.length ? entityBody : entityStart, c)) {
	            parser.entity += c
	          } else {
	            strictFail(parser, 'Invalid character in entity name')
	            parser[buffer] += '&' + parser.entity + c
	            parser.entity = ''
	            parser.state = returnState
	          }

	          continue

	        default:
	          throw new Error(parser, 'Unknown state: ' + parser.state)
	      }
	    } // while

	    if (parser.position >= parser.bufferCheckPosition) {
	      checkBufferLength(parser)
	    }
	    return parser
	  }

	  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
	  if (!String.fromCodePoint) {
	    (function () {
	      var stringFromCharCode = String.fromCharCode
	      var floor = Math.floor
	      var fromCodePoint = function () {
	        var MAX_SIZE = 0x4000
	        var codeUnits = []
	        var highSurrogate
	        var lowSurrogate
	        var index = -1
	        var length = arguments.length
	        if (!length) {
	          return ''
	        }
	        var result = ''
	        while (++index < length) {
	          var codePoint = Number(arguments[index])
	          if (
	            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
	            codePoint < 0 || // not a valid Unicode code point
	            codePoint > 0x10FFFF || // not a valid Unicode code point
	            floor(codePoint) !== codePoint // not an integer
	          ) {
	            throw RangeError('Invalid code point: ' + codePoint)
	          }
	          if (codePoint <= 0xFFFF) { // BMP code point
	            codeUnits.push(codePoint)
	          } else { // Astral code point; split in surrogate halves
	            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	            codePoint -= 0x10000
	            highSurrogate = (codePoint >> 10) + 0xD800
	            lowSurrogate = (codePoint % 0x400) + 0xDC00
	            codeUnits.push(highSurrogate, lowSurrogate)
	          }
	          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
	            result += stringFromCharCode.apply(null, codeUnits)
	            codeUnits.length = 0
	          }
	        }
	        return result
	      }
	      if (Object.defineProperty) {
	        Object.defineProperty(String, 'fromCodePoint', {
	          value: fromCodePoint,
	          configurable: true,
	          writable: true
	        })
	      } else {
	        String.fromCodePoint = fromCodePoint
	      }
	    }())
	  }
	})( false ? this.sax = {} : exports)

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18).Buffer))

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLBuilder, assign;

	  assign = __webpack_require__(164);

	  XMLBuilder = __webpack_require__(214);

	  module.exports.create = function(name, xmldec, doctype, options) {
	    options = assign({}, xmldec, doctype, options);
	    return new XMLBuilder(name, options).root();
	  };

	}).call(this);


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(165),
	    copyObject = __webpack_require__(183),
	    createAssigner = __webpack_require__(184),
	    isArrayLike = __webpack_require__(194),
	    isPrototype = __webpack_require__(197),
	    keys = __webpack_require__(198);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns own enumerable string keyed properties of source objects to the
	 * destination object. Source objects are applied from left to right.
	 * Subsequent sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object` and is loosely based on
	 * [`Object.assign`](https://mdn.io/Object/assign).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.assignIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * function Bar() {
	 *   this.c = 3;
	 * }
	 *
	 * Foo.prototype.b = 2;
	 * Bar.prototype.d = 4;
	 *
	 * _.assign({ 'a': 0 }, new Foo, new Bar);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var assign = createAssigner(function(object, source) {
	  if (isPrototype(source) || isArrayLike(source)) {
	    copyObject(source, keys(source), object);
	    return;
	  }
	  for (var key in source) {
	    if (hasOwnProperty.call(source, key)) {
	      assignValue(object, key, source[key]);
	    }
	  }
	});

	module.exports = assign;


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(166),
	    eq = __webpack_require__(182);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue(object, key, value);
	  }
	}

	module.exports = assignValue;


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var defineProperty = __webpack_require__(167);

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && defineProperty) {
	    defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	module.exports = baseAssignValue;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(168);

	var defineProperty = (function() {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	module.exports = defineProperty;


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(169),
	    getValue = __webpack_require__(181);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(170),
	    isMasked = __webpack_require__(178),
	    isObject = __webpack_require__(177),
	    toSource = __webpack_require__(180);

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	module.exports = baseIsNative;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(171),
	    isObject = __webpack_require__(177);

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	module.exports = isFunction;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(172),
	    getRawTag = __webpack_require__(175),
	    objectToString = __webpack_require__(176);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	module.exports = baseGetTag;


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(173);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(174);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ },
/* 174 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(172);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;


/***/ },
/* 176 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;


/***/ },
/* 177 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(179);

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	module.exports = isMasked;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(173);

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	module.exports = coreJsData;


/***/ },
/* 180 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	module.exports = toSource;


/***/ },
/* 181 */
/***/ function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	module.exports = getValue;


/***/ },
/* 182 */
/***/ function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	module.exports = eq;


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(165),
	    baseAssignValue = __webpack_require__(166);

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue(object, key, newValue);
	    }
	  }
	  return object;
	}

	module.exports = copyObject;


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var baseRest = __webpack_require__(185),
	    isIterateeCall = __webpack_require__(193);

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(186),
	    overRest = __webpack_require__(187),
	    setToString = __webpack_require__(189);

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}

	module.exports = baseRest;


/***/ },
/* 186 */
/***/ function(module, exports) {

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(188);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}

	module.exports = overRest;


/***/ },
/* 188 */
/***/ function(module, exports) {

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	module.exports = apply;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var baseSetToString = __webpack_require__(190),
	    shortOut = __webpack_require__(192);

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = shortOut(baseSetToString);

	module.exports = setToString;


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var constant = __webpack_require__(191),
	    defineProperty = __webpack_require__(167),
	    identity = __webpack_require__(186);

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !defineProperty ? identity : function(func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};

	module.exports = baseSetToString;


/***/ },
/* 191 */
/***/ function(module, exports) {

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	module.exports = constant;


/***/ },
/* 192 */
/***/ function(module, exports) {

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
	    HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;

	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);

	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}

	module.exports = shortOut;


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(182),
	    isArrayLike = __webpack_require__(194),
	    isIndex = __webpack_require__(196),
	    isObject = __webpack_require__(177);

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	module.exports = isIterateeCall;


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(170),
	    isLength = __webpack_require__(195);

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	module.exports = isArrayLike;


/***/ },
/* 195 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 196 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	module.exports = isIndex;


/***/ },
/* 197 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	module.exports = isPrototype;


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(199),
	    baseKeys = __webpack_require__(211),
	    isArrayLike = __webpack_require__(194);

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	module.exports = keys;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(200),
	    isArguments = __webpack_require__(201),
	    isArray = __webpack_require__(204),
	    isBuffer = __webpack_require__(205),
	    isIndex = __webpack_require__(196),
	    isTypedArray = __webpack_require__(207);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = arrayLikeKeys;


/***/ },
/* 200 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	module.exports = baseTimes;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsArguments = __webpack_require__(202),
	    isObjectLike = __webpack_require__(203);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};

	module.exports = isArguments;


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(171),
	    isObjectLike = __webpack_require__(203);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}

	module.exports = baseIsArguments;


/***/ },
/* 203 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 204 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	module.exports = isArray;


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(173),
	    stubFalse = __webpack_require__(206);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(54)(module)))

/***/ },
/* 206 */
/***/ function(module, exports) {

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = stubFalse;


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsTypedArray = __webpack_require__(208),
	    baseUnary = __webpack_require__(209),
	    nodeUtil = __webpack_require__(210);

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	module.exports = isTypedArray;


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(171),
	    isLength = __webpack_require__(195),
	    isObjectLike = __webpack_require__(203);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}

	module.exports = baseIsTypedArray;


/***/ },
/* 209 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	module.exports = baseUnary;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(174);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(54)(module)))

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var isPrototype = __webpack_require__(197),
	    nativeKeys = __webpack_require__(212);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeys;


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(213);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);

	module.exports = nativeKeys;


/***/ },
/* 213 */
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier;

	  XMLStringifier = __webpack_require__(215);

	  XMLDeclaration = __webpack_require__(216);

	  XMLDocType = __webpack_require__(313);

	  XMLElement = __webpack_require__(228);

	  module.exports = XMLBuilder = (function() {
	    function XMLBuilder(name, options) {
	      var root, temp;
	      if (name == null) {
	        throw new Error("Root element needs a name");
	      }
	      if (options == null) {
	        options = {};
	      }
	      this.options = options;
	      this.stringify = new XMLStringifier(options);
	      temp = new XMLElement(this, 'doc');
	      root = temp.element(name);
	      root.isRoot = true;
	      root.documentObject = this;
	      this.rootObject = root;
	      if (!options.headless) {
	        root.declaration(options);
	        if ((options.pubID != null) || (options.sysID != null)) {
	          root.doctype(options);
	        }
	      }
	    }

	    XMLBuilder.prototype.root = function() {
	      return this.rootObject;
	    };

	    XMLBuilder.prototype.end = function(options) {
	      return this.toString(options);
	    };

	    XMLBuilder.prototype.toString = function(options) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      r = '';
	      if (this.xmldec != null) {
	        r += this.xmldec.toString(options);
	      }
	      if (this.doctype != null) {
	        r += this.doctype.toString(options);
	      }
	      r += this.rootObject.toString(options);
	      if (pretty && r.slice(-newline.length) === newline) {
	        r = r.slice(0, -newline.length);
	      }
	      return r;
	    };

	    return XMLBuilder;

	  })();

	}).call(this);


/***/ },
/* 215 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLStringifier,
	    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    hasProp = {}.hasOwnProperty;

	  module.exports = XMLStringifier = (function() {
	    function XMLStringifier(options) {
	      this.assertLegalChar = bind(this.assertLegalChar, this);
	      var key, ref, value;
	      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;
	      this.noDoubleEncoding = options != null ? options.noDoubleEncoding : void 0;
	      ref = (options != null ? options.stringify : void 0) || {};
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this[key] = value;
	      }
	    }

	    XMLStringifier.prototype.eleName = function(val) {
	      val = '' + val || '';
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.eleText = function(val) {
	      val = '' + val || '';
	      return this.assertLegalChar(this.elEscape(val));
	    };

	    XMLStringifier.prototype.cdata = function(val) {
	      val = '' + val || '';
	      if (val.match(/]]>/)) {
	        throw new Error("Invalid CDATA text: " + val);
	      }
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.comment = function(val) {
	      val = '' + val || '';
	      if (val.match(/--/)) {
	        throw new Error("Comment text cannot contain double-hypen: " + val);
	      }
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.raw = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.attName = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.attValue = function(val) {
	      val = '' + val || '';
	      return this.attEscape(val);
	    };

	    XMLStringifier.prototype.insTarget = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.insValue = function(val) {
	      val = '' + val || '';
	      if (val.match(/\?>/)) {
	        throw new Error("Invalid processing instruction value: " + val);
	      }
	      return val;
	    };

	    XMLStringifier.prototype.xmlVersion = function(val) {
	      val = '' + val || '';
	      if (!val.match(/1\.[0-9]+/)) {
	        throw new Error("Invalid version number: " + val);
	      }
	      return val;
	    };

	    XMLStringifier.prototype.xmlEncoding = function(val) {
	      val = '' + val || '';
	      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {
	        throw new Error("Invalid encoding: " + val);
	      }
	      return val;
	    };

	    XMLStringifier.prototype.xmlStandalone = function(val) {
	      if (val) {
	        return "yes";
	      } else {
	        return "no";
	      }
	    };

	    XMLStringifier.prototype.dtdPubID = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.dtdSysID = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.dtdElementValue = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.dtdAttType = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.dtdAttDefault = function(val) {
	      if (val != null) {
	        return '' + val || '';
	      } else {
	        return val;
	      }
	    };

	    XMLStringifier.prototype.dtdEntityValue = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.dtdNData = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.convertAttKey = '@';

	    XMLStringifier.prototype.convertPIKey = '?';

	    XMLStringifier.prototype.convertTextKey = '#text';

	    XMLStringifier.prototype.convertCDataKey = '#cdata';

	    XMLStringifier.prototype.convertCommentKey = '#comment';

	    XMLStringifier.prototype.convertRawKey = '#raw';

	    XMLStringifier.prototype.assertLegalChar = function(str) {
	      var chars, chr;
	      if (this.allowSurrogateChars) {
	        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;
	      } else {
	        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
	      }
	      chr = str.match(chars);
	      if (chr) {
	        throw new Error("Invalid character (" + chr + ") in string: " + str + " at index " + chr.index);
	      }
	      return str;
	    };

	    XMLStringifier.prototype.elEscape = function(str) {
	      var ampregex;
	      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
	      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
	    };

	    XMLStringifier.prototype.attEscape = function(str) {
	      var ampregex;
	      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
	      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;');
	    };

	    return XMLStringifier;

	  })();

	}).call(this);


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLDeclaration, XMLNode, create, isObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  create = __webpack_require__(217);

	  isObject = __webpack_require__(177);

	  XMLNode = __webpack_require__(220);

	  module.exports = XMLDeclaration = (function(superClass) {
	    extend(XMLDeclaration, superClass);

	    function XMLDeclaration(parent, version, encoding, standalone) {
	      var ref;
	      XMLDeclaration.__super__.constructor.call(this, parent);
	      if (isObject(version)) {
	        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
	      }
	      if (!version) {
	        version = '1.0';
	      }
	      this.version = this.stringify.xmlVersion(version);
	      if (encoding != null) {
	        this.encoding = this.stringify.xmlEncoding(encoding);
	      }
	      if (standalone != null) {
	        this.standalone = this.stringify.xmlStandalone(standalone);
	      }
	    }

	    XMLDeclaration.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<?xml';
	      r += ' version="' + this.version + '"';
	      if (this.encoding != null) {
	        r += ' encoding="' + this.encoding + '"';
	      }
	      if (this.standalone != null) {
	        r += ' standalone="' + this.standalone + '"';
	      }
	      r += '?>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLDeclaration;

	  })(XMLNode);

	}).call(this);


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var baseAssign = __webpack_require__(218),
	    baseCreate = __webpack_require__(219);

	/**
	 * Creates an object that inherits from the `prototype` object. If a
	 * `properties` object is given, its own enumerable string keyed properties
	 * are assigned to the created object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Object
	 * @param {Object} prototype The object to inherit from.
	 * @param {Object} [properties] The properties to assign to the object.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * function Shape() {
	 *   this.x = 0;
	 *   this.y = 0;
	 * }
	 *
	 * function Circle() {
	 *   Shape.call(this);
	 * }
	 *
	 * Circle.prototype = _.create(Shape.prototype, {
	 *   'constructor': Circle
	 * });
	 *
	 * var circle = new Circle;
	 * circle instanceof Circle;
	 * // => true
	 *
	 * circle instanceof Shape;
	 * // => true
	 */
	function create(prototype, properties) {
	  var result = baseCreate(prototype);
	  return properties == null ? result : baseAssign(result, properties);
	}

	module.exports = create;


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(183),
	    keys = __webpack_require__(198);

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	module.exports = baseAssign;


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(177);

	/** Built-in value references. */
	var objectCreate = Object.create;

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate = (function() {
	  function object() {}
	  return function(proto) {
	    if (!isObject(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object;
	    object.prototype = undefined;
	    return result;
	  };
	}());

	module.exports = baseCreate;


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLRaw, XMLText, isEmpty, isFunction, isObject,
	    hasProp = {}.hasOwnProperty;

	  isObject = __webpack_require__(177);

	  isFunction = __webpack_require__(170);

	  isEmpty = __webpack_require__(221);

	  XMLElement = null;

	  XMLCData = null;

	  XMLComment = null;

	  XMLDeclaration = null;

	  XMLDocType = null;

	  XMLRaw = null;

	  XMLText = null;

	  module.exports = XMLNode = (function() {
	    function XMLNode(parent) {
	      this.parent = parent;
	      this.options = this.parent.options;
	      this.stringify = this.parent.stringify;
	      if (XMLElement === null) {
	        XMLElement = __webpack_require__(228);
	        XMLCData = __webpack_require__(311);
	        XMLComment = __webpack_require__(312);
	        XMLDeclaration = __webpack_require__(216);
	        XMLDocType = __webpack_require__(313);
	        XMLRaw = __webpack_require__(318);
	        XMLText = __webpack_require__(319);
	      }
	    }

	    XMLNode.prototype.element = function(name, attributes, text) {
	      var childNode, item, j, k, key, lastChild, len, len1, ref, val;
	      lastChild = null;
	      if (attributes == null) {
	        attributes = {};
	      }
	      attributes = attributes.valueOf();
	      if (!isObject(attributes)) {
	        ref = [attributes, text], text = ref[0], attributes = ref[1];
	      }
	      if (name != null) {
	        name = name.valueOf();
	      }
	      if (Array.isArray(name)) {
	        for (j = 0, len = name.length; j < len; j++) {
	          item = name[j];
	          lastChild = this.element(item);
	        }
	      } else if (isFunction(name)) {
	        lastChild = this.element(name.apply());
	      } else if (isObject(name)) {
	        for (key in name) {
	          if (!hasProp.call(name, key)) continue;
	          val = name[key];
	          if (isFunction(val)) {
	            val = val.apply();
	          }
	          if ((isObject(val)) && (isEmpty(val))) {
	            val = null;
	          }
	          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
	            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
	          } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && key.indexOf(this.stringify.convertPIKey) === 0) {
	            lastChild = this.instruction(key.substr(this.stringify.convertPIKey.length), val);
	          } else if (!this.options.separateArrayItems && Array.isArray(val)) {
	            for (k = 0, len1 = val.length; k < len1; k++) {
	              item = val[k];
	              childNode = {};
	              childNode[key] = item;
	              lastChild = this.element(childNode);
	            }
	          } else if (isObject(val)) {
	            lastChild = this.element(key);
	            lastChild.element(val);
	          } else {
	            lastChild = this.element(key, val);
	          }
	        }
	      } else {
	        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
	          lastChild = this.text(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
	          lastChild = this.cdata(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
	          lastChild = this.comment(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
	          lastChild = this.raw(text);
	        } else {
	          lastChild = this.node(name, attributes, text);
	        }
	      }
	      if (lastChild == null) {
	        throw new Error("Could not create any elements with: " + name);
	      }
	      return lastChild;
	    };

	    XMLNode.prototype.insertBefore = function(name, attributes, text) {
	      var child, i, removed;
	      if (this.isRoot) {
	        throw new Error("Cannot insert elements at root level");
	      }
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i);
	      child = this.parent.element(name, attributes, text);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return child;
	    };

	    XMLNode.prototype.insertAfter = function(name, attributes, text) {
	      var child, i, removed;
	      if (this.isRoot) {
	        throw new Error("Cannot insert elements at root level");
	      }
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i + 1);
	      child = this.parent.element(name, attributes, text);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return child;
	    };

	    XMLNode.prototype.remove = function() {
	      var i, ref;
	      if (this.isRoot) {
	        throw new Error("Cannot remove the root element");
	      }
	      i = this.parent.children.indexOf(this);
	      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref = [])), ref;
	      return this.parent;
	    };

	    XMLNode.prototype.node = function(name, attributes, text) {
	      var child, ref;
	      if (name != null) {
	        name = name.valueOf();
	      }
	      if (attributes == null) {
	        attributes = {};
	      }
	      attributes = attributes.valueOf();
	      if (!isObject(attributes)) {
	        ref = [attributes, text], text = ref[0], attributes = ref[1];
	      }
	      child = new XMLElement(this, name, attributes);
	      if (text != null) {
	        child.text(text);
	      }
	      this.children.push(child);
	      return child;
	    };

	    XMLNode.prototype.text = function(value) {
	      var child;
	      child = new XMLText(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.cdata = function(value) {
	      var child;
	      child = new XMLCData(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.comment = function(value) {
	      var child;
	      child = new XMLComment(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.raw = function(value) {
	      var child;
	      child = new XMLRaw(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.declaration = function(version, encoding, standalone) {
	      var doc, xmldec;
	      doc = this.document();
	      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
	      doc.xmldec = xmldec;
	      return doc.root();
	    };

	    XMLNode.prototype.doctype = function(pubID, sysID) {
	      var doc, doctype;
	      doc = this.document();
	      doctype = new XMLDocType(doc, pubID, sysID);
	      doc.doctype = doctype;
	      return doctype;
	    };

	    XMLNode.prototype.up = function() {
	      if (this.isRoot) {
	        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
	      }
	      return this.parent;
	    };

	    XMLNode.prototype.root = function() {
	      var child;
	      if (this.isRoot) {
	        return this;
	      }
	      child = this.parent;
	      while (!child.isRoot) {
	        child = child.parent;
	      }
	      return child;
	    };

	    XMLNode.prototype.document = function() {
	      return this.root().documentObject;
	    };

	    XMLNode.prototype.end = function(options) {
	      return this.document().toString(options);
	    };

	    XMLNode.prototype.prev = function() {
	      var i;
	      if (this.isRoot) {
	        throw new Error("Root node has no siblings");
	      }
	      i = this.parent.children.indexOf(this);
	      if (i < 1) {
	        throw new Error("Already at the first node");
	      }
	      return this.parent.children[i - 1];
	    };

	    XMLNode.prototype.next = function() {
	      var i;
	      if (this.isRoot) {
	        throw new Error("Root node has no siblings");
	      }
	      i = this.parent.children.indexOf(this);
	      if (i === -1 || i === this.parent.children.length - 1) {
	        throw new Error("Already at the last node");
	      }
	      return this.parent.children[i + 1];
	    };

	    XMLNode.prototype.importXMLBuilder = function(xmlbuilder) {
	      var clonedRoot;
	      clonedRoot = xmlbuilder.root().clone();
	      clonedRoot.parent = this;
	      clonedRoot.isRoot = false;
	      this.children.push(clonedRoot);
	      return this;
	    };

	    XMLNode.prototype.ele = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };

	    XMLNode.prototype.nod = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };

	    XMLNode.prototype.txt = function(value) {
	      return this.text(value);
	    };

	    XMLNode.prototype.dat = function(value) {
	      return this.cdata(value);
	    };

	    XMLNode.prototype.com = function(value) {
	      return this.comment(value);
	    };

	    XMLNode.prototype.doc = function() {
	      return this.document();
	    };

	    XMLNode.prototype.dec = function(version, encoding, standalone) {
	      return this.declaration(version, encoding, standalone);
	    };

	    XMLNode.prototype.dtd = function(pubID, sysID) {
	      return this.doctype(pubID, sysID);
	    };

	    XMLNode.prototype.e = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };

	    XMLNode.prototype.n = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };

	    XMLNode.prototype.t = function(value) {
	      return this.text(value);
	    };

	    XMLNode.prototype.d = function(value) {
	      return this.cdata(value);
	    };

	    XMLNode.prototype.c = function(value) {
	      return this.comment(value);
	    };

	    XMLNode.prototype.r = function(value) {
	      return this.raw(value);
	    };

	    XMLNode.prototype.u = function() {
	      return this.up();
	    };

	    return XMLNode;

	  })();

	}).call(this);


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var baseKeys = __webpack_require__(211),
	    getTag = __webpack_require__(222),
	    isArguments = __webpack_require__(201),
	    isArray = __webpack_require__(204),
	    isArrayLike = __webpack_require__(194),
	    isBuffer = __webpack_require__(205),
	    isPrototype = __webpack_require__(197),
	    isTypedArray = __webpack_require__(207);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    setTag = '[object Set]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if `value` is an empty object, collection, map, or set.
	 *
	 * Objects are considered empty if they have no own enumerable string keyed
	 * properties.
	 *
	 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	 * jQuery-like collections are considered empty if they have a `length` of `0`.
	 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */
	function isEmpty(value) {
	  if (value == null) {
	    return true;
	  }
	  if (isArrayLike(value) &&
	      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	    return !value.length;
	  }
	  var tag = getTag(value);
	  if (tag == mapTag || tag == setTag) {
	    return !value.size;
	  }
	  if (isPrototype(value)) {
	    return !baseKeys(value).length;
	  }
	  for (var key in value) {
	    if (hasOwnProperty.call(value, key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = isEmpty;


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var DataView = __webpack_require__(223),
	    Map = __webpack_require__(224),
	    Promise = __webpack_require__(225),
	    Set = __webpack_require__(226),
	    WeakMap = __webpack_require__(227),
	    baseGetTag = __webpack_require__(171),
	    toSource = __webpack_require__(180);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';

	var dataViewTag = '[object DataView]';

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = baseGetTag(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	module.exports = getTag;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(168),
	    root = __webpack_require__(173);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView');

	module.exports = DataView;


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(168),
	    root = __webpack_require__(173);

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');

	module.exports = Map;


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(168),
	    root = __webpack_require__(173);

	/* Built-in method references that are verified to be native. */
	var Promise = getNative(root, 'Promise');

	module.exports = Promise;


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(168),
	    root = __webpack_require__(173);

	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');

	module.exports = Set;


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(168),
	    root = __webpack_require__(173);

	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');

	module.exports = WeakMap;


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLAttribute, XMLElement, XMLNode, XMLProcessingInstruction, create, every, isFunction, isObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  create = __webpack_require__(217);

	  isObject = __webpack_require__(177);

	  isFunction = __webpack_require__(170);

	  every = __webpack_require__(229);

	  XMLNode = __webpack_require__(220);

	  XMLAttribute = __webpack_require__(309);

	  XMLProcessingInstruction = __webpack_require__(310);

	  module.exports = XMLElement = (function(superClass) {
	    extend(XMLElement, superClass);

	    function XMLElement(parent, name, attributes) {
	      XMLElement.__super__.constructor.call(this, parent);
	      if (name == null) {
	        throw new Error("Missing element name");
	      }
	      this.name = this.stringify.eleName(name);
	      this.children = [];
	      this.instructions = [];
	      this.attributes = {};
	      if (attributes != null) {
	        this.attribute(attributes);
	      }
	    }

	    XMLElement.prototype.clone = function() {
	      var att, attName, clonedSelf, i, len, pi, ref, ref1;
	      clonedSelf = create(XMLElement.prototype, this);
	      if (clonedSelf.isRoot) {
	        clonedSelf.documentObject = null;
	      }
	      clonedSelf.attributes = {};
	      ref = this.attributes;
	      for (attName in ref) {
	        if (!hasProp.call(ref, attName)) continue;
	        att = ref[attName];
	        clonedSelf.attributes[attName] = att.clone();
	      }
	      clonedSelf.instructions = [];
	      ref1 = this.instructions;
	      for (i = 0, len = ref1.length; i < len; i++) {
	        pi = ref1[i];
	        clonedSelf.instructions.push(pi.clone());
	      }
	      clonedSelf.children = [];
	      this.children.forEach(function(child) {
	        var clonedChild;
	        clonedChild = child.clone();
	        clonedChild.parent = clonedSelf;
	        return clonedSelf.children.push(clonedChild);
	      });
	      return clonedSelf;
	    };

	    XMLElement.prototype.attribute = function(name, value) {
	      var attName, attValue;
	      if (name != null) {
	        name = name.valueOf();
	      }
	      if (isObject(name)) {
	        for (attName in name) {
	          if (!hasProp.call(name, attName)) continue;
	          attValue = name[attName];
	          this.attribute(attName, attValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        if (!this.options.skipNullAttributes || (value != null)) {
	          this.attributes[name] = new XMLAttribute(this, name, value);
	        }
	      }
	      return this;
	    };

	    XMLElement.prototype.removeAttribute = function(name) {
	      var attName, i, len;
	      if (name == null) {
	        throw new Error("Missing attribute name");
	      }
	      name = name.valueOf();
	      if (Array.isArray(name)) {
	        for (i = 0, len = name.length; i < len; i++) {
	          attName = name[i];
	          delete this.attributes[attName];
	        }
	      } else {
	        delete this.attributes[name];
	      }
	      return this;
	    };

	    XMLElement.prototype.instruction = function(target, value) {
	      var i, insTarget, insValue, instruction, len;
	      if (target != null) {
	        target = target.valueOf();
	      }
	      if (value != null) {
	        value = value.valueOf();
	      }
	      if (Array.isArray(target)) {
	        for (i = 0, len = target.length; i < len; i++) {
	          insTarget = target[i];
	          this.instruction(insTarget);
	        }
	      } else if (isObject(target)) {
	        for (insTarget in target) {
	          if (!hasProp.call(target, insTarget)) continue;
	          insValue = target[insTarget];
	          this.instruction(insTarget, insValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        instruction = new XMLProcessingInstruction(this, target, value);
	        this.instructions.push(instruction);
	      }
	      return this;
	    };

	    XMLElement.prototype.toString = function(options, level) {
	      var att, child, i, indent, instruction, j, len, len1, name, newline, offset, pretty, r, ref, ref1, ref2, ref3, ref4, ref5, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      ref3 = this.instructions;
	      for (i = 0, len = ref3.length; i < len; i++) {
	        instruction = ref3[i];
	        r += instruction.toString(options, level);
	      }
	      if (pretty) {
	        r += space;
	      }
	      r += '<' + this.name;
	      ref4 = this.attributes;
	      for (name in ref4) {
	        if (!hasProp.call(ref4, name)) continue;
	        att = ref4[name];
	        r += att.toString(options);
	      }
	      if (this.children.length === 0 || every(this.children, function(e) {
	        return e.value === '';
	      })) {
	        r += '/>';
	        if (pretty) {
	          r += newline;
	        }
	      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {
	        r += '>';
	        r += this.children[0].value;
	        r += '</' + this.name + '>';
	        r += newline;
	      } else {
	        r += '>';
	        if (pretty) {
	          r += newline;
	        }
	        ref5 = this.children;
	        for (j = 0, len1 = ref5.length; j < len1; j++) {
	          child = ref5[j];
	          r += child.toString(options, level + 1);
	        }
	        if (pretty) {
	          r += space;
	        }
	        r += '</' + this.name + '>';
	        if (pretty) {
	          r += newline;
	        }
	      }
	      return r;
	    };

	    XMLElement.prototype.att = function(name, value) {
	      return this.attribute(name, value);
	    };

	    XMLElement.prototype.ins = function(target, value) {
	      return this.instruction(target, value);
	    };

	    XMLElement.prototype.a = function(name, value) {
	      return this.attribute(name, value);
	    };

	    XMLElement.prototype.i = function(target, value) {
	      return this.instruction(target, value);
	    };

	    return XMLElement;

	  })(XMLNode);

	}).call(this);


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	var arrayEvery = __webpack_require__(230),
	    baseEvery = __webpack_require__(231),
	    baseIteratee = __webpack_require__(237),
	    isArray = __webpack_require__(204),
	    isIterateeCall = __webpack_require__(193);

	/**
	 * Checks if `predicate` returns truthy for **all** elements of `collection`.
	 * Iteration is stopped once `predicate` returns falsey. The predicate is
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * **Note:** This method returns `true` for
	 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	 * elements of empty collections.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.every([true, 1, null, 'yes'], Boolean);
	 * // => false
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': false },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.every(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.every(users, ['active', false]);
	 * // => true
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.every(users, 'active');
	 * // => false
	 */
	function every(collection, predicate, guard) {
	  var func = isArray(collection) ? arrayEvery : baseEvery;
	  if (guard && isIterateeCall(collection, predicate, guard)) {
	    predicate = undefined;
	  }
	  return func(collection, baseIteratee(predicate, 3));
	}

	module.exports = every;


/***/ },
/* 230 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.every` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 */
	function arrayEvery(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (!predicate(array[index], index, array)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = arrayEvery;


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(232);

	/**
	 * The base implementation of `_.every` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`
	 */
	function baseEvery(collection, predicate) {
	  var result = true;
	  baseEach(collection, function(value, index, collection) {
	    result = !!predicate(value, index, collection);
	    return result;
	  });
	  return result;
	}

	module.exports = baseEvery;


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(233),
	    createBaseEach = __webpack_require__(236);

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(234),
	    keys = __webpack_require__(198);

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(235);

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ },
/* 235 */
/***/ function(module, exports) {

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(194);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(238),
	    baseMatchesProperty = __webpack_require__(290),
	    identity = __webpack_require__(186),
	    isArray = __webpack_require__(204),
	    property = __webpack_require__(306);

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if (typeof value == 'object') {
	    return isArray(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property(value);
	}

	module.exports = baseIteratee;


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(239),
	    getMatchData = __webpack_require__(287),
	    matchesStrictComparable = __webpack_require__(289);

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(240),
	    baseIsEqual = __webpack_require__(268);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(241),
	    stackClear = __webpack_require__(248),
	    stackDelete = __webpack_require__(249),
	    stackGet = __webpack_require__(250),
	    stackHas = __webpack_require__(251),
	    stackSet = __webpack_require__(252);

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	module.exports = Stack;


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	var listCacheClear = __webpack_require__(242),
	    listCacheDelete = __webpack_require__(243),
	    listCacheGet = __webpack_require__(245),
	    listCacheHas = __webpack_require__(246),
	    listCacheSet = __webpack_require__(247);

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	module.exports = ListCache;


/***/ },
/* 242 */
/***/ function(module, exports) {

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	module.exports = listCacheClear;


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(244);

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	module.exports = listCacheDelete;


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(182);

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	module.exports = assocIndexOf;


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(244);

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	module.exports = listCacheGet;


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(244);

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	module.exports = listCacheHas;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(244);

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	module.exports = listCacheSet;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(241);

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	  this.size = 0;
	}

	module.exports = stackClear;


/***/ },
/* 249 */
/***/ function(module, exports) {

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	module.exports = stackDelete;


/***/ },
/* 250 */
/***/ function(module, exports) {

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	module.exports = stackGet;


/***/ },
/* 251 */
/***/ function(module, exports) {

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	module.exports = stackHas;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(241),
	    Map = __webpack_require__(224),
	    MapCache = __webpack_require__(253);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	module.exports = stackSet;


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var mapCacheClear = __webpack_require__(254),
	    mapCacheDelete = __webpack_require__(262),
	    mapCacheGet = __webpack_require__(265),
	    mapCacheHas = __webpack_require__(266),
	    mapCacheSet = __webpack_require__(267);

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	module.exports = MapCache;


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(255),
	    ListCache = __webpack_require__(241),
	    Map = __webpack_require__(224);

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	module.exports = mapCacheClear;


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	var hashClear = __webpack_require__(256),
	    hashDelete = __webpack_require__(258),
	    hashGet = __webpack_require__(259),
	    hashHas = __webpack_require__(260),
	    hashSet = __webpack_require__(261);

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	module.exports = Hash;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(257);

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}

	module.exports = hashClear;


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(168);

	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');

	module.exports = nativeCreate;


/***/ },
/* 258 */
/***/ function(module, exports) {

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = hashDelete;


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(257);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	module.exports = hashGet;


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(257);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
	}

	module.exports = hashHas;


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(257);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	module.exports = hashSet;


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(263);

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = mapCacheDelete;


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(264);

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	module.exports = getMapData;


/***/ },
/* 264 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	module.exports = isKeyable;


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(263);

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	module.exports = mapCacheGet;


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(263);

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	module.exports = mapCacheHas;


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(263);

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	module.exports = mapCacheSet;


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(269),
	    isObjectLike = __webpack_require__(203);

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}

	module.exports = baseIsEqual;


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(240),
	    equalArrays = __webpack_require__(270),
	    equalByTag = __webpack_require__(276),
	    equalObjects = __webpack_require__(280),
	    getTag = __webpack_require__(222),
	    isArray = __webpack_require__(204),
	    isBuffer = __webpack_require__(205),
	    isTypedArray = __webpack_require__(207);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = objIsArr ? arrayTag : getTag(object),
	      othTag = othIsArr ? arrayTag : getTag(other);

	  objTag = objTag == argsTag ? objectTag : objTag;
	  othTag = othTag == argsTag ? objectTag : othTag;

	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	module.exports = baseIsEqualDeep;


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(271),
	    arraySome = __webpack_require__(274),
	    cacheHas = __webpack_require__(275);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalArrays;


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(253),
	    setCacheAdd = __webpack_require__(272),
	    setCacheHas = __webpack_require__(273);

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	module.exports = SetCache;


/***/ },
/* 272 */
/***/ function(module, exports) {

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	module.exports = setCacheAdd;


/***/ },
/* 273 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	module.exports = setCacheHas;


/***/ },
/* 274 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ },
/* 275 */
/***/ function(module, exports) {

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	module.exports = cacheHas;


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(172),
	    Uint8Array = __webpack_require__(277),
	    eq = __webpack_require__(182),
	    equalArrays = __webpack_require__(270),
	    mapToArray = __webpack_require__(278),
	    setToArray = __webpack_require__(279);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(173);

	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;

	module.exports = Uint8Array;


/***/ },
/* 278 */
/***/ function(module, exports) {

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	module.exports = mapToArray;


/***/ },
/* 279 */
/***/ function(module, exports) {

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	module.exports = setToArray;


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	var getAllKeys = __webpack_require__(281);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      objProps = getAllKeys(object),
	      objLength = objProps.length,
	      othProps = getAllKeys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalObjects;


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(282),
	    getSymbols = __webpack_require__(284),
	    keys = __webpack_require__(198);

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	module.exports = getAllKeys;


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(283),
	    isArray = __webpack_require__(204);

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	module.exports = baseGetAllKeys;


/***/ },
/* 283 */
/***/ function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(285),
	    stubArray = __webpack_require__(286);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return arrayFilter(nativeGetSymbols(object), function(symbol) {
	    return propertyIsEnumerable.call(object, symbol);
	  });
	};

	module.exports = getSymbols;


/***/ },
/* 285 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	module.exports = arrayFilter;


/***/ },
/* 286 */
/***/ function(module, exports) {

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	module.exports = stubArray;


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(288),
	    keys = __webpack_require__(198);

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = keys(object),
	      length = result.length;

	  while (length--) {
	    var key = result[length],
	        value = object[key];

	    result[length] = [key, value, isStrictComparable(value)];
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(177);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ },
/* 289 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}

	module.exports = matchesStrictComparable;


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(268),
	    get = __webpack_require__(291),
	    hasIn = __webpack_require__(303),
	    isKey = __webpack_require__(294),
	    isStrictComparable = __webpack_require__(288),
	    matchesStrictComparable = __webpack_require__(289),
	    toKey = __webpack_require__(302);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }
	  return function(object) {
	    var objValue = get(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(292);

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	module.exports = get;


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(293),
	    toKey = __webpack_require__(302);

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(204),
	    isKey = __webpack_require__(294),
	    stringToPath = __webpack_require__(296),
	    toString = __webpack_require__(299);

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray(value)) {
	    return value;
	  }
	  return isKey(value, object) ? [value] : stringToPath(toString(value));
	}

	module.exports = castPath;


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(204),
	    isSymbol = __webpack_require__(295);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	module.exports = isKey;


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(171),
	    isObjectLike = __webpack_require__(203);

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}

	module.exports = isSymbol;


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	var memoizeCapped = __webpack_require__(297);

	/** Used to match property names within property paths. */
	var reLeadingDot = /^\./,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoizeCapped(function(string) {
	  var result = [];
	  if (reLeadingDot.test(string)) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	module.exports = stringToPath;


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(298);

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	module.exports = memoizeCapped;


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(253);

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}

	// Expose `MapCache`.
	memoize.Cache = MapCache;

	module.exports = memoize;


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(300);

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	module.exports = toString;


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(172),
	    arrayMap = __webpack_require__(301),
	    isArray = __webpack_require__(204),
	    isSymbol = __webpack_require__(295);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = baseToString;


/***/ },
/* 301 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(295);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = toKey;


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	var baseHasIn = __webpack_require__(304),
	    hasPath = __webpack_require__(305);

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}

	module.exports = hasIn;


/***/ },
/* 304 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}

	module.exports = baseHasIn;


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(293),
	    isArguments = __webpack_require__(201),
	    isArray = __webpack_require__(204),
	    isIndex = __webpack_require__(196),
	    isLength = __webpack_require__(195),
	    toKey = __webpack_require__(302);

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = castPath(path, object);

	  var index = -1,
	      length = path.length,
	      result = false;

	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength(length) && isIndex(key, length) &&
	    (isArray(object) || isArguments(object));
	}

	module.exports = hasPath;


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(307),
	    basePropertyDeep = __webpack_require__(308),
	    isKey = __webpack_require__(294),
	    toKey = __webpack_require__(302);

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ },
/* 307 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(292);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return baseGet(object, path);
	  };
	}

	module.exports = basePropertyDeep;


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLAttribute, create;

	  create = __webpack_require__(217);

	  module.exports = XMLAttribute = (function() {
	    function XMLAttribute(parent, name, value) {
	      this.stringify = parent.stringify;
	      if (name == null) {
	        throw new Error("Missing attribute name of element " + parent.name);
	      }
	      if (value == null) {
	        throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
	      }
	      this.name = this.stringify.attName(name);
	      this.value = this.stringify.attValue(value);
	    }

	    XMLAttribute.prototype.clone = function() {
	      return create(XMLAttribute.prototype, this);
	    };

	    XMLAttribute.prototype.toString = function(options, level) {
	      return ' ' + this.name + '="' + this.value + '"';
	    };

	    return XMLAttribute;

	  })();

	}).call(this);


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLProcessingInstruction, create;

	  create = __webpack_require__(217);

	  module.exports = XMLProcessingInstruction = (function() {
	    function XMLProcessingInstruction(parent, target, value) {
	      this.stringify = parent.stringify;
	      if (target == null) {
	        throw new Error("Missing instruction target");
	      }
	      this.target = this.stringify.insTarget(target);
	      if (value) {
	        this.value = this.stringify.insValue(value);
	      }
	    }

	    XMLProcessingInstruction.prototype.clone = function() {
	      return create(XMLProcessingInstruction.prototype, this);
	    };

	    XMLProcessingInstruction.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<?';
	      r += this.target;
	      if (this.value) {
	        r += ' ' + this.value;
	      }
	      r += '?>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLProcessingInstruction;

	  })();

	}).call(this);


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLCData, XMLNode, create,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  create = __webpack_require__(217);

	  XMLNode = __webpack_require__(220);

	  module.exports = XMLCData = (function(superClass) {
	    extend(XMLCData, superClass);

	    function XMLCData(parent, text) {
	      XMLCData.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing CDATA text");
	      }
	      this.text = this.stringify.cdata(text);
	    }

	    XMLCData.prototype.clone = function() {
	      return create(XMLCData.prototype, this);
	    };

	    XMLCData.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<![CDATA[' + this.text + ']]>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLCData;

	  })(XMLNode);

	}).call(this);


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLComment, XMLNode, create,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  create = __webpack_require__(217);

	  XMLNode = __webpack_require__(220);

	  module.exports = XMLComment = (function(superClass) {
	    extend(XMLComment, superClass);

	    function XMLComment(parent, text) {
	      XMLComment.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing comment text");
	      }
	      this.text = this.stringify.comment(text);
	    }

	    XMLComment.prototype.clone = function() {
	      return create(XMLComment.prototype, this);
	    };

	    XMLComment.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!-- ' + this.text + ' -->';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLComment;

	  })(XMLNode);

	}).call(this);


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLProcessingInstruction, create, isObject;

	  create = __webpack_require__(217);

	  isObject = __webpack_require__(177);

	  XMLCData = __webpack_require__(311);

	  XMLComment = __webpack_require__(312);

	  XMLDTDAttList = __webpack_require__(314);

	  XMLDTDEntity = __webpack_require__(315);

	  XMLDTDElement = __webpack_require__(316);

	  XMLDTDNotation = __webpack_require__(317);

	  XMLProcessingInstruction = __webpack_require__(310);

	  module.exports = XMLDocType = (function() {
	    function XMLDocType(parent, pubID, sysID) {
	      var ref, ref1;
	      this.documentObject = parent;
	      this.stringify = this.documentObject.stringify;
	      this.children = [];
	      if (isObject(pubID)) {
	        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
	      }
	      if (sysID == null) {
	        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
	      }
	      if (pubID != null) {
	        this.pubID = this.stringify.dtdPubID(pubID);
	      }
	      if (sysID != null) {
	        this.sysID = this.stringify.dtdSysID(sysID);
	      }
	    }

	    XMLDocType.prototype.element = function(name, value) {
	      var child;
	      child = new XMLDTDElement(this, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      var child;
	      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.entity = function(name, value) {
	      var child;
	      child = new XMLDTDEntity(this, false, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.pEntity = function(name, value) {
	      var child;
	      child = new XMLDTDEntity(this, true, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.notation = function(name, value) {
	      var child;
	      child = new XMLDTDNotation(this, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.cdata = function(value) {
	      var child;
	      child = new XMLCData(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.comment = function(value) {
	      var child;
	      child = new XMLComment(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.instruction = function(target, value) {
	      var child;
	      child = new XMLProcessingInstruction(this, target, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.root = function() {
	      return this.documentObject.root();
	    };

	    XMLDocType.prototype.document = function() {
	      return this.documentObject;
	    };

	    XMLDocType.prototype.toString = function(options, level) {
	      var child, i, indent, len, newline, offset, pretty, r, ref, ref1, ref2, ref3, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!DOCTYPE ' + this.root().name;
	      if (this.pubID && this.sysID) {
	        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
	      } else if (this.sysID) {
	        r += ' SYSTEM "' + this.sysID + '"';
	      }
	      if (this.children.length > 0) {
	        r += ' [';
	        if (pretty) {
	          r += newline;
	        }
	        ref3 = this.children;
	        for (i = 0, len = ref3.length; i < len; i++) {
	          child = ref3[i];
	          r += child.toString(options, level + 1);
	        }
	        r += ']';
	      }
	      r += '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    XMLDocType.prototype.ele = function(name, value) {
	      return this.element(name, value);
	    };

	    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
	    };

	    XMLDocType.prototype.ent = function(name, value) {
	      return this.entity(name, value);
	    };

	    XMLDocType.prototype.pent = function(name, value) {
	      return this.pEntity(name, value);
	    };

	    XMLDocType.prototype.not = function(name, value) {
	      return this.notation(name, value);
	    };

	    XMLDocType.prototype.dat = function(value) {
	      return this.cdata(value);
	    };

	    XMLDocType.prototype.com = function(value) {
	      return this.comment(value);
	    };

	    XMLDocType.prototype.ins = function(target, value) {
	      return this.instruction(target, value);
	    };

	    XMLDocType.prototype.up = function() {
	      return this.root();
	    };

	    XMLDocType.prototype.doc = function() {
	      return this.document();
	    };

	    return XMLDocType;

	  })();

	}).call(this);


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLDTDAttList, create;

	  create = __webpack_require__(217);

	  module.exports = XMLDTDAttList = (function() {
	    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      this.stringify = parent.stringify;
	      if (elementName == null) {
	        throw new Error("Missing DTD element name");
	      }
	      if (attributeName == null) {
	        throw new Error("Missing DTD attribute name");
	      }
	      if (!attributeType) {
	        throw new Error("Missing DTD attribute type");
	      }
	      if (!defaultValueType) {
	        throw new Error("Missing DTD attribute default");
	      }
	      if (defaultValueType.indexOf('#') !== 0) {
	        defaultValueType = '#' + defaultValueType;
	      }
	      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
	        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
	      }
	      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
	        throw new Error("Default value only applies to #FIXED or #DEFAULT");
	      }
	      this.elementName = this.stringify.eleName(elementName);
	      this.attributeName = this.stringify.attName(attributeName);
	      this.attributeType = this.stringify.dtdAttType(attributeType);
	      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
	      this.defaultValueType = defaultValueType;
	    }

	    XMLDTDAttList.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!ATTLIST ' + this.elementName + ' ' + this.attributeName + ' ' + this.attributeType;
	      if (this.defaultValueType !== '#DEFAULT') {
	        r += ' ' + this.defaultValueType;
	      }
	      if (this.defaultValue) {
	        r += ' "' + this.defaultValue + '"';
	      }
	      r += '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLDTDAttList;

	  })();

	}).call(this);


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLDTDEntity, create, isObject;

	  create = __webpack_require__(217);

	  isObject = __webpack_require__(177);

	  module.exports = XMLDTDEntity = (function() {
	    function XMLDTDEntity(parent, pe, name, value) {
	      this.stringify = parent.stringify;
	      if (name == null) {
	        throw new Error("Missing entity name");
	      }
	      if (value == null) {
	        throw new Error("Missing entity value");
	      }
	      this.pe = !!pe;
	      this.name = this.stringify.eleName(name);
	      if (!isObject(value)) {
	        this.value = this.stringify.dtdEntityValue(value);
	      } else {
	        if (!value.pubID && !value.sysID) {
	          throw new Error("Public and/or system identifiers are required for an external entity");
	        }
	        if (value.pubID && !value.sysID) {
	          throw new Error("System identifier is required for a public external entity");
	        }
	        if (value.pubID != null) {
	          this.pubID = this.stringify.dtdPubID(value.pubID);
	        }
	        if (value.sysID != null) {
	          this.sysID = this.stringify.dtdSysID(value.sysID);
	        }
	        if (value.nData != null) {
	          this.nData = this.stringify.dtdNData(value.nData);
	        }
	        if (this.pe && this.nData) {
	          throw new Error("Notation declaration is not allowed in a parameter entity");
	        }
	      }
	    }

	    XMLDTDEntity.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!ENTITY';
	      if (this.pe) {
	        r += ' %';
	      }
	      r += ' ' + this.name;
	      if (this.value) {
	        r += ' "' + this.value + '"';
	      } else {
	        if (this.pubID && this.sysID) {
	          r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
	        } else if (this.sysID) {
	          r += ' SYSTEM "' + this.sysID + '"';
	        }
	        if (this.nData) {
	          r += ' NDATA ' + this.nData;
	        }
	      }
	      r += '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLDTDEntity;

	  })();

	}).call(this);


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLDTDElement, create;

	  create = __webpack_require__(217);

	  module.exports = XMLDTDElement = (function() {
	    function XMLDTDElement(parent, name, value) {
	      this.stringify = parent.stringify;
	      if (name == null) {
	        throw new Error("Missing DTD element name");
	      }
	      if (!value) {
	        value = '(#PCDATA)';
	      }
	      if (Array.isArray(value)) {
	        value = '(' + value.join(',') + ')';
	      }
	      this.name = this.stringify.eleName(name);
	      this.value = this.stringify.dtdElementValue(value);
	    }

	    XMLDTDElement.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!ELEMENT ' + this.name + ' ' + this.value + '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLDTDElement;

	  })();

	}).call(this);


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLDTDNotation, create;

	  create = __webpack_require__(217);

	  module.exports = XMLDTDNotation = (function() {
	    function XMLDTDNotation(parent, name, value) {
	      this.stringify = parent.stringify;
	      if (name == null) {
	        throw new Error("Missing notation name");
	      }
	      if (!value.pubID && !value.sysID) {
	        throw new Error("Public or system identifiers are required for an external entity");
	      }
	      this.name = this.stringify.eleName(name);
	      if (value.pubID != null) {
	        this.pubID = this.stringify.dtdPubID(value.pubID);
	      }
	      if (value.sysID != null) {
	        this.sysID = this.stringify.dtdSysID(value.sysID);
	      }
	    }

	    XMLDTDNotation.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!NOTATION ' + this.name;
	      if (this.pubID && this.sysID) {
	        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
	      } else if (this.pubID) {
	        r += ' PUBLIC "' + this.pubID + '"';
	      } else if (this.sysID) {
	        r += ' SYSTEM "' + this.sysID + '"';
	      }
	      r += '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLDTDNotation;

	  })();

	}).call(this);


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLNode, XMLRaw, create,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  create = __webpack_require__(217);

	  XMLNode = __webpack_require__(220);

	  module.exports = XMLRaw = (function(superClass) {
	    extend(XMLRaw, superClass);

	    function XMLRaw(parent, text) {
	      XMLRaw.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing raw text");
	      }
	      this.value = this.stringify.raw(text);
	    }

	    XMLRaw.prototype.clone = function() {
	      return create(XMLRaw.prototype, this);
	    };

	    XMLRaw.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += this.value;
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLRaw;

	  })(XMLNode);

	}).call(this);


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLNode, XMLText, create,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  create = __webpack_require__(217);

	  XMLNode = __webpack_require__(220);

	  module.exports = XMLText = (function(superClass) {
	    extend(XMLText, superClass);

	    function XMLText(parent, text) {
	      XMLText.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing element text");
	      }
	      this.value = this.stringify.eleText(text);
	    }

	    XMLText.prototype.clone = function() {
	      return create(XMLText.prototype, this);
	    };

	    XMLText.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += this.value;
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLText;

	  })(XMLNode);

	}).call(this);


/***/ },
/* 320 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  "use strict";
	  exports.stripBOM = function(str) {
	    if (str[0] === '\uFEFF') {
	      return str.substring(1);
	    } else {
	      return str;
	    }
	  };

	}).call(this);


/***/ },
/* 321 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  "use strict";
	  var prefixMatch;

	  prefixMatch = new RegExp(/(?!xmlns)^.*:/);

	  exports.normalize = function(str) {
	    return str.toLowerCase();
	  };

	  exports.firstCharLowerCase = function(str) {
	    return str.charAt(0).toLowerCase() + str.slice(1);
	  };

	  exports.stripPrefix = function(str) {
	    return str.replace(prefixMatch, '');
	  };

	  exports.parseNumbers = function(str) {
	    if (!isNaN(str)) {
	      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
	    }
	    return str;
	  };

	  exports.parseBooleans = function(str) {
	    if (/^(?:true|false)$/i.test(str)) {
	      str = str.toLowerCase() === 'true';
	    }
	    return str;
	  };

	}).call(this);


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a {@linkplain Driver WebDriver} client for Microsoft's
	 * Internet Explorer. Before using the IEDriver, you must download the latest
	 * [IEDriverServer](http://selenium-release.storage.googleapis.com/index.html)
	 * and place it on your
	 * [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29). You must also apply
	 * the system configuration outlined on the Selenium project
	 * [wiki](https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver)
	 */

	'use strict';

	const fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    util = __webpack_require__(12);

	const http = __webpack_require__(22),
	    io = __webpack_require__(75),
	    capabilities = __webpack_require__(69),
	    promise = __webpack_require__(66),
	    webdriver = __webpack_require__(71),
	    portprober = __webpack_require__(121),
	    remote = __webpack_require__(122);


	const IEDRIVER_EXE = 'IEDriverServer.exe';



	/**
	 * IEDriverServer logging levels.
	 * @enum {string}
	 */
	const Level = {
	  FATAL: 'FATAL',
	  ERROR: 'ERROR',
	  WARN: 'WARN',
	  INFO: 'INFO',
	  DEBUG: 'DEBUG',
	  TRACE: 'TRACE'
	};



	/**
	 * Option keys:
	 * https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#ie-specific
	 * @enum {string}
	 */
	const Key = {
	  IGNORE_PROTECTED_MODE_SETTINGS: 'ignoreProtectedModeSettings',
	  IGNORE_ZOOM_SETTING: 'ignoreZoomSetting',
	  INITIAL_BROWSER_URL: 'initialBrowserUrl',
	  ENABLE_PERSISTENT_HOVER: 'enablePersistentHover',
	  ENABLE_ELEMENT_CACHE_CLEANUP: 'enableElementCacheCleanup',
	  REQUIRE_WINDOW_FOCUS: 'requireWindowFocus',
	  BROWSER_ATTACH_TIMEOUT: 'browserAttachTimeout',
	  FORCE_CREATE_PROCESS: 'ie.forceCreateProcessApi',
	  BROWSER_COMMAND_LINE_SWITCHES: 'ie.browserCommandLineSwitches',
	  USE_PER_PROCESS_PROXY: 'ie.usePerProcessProxy',
	  ENSURE_CLEAN_SESSION: 'ie.ensureCleanSession',
	  LOG_FILE: 'logFile',
	  LOG_LEVEL: 'logLevel',
	  HOST: 'host',
	  EXTRACT_PATH: 'extractPath',
	  SILENT: 'silent'
	};


	/**
	 * Class for managing IEDriver specific options.
	 */
	class Options {
	  constructor() {
	    /** @private {!Object<(boolean|number|string|!Array<string>)>} */
	    this.options_ = {};

	    /** @private {(capabilities.ProxyConfig|null)} */
	    this.proxy_ = null;
	  }

	  /**
	   * Extracts the IEDriver specific options from the given capabilities
	   * object.
	   * @param {!capabilities.Capabilities} caps The capabilities object.
	   * @return {!Options} The IEDriver options.
	   */
	  static fromCapabilities(caps) {
	    var options = new Options();
	    var map = options.options_;

	    Object.keys(Key).forEach(function(key) {
	      key = Key[key];
	      if (caps.has(key)) {
	        map[key] = caps.get(key);
	      }
	    });

	    if (caps.has(capabilities.Capability.PROXY)) {
	      options.setProxy(caps.get(capabilities.Capability.PROXY));
	    }

	    return options;
	  }

	  /**
	   * Whether to disable the protected mode settings check when the session is
	   * created. Disbling this setting may lead to significant instability as the
	   * browser may become unresponsive/hang. Only "best effort" support is provided
	   * when using this capability.
	   *
	   * For more information, refer to the IEDriver's
	   * [required system configuration](http://goo.gl/eH0Yi3).
	   *
	   * @param {boolean} ignoreSettings Whether to ignore protected mode settings.
	   * @return {!Options} A self reference.
	   */
	  introduceFlakinessByIgnoringProtectedModeSettings(ignoreSettings) {
	    this.options_[Key.IGNORE_PROTECTED_MODE_SETTINGS] = !!ignoreSettings;
	    return this;
	  }

	  /**
	   * Indicates whether to skip the check that the browser's zoom level is set to
	   * 100%.
	   *
	   * @param {boolean} ignore Whether to ignore the browser's zoom level settings.
	   * @return {!Options} A self reference.
	   */
	  ignoreZoomSetting(ignore) {
	    this.options_[Key.IGNORE_ZOOM_SETTING] = !!ignore;
	    return this;
	  }

	  /**
	   * Sets the initial URL loaded when IE starts. This is intended to be used with
	   * {@link #ignoreProtectedModeSettings} to allow the user to initialize IE in
	   * the proper Protected Mode zone. Setting this option may cause browser
	   * instability or flaky and unresponsive code. Only "best effort" support is
	   * provided when using this option.
	   *
	   * @param {string} url The initial browser URL.
	   * @return {!Options} A self reference.
	   */
	  initialBrowserUrl(url) {
	    this.options_[Key.INITIAL_BROWSER_URL] = url;
	    return this;
	  }

	  /**
	   * Configures whether to enable persistent mouse hovering (true by default).
	   * Persistent hovering is achieved by continuously firing mouse over events at
	   * the last location the mouse cursor has been moved to.
	   *
	   * @param {boolean} enable Whether to enable persistent hovering.
	   * @return {!Options} A self reference.
	   */
	  enablePersistentHover(enable) {
	    this.options_[Key.ENABLE_PERSISTENT_HOVER] = !!enable;
	    return this;
	  }

	  /**
	   * Configures whether the driver should attempt to remove obsolete
	   * {@linkplain webdriver.WebElement WebElements} from its internal cache on
	   * page navigation (true by default). Disabling this option will cause the
	   * driver to run with a larger memory footprint.
	   *
	   * @param {boolean} enable Whether to enable element reference cleanup.
	   * @return {!Options} A self reference.
	   */
	  enableElementCacheCleanup(enable) {
	    this.options_[Key.ENABLE_ELEMENT_CACHE_CLEANUP] = !!enable;
	    return this;
	  }

	  /**
	   * Configures whether to require the IE window to have input focus before
	   * performing any user interactions (i.e. mouse or keyboard events). This
	   * option is disabled by default, but delivers much more accurate interaction
	   * events when enabled.
	   *
	   * @param {boolean} require Whether to require window focus.
	   * @return {!Options} A self reference.
	   */
	  requireWindowFocus(require) {
	    this.options_[Key.REQUIRE_WINDOW_FOCUS] = !!require;
	    return this;
	  }

	  /**
	   * Configures the timeout, in milliseconds, that the driver will attempt to
	   * located and attach to a newly opened instance of Internet Explorer. The
	   * default is zero, which indicates waiting indefinitely.
	   *
	   * @param {number} timeout How long to wait for IE.
	   * @return {!Options} A self reference.
	   */
	  browserAttachTimeout(timeout) {
	    this.options_[Key.BROWSER_ATTACH_TIMEOUT] = Math.max(timeout, 0);
	    return this;
	  }

	  /**
	   * Configures whether to launch Internet Explorer using the CreateProcess API.
	   * If this option is not specified, IE is launched using IELaunchURL, if
	   * available. For IE 8 and above, this option requires the TabProcGrowth
	   * registry value to be set to 0.
	   *
	   * @param {boolean} force Whether to use the CreateProcess API.
	   * @return {!Options} A self reference.
	   */
	  forceCreateProcessApi(force) {
	    this.options_[Key.FORCE_CREATE_PROCESS] = !!force;
	    return this;
	  }

	  /**
	   * Specifies command-line switches to use when launching Internet Explorer.
	   * This is only valid when used with {@link #forceCreateProcessApi}.
	   *
	   * @param {...(string|!Array.<string>)} var_args The arguments to add.
	   * @return {!Options} A self reference.
	   */
	  addArguments(var_args) {
	    var args = this.options_[Key.BROWSER_COMMAND_LINE_SWITCHES] || [];
	    args = args.concat.apply(args, arguments);
	    this.options_[Key.BROWSER_COMMAND_LINE_SWITCHES] = args;
	    return this;
	  }

	  /**
	   * Configures whether proxies should be configured on a per-process basis. If
	   * not set, setting a {@linkplain #setProxy proxy} will configure the system
	   * proxy. The default behavior is to use the system proxy.
	   *
	   * @param {boolean} enable Whether to enable per-process proxy settings.
	   * @return {!Options} A self reference.
	   */
	  usePerProcessProxy(enable) {
	    this.options_[Key.USE_PER_PROCESS_PROXY] = !!enable;
	    return this;
	  }

	  /**
	   * Configures whether to clear the cache, cookies, history, and saved form data
	   * before starting the browser. _Using this capability will clear session data
	   * for all running instances of Internet Explorer, including those started
	   * manually._
	   *
	   * @param {boolean} cleanSession Whether to clear all session data on startup.
	   * @return {!Options} A self reference.
	   */
	  ensureCleanSession(cleanSession) {
	    this.options_[Key.ENSURE_CLEAN_SESSION] = !!cleanSession;
	    return this;
	  }

	  /**
	   * Sets the path to the log file the driver should log to.
	   * @param {string} file The log file path.
	   * @return {!Options} A self reference.
	   */
	  setLogFile(file) {
	    this.options_[Key.LOG_FILE] = file;
	    return this;
	  }

	  /**
	   * Sets the IEDriverServer's logging {@linkplain Level level}.
	   * @param {Level} level The logging level.
	   * @return {!Options} A self reference.
	   */
	  setLogLevel(level) {
	    this.options_[Key.LOG_LEVEL] = level;
	    return this;
	  }

	  /**
	   * Sets the IP address of the driver's host adapter.
	   * @param {string} host The IP address to use.
	   * @return {!Options} A self reference.
	   */
	  setHost(host) {
	    this.options_[Key.HOST] = host;
	    return this;
	  }

	  /**
	   * Sets the path of the temporary data directory to use.
	   * @param {string} path The log file path.
	   * @return {!Options} A self reference.
	   */
	  setExtractPath(path) {
	    this.options_[Key.EXTRACT_PATH] = path;
	    return this;
	  }

	  /**
	   * Sets whether the driver should start in silent mode.
	   * @param {boolean} silent Whether to run in silent mode.
	   * @return {!Options} A self reference.
	   */
	  silent(silent) {
	    this.options_[Key.SILENT] = silent;
	    return this;
	  }

	  /**
	   * Sets the proxy settings for the new session.
	   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.
	   * @return {!Options} A self reference.
	   */
	  setProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * Converts this options instance to a {@link capabilities.Capabilities}
	   * object.
	   * @param {capabilities.Capabilities=} opt_capabilities The capabilities to
	   *     merge these options into, if any.
	   * @return {!capabilities.Capabilities} The capabilities.
	   */
	  toCapabilities(opt_capabilities) {
	    var caps = opt_capabilities || capabilities.Capabilities.ie();
	    if (this.proxy_) {
	      caps.set(capabilities.Capability.PROXY, this.proxy_);
	    }
	    Object.keys(this.options_).forEach(function(key) {
	      caps.set(key, this.options_[key]);
	    }, this);
	    return caps;
	  }
	}


	function createServiceFromCapabilities(capabilities) {
	  if (process.platform !== 'win32') {
	    throw Error(
	        'The IEDriver may only be used on Windows, but you appear to be on ' +
	        process.platform + '. Did you mean to run against a remote ' +
	        'WebDriver server?');
	  }

	  let exe = io.findInPath(IEDRIVER_EXE, true);
	  if (!exe || !fs.existsSync(exe)) {
	    throw Error(
	        `${IEDRIVER_EXE} could not be found on the current PATH. Please ` +
	        `download the latest version of ${IEDRIVER_EXE} from ` +
	        'http://selenium-release.storage.googleapis.com/index.html and ' +
	        'ensure it can be found on your system PATH.');
	  }

	  var args = [];
	  if (capabilities.has(Key.HOST)) {
	    args.push('--host=' + capabilities.get(Key.HOST));
	  }
	  if (capabilities.has(Key.LOG_FILE)) {
	    args.push('--log-file=' + capabilities.get(Key.LOG_FILE));
	  }
	  if (capabilities.has(Key.LOG_LEVEL)) {
	    args.push('--log-level=' + capabilities.get(Key.LOG_LEVEL));
	  }
	  if (capabilities.has(Key.EXTRACT_PATH)) {
	    args.push('--extract-path=' + capabilities.get(Key.EXTRACT_PATH));
	  }
	  if (capabilities.get(Key.SILENT)) {
	    args.push('--silent');
	  }

	  var port = portprober.findFreePort();
	  return new remote.DriverService(exe, {
	    loopback: true,
	    port: port,
	    args: port.then(function(port) {
	      return args.concat('--port=' + port);
	    }),
	    stdio: 'ignore'
	  });
	}


	/**
	 * A WebDriver client for Microsoft's Internet Explorer.
	 */
	class Driver extends webdriver.WebDriver {
	  /**
	   * Creates a new session for Microsoft's Internet Explorer.
	   *
	   * @param {(capabilities.Capabilities|Options)=} opt_config The configuration
	   *     options.
	   * @param {promise.ControlFlow=} opt_flow The control flow to use,
	   *     or {@code null} to use the currently active flow.
	   * @return {!Driver} A new driver instance.
	   */
	  static createSession(opt_config, opt_flow) {
	    var caps = opt_config instanceof Options ?
	        opt_config.toCapabilities() :
	        (opt_config || capabilities.Capabilities.ie());

	    var service = createServiceFromCapabilities(caps);
	    var client = service.start().then(url => new http.HttpClient(url));
	    var executor = new http.Executor(client);

	    return /** @type {!Driver} */(webdriver.WebDriver.createSession(
	        executor, caps, opt_flow, this, () => service.kill()));
	  }

	  /**
	   * This function is a no-op as file detectors are not supported by this
	   * implementation.
	   * @override
	   */
	  setFileDetector() {}
	}


	// PUBLIC API


	exports.Driver = Driver;
	exports.Options = Options;
	exports.Level = Level;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines common conditions for use with
	 * {@link webdriver.WebDriver#wait WebDriver wait}.
	 *
	 * Sample usage:
	 *
	 *     driver.get('http://www.google.com/ncr');
	 *
	 *     var query = driver.wait(until.elementLocated(By.name('q')));
	 *     query.sendKeys('webdriver\n');
	 *
	 *     driver.wait(until.titleIs('webdriver - Google Search'));
	 *
	 * To define a custom condition, simply call WebDriver.wait with a function
	 * that will eventually return a truthy-value (neither null, undefined, false,
	 * 0, or the empty string):
	 *
	 *     driver.wait(function() {
	 *       return driver.getTitle().then(function(title) {
	 *         return title === 'webdriver - Google Search';
	 *       });
	 *     }, 1000);
	 */

	'use strict';

	const by = __webpack_require__(74);
	const By = __webpack_require__(74).By;
	const error = __webpack_require__(64);
	const webdriver = __webpack_require__(71),
	    Condition = webdriver.Condition,
	    WebElementCondition = webdriver.WebElementCondition;


	/**
	 * Creates a condition that will wait until the input driver is able to switch
	 * to the designated frame. The target frame may be specified as
	 *
	 * 1. a numeric index into
	 *     [window.frames](https://developer.mozilla.org/en-US/docs/Web/API/Window.frames)
	 *     for the currently selected frame.
	 * 2. a {@link ./webdriver.WebElement}, which must reference a FRAME or IFRAME
	 *     element on the current page.
	 * 3. a locator which may be used to first locate a FRAME or IFRAME on the
	 *     current page before attempting to switch to it.
	 *
	 * Upon successful resolution of this condition, the driver will be left
	 * focused on the new frame.
	 *
	 * @param {!(number|./webdriver.WebElement|By|
	 *           function(!./webdriver.WebDriver): !./webdriver.WebElement)} frame
	 *     The frame identifier.
	 * @return {!Condition<boolean>} A new condition.
	 */
	exports.ableToSwitchToFrame = function ableToSwitchToFrame(frame) {
	  var condition;
	  if (typeof frame === 'number' || frame instanceof webdriver.WebElement) {
	    condition = attemptToSwitchFrames;
	  } else {
	    condition = function(driver) {
	      let locator = /** @type {!(By|Function)} */(frame);
	      return driver.findElements(locator).then(function(els) {
	        if (els.length) {
	          return attemptToSwitchFrames(driver, els[0]);
	        }
	      });
	    };
	  }

	  return new Condition('to be able to switch to frame', condition);

	  function attemptToSwitchFrames(driver, frame) {
	    return driver.switchTo().frame(frame).then(
	        function() { return true; },
	        function(e) {
	          if (!(e instanceof error.NoSuchFrameError)) {
	            throw e;
	          }
	        });
	  }
	};


	/**
	 * Creates a condition that waits for an alert to be opened. Upon success, the
	 * returned promise will be fulfilled with the handle for the opened alert.
	 *
	 * @return {!Condition<!./webdriver.Alert>} The new condition.
	 */
	exports.alertIsPresent = function alertIsPresent() {
	  return new Condition('for alert to be present', function(driver) {
	    return driver.switchTo().alert().catch(function(e) {
	      if (!(e instanceof error.NoSuchAlertError
	        // XXX: Workaround for GeckoDriver error `TypeError: can't convert null
	        // to object`. For more details, see
	        // https://github.com/SeleniumHQ/selenium/pull/2137
	        || (e instanceof error.WebDriverError
	          && e.message === `can't convert null to object`)
	        )) {
	        throw e;
	      }
	    });
	  });
	};


	/**
	 * Creates a condition that will wait for the current page's title to match the
	 * given value.
	 *
	 * @param {string} title The expected page title.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.titleIs = function titleIs(title) {
	  return new Condition(
	      'for title to be ' + JSON.stringify(title),
	      function(driver) {
	        return driver.getTitle().then(function(t) {
	          return t === title;
	        });
	      });
	};


	/**
	 * Creates a condition that will wait for the current page's title to contain
	 * the given substring.
	 *
	 * @param {string} substr The substring that should be present in the page
	 *     title.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.titleContains = function titleContains(substr) {
	  return new Condition(
	      'for title to contain ' + JSON.stringify(substr),
	      function(driver) {
	        return driver.getTitle().then(function(title) {
	          return title.indexOf(substr) !== -1;
	        });
	      });
	};


	/**
	 * Creates a condition that will wait for the current page's title to match the
	 * given regular expression.
	 *
	 * @param {!RegExp} regex The regular expression to test against.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.titleMatches = function titleMatches(regex) {
	  return new Condition('for title to match ' + regex, function(driver) {
	    return driver.getTitle().then(function(title) {
	      return regex.test(title);
	    });
	  });
	};


	/**
	 * Creates a condition that will wait for the current page's url to match the
	 * given value.
	 *
	 * @param {string} url The expected page url.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.urlIs = function urlIs(url) {
	  return new Condition(
	      'for URL to be ' + JSON.stringify(url),
	      function(driver) {
	        return driver.getCurrentUrl().then(function(u) {
	          return u === url;
	        });
	      });
	};


	/**
	 * Creates a condition that will wait for the current page's url to contain
	 * the given substring.
	 *
	 * @param {string} substrUrl The substring that should be present in the current
	 *     URL.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.urlContains = function urlContains(substrUrl) {
	  return new Condition(
	      'for URL to contain ' + JSON.stringify(substrUrl),
	      function(driver) {
	        return driver.getCurrentUrl().then(function(url) {
	          return url.indexOf(substrUrl) !== -1;
	        });
	      });
	};


	/**
	 * Creates a condition that will wait for the current page's url to match the
	 * given regular expression.
	 *
	 * @param {!RegExp} regex The regular expression to test against.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.urlMatches = function urlMatches(regex) {
	  return new Condition('for URL to match ' + regex, function(driver) {
	    return driver.getCurrentUrl().then(function(url) {
	      return regex.test(url);
	    });
	  });
	};


	/**
	 * Creates a condition that will loop until an element is
	 * {@link ./webdriver.WebDriver#findElement found} with the given locator.
	 *
	 * @param {!(By|Function)} locator The locator to use.
	 * @return {!WebElementCondition} The new condition.
	 */
	exports.elementLocated = function elementLocated(locator) {
	  locator = by.checkedLocator(locator);
	  let locatorStr =
	      typeof locator === 'function' ? 'by function()' : locator + '';
	  return new WebElementCondition('for element to be located ' + locatorStr,
	      function(driver) {
	        return driver.findElements(locator).then(function(elements) {
	          return elements[0];
	        });
	      });
	};


	/**
	 * Creates a condition that will loop until at least one element is
	 * {@link ./webdriver.WebDriver#findElement found} with the given locator.
	 *
	 * @param {!(By|Function)} locator The locator to use.
	 * @return {!Condition<!Array<!./webdriver.WebElement>>} The new
	 *     condition.
	 */
	exports.elementsLocated = function elementsLocated(locator) {
	  locator = by.checkedLocator(locator);
	  let locatorStr =
	      typeof locator === 'function' ? 'by function()' : locator + '';
	  return new Condition(
	      'for at least one element to be located ' + locatorStr,
	      function(driver) {
	        return driver.findElements(locator).then(function(elements) {
	          return elements.length > 0 ? elements : null;
	        });
	      });
	};


	/**
	 * Creates a condition that will wait for the given element to become stale. An
	 * element is considered stale once it is removed from the DOM, or a new page
	 * has loaded.
	 *
	 * @param {!./webdriver.WebElement} element The element that should become stale.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.stalenessOf = function stalenessOf(element) {
	  return new Condition('element to become stale', function() {
	    return element.getTagName().then(
	        function() { return false; },
	        function(e) {
	          if (e instanceof error.StaleElementReferenceError) {
	            return true;
	          }
	          throw e;
	        });
	  });
	};


	/**
	 * Creates a condition that will wait for the given element to become visible.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @return {!WebElementCondition} The new condition.
	 * @see ./webdriver.WebDriver#isDisplayed
	 */
	exports.elementIsVisible = function elementIsVisible(element) {
	  return new WebElementCondition('until element is visible', function() {
	    return element.isDisplayed().then(v => v ? element : null);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element to be in the DOM,
	 * yet not visible to the user.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @return {!WebElementCondition} The new condition.
	 * @see ./webdriver.WebDriver#isDisplayed
	 */
	exports.elementIsNotVisible = function elementIsNotVisible(element) {
	  return new WebElementCondition('until element is not visible', function() {
	    return element.isDisplayed().then(v => v ? null : element);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element to be enabled.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#isEnabled
	 */
	exports.elementIsEnabled = function elementIsEnabled(element) {
	  return new WebElementCondition('until element is enabled', function() {
	    return element.isEnabled().then(v => v ? element : null);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element to be disabled.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#isEnabled
	 */
	exports.elementIsDisabled = function elementIsDisabled(element) {
	  return new WebElementCondition('until element is disabled', function() {
	    return element.isEnabled().then(v => v ? null : element);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element to be selected.
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#isSelected
	 */
	exports.elementIsSelected = function elementIsSelected(element) {
	  return new WebElementCondition('until element is selected', function() {
	    return element.isSelected().then(v => v ? element : null);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element to be deselected.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#isSelected
	 */
	exports.elementIsNotSelected = function elementIsNotSelected(element) {
	  return new WebElementCondition('until element is not selected', function() {
	    return element.isSelected().then(v => v ? null : element);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element's
	 * {@link webdriver.WebDriver#getText visible text} to match the given
	 * {@code text} exactly.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @param {string} text The expected text.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#getText
	 */
	exports.elementTextIs = function elementTextIs(element, text) {
	  return new WebElementCondition('until element text is', function() {
	    return element.getText().then(t => t === text ? element : null);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element's
	 * {@link webdriver.WebDriver#getText visible text} to contain the given
	 * substring.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @param {string} substr The substring to search for.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#getText
	 */
	exports.elementTextContains = function elementTextContains(element, substr) {
	  return new WebElementCondition('until element text contains', function() {
	    return element.getText()
	        .then(t => t.indexOf(substr) != -1 ? element : null);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element's
	 * {@link webdriver.WebDriver#getText visible text} to match a regular
	 * expression.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @param {!RegExp} regex The regular expression to test against.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#getText
	 */
	exports.elementTextMatches = function elementTextMatches(element, regex) {
	  return new WebElementCondition('until element text matches', function() {
	    return element.getText().then(t => regex.test(t) ? element : null);
	  });
	};


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a {@linkplain Driver WebDriver} client for the
	 * Opera web browser (v26+). Before using this module, you must download the
	 * latest OperaDriver
	 * [release](https://github.com/operasoftware/operachromiumdriver/releases) and
	 * ensure it can be found on your system
	 * [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).
	 *
	 * There are three primary classes exported by this module:
	 *
	 * 1. {@linkplain ServiceBuilder}: configures the
	 *     {@link selenium-webdriver/remote.DriverService remote.DriverService}
	 *     that manages the
	 *     [OperaDriver](https://github.com/operasoftware/operachromiumdriver)
	 *     child process.
	 *
	 * 2. {@linkplain Options}: defines configuration options for each new Opera
	 *     session, such as which {@linkplain Options#setProxy proxy} to use,
	 *     what {@linkplain Options#addExtensions extensions} to install, or
	 *     what {@linkplain Options#addArguments command-line switches} to use when
	 *     starting the browser.
	 *
	 * 3. {@linkplain Driver}: the WebDriver client; each new instance will control
	 *     a unique browser session with a clean user profile (unless otherwise
	 *     configured through the {@link Options} class).
	 *
	 * By default, every Opera session will use a single driver service, which is
	 * started the first time a {@link Driver} instance is created and terminated
	 * when this process exits. The default service will inherit its environment
	 * from the current process and direct all output to /dev/null. You may obtain
	 * a handle to this default service using
	 * {@link #getDefaultService getDefaultService()} and change its configuration
	 * with {@link #setDefaultService setDefaultService()}.
	 *
	 * You may also create a {@link Driver} with its own driver service. This is
	 * useful if you need to capture the server's log output for a specific session:
	 *
	 *     var opera = require('selenium-webdriver/opera');
	 *
	 *     var service = new opera.ServiceBuilder()
	 *         .loggingTo('/my/log/file.txt')
	 *         .enableVerboseLogging()
	 *         .build();
	 *
	 *     var options = new opera.Options();
	 *     // configure browser options ...
	 *
	 *     var driver = new opera.Driver(options, service);
	 *
	 * Users should only instantiate the {@link Driver} class directly when they
	 * need a custom driver service configuration (as shown above). For normal
	 * operation, users should start Opera using the
	 * {@link selenium-webdriver.Builder}.
	 */

	'use strict';

	const fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	const http = __webpack_require__(22),
	    io = __webpack_require__(75),
	    capabilities = __webpack_require__(69),
	    promise = __webpack_require__(66),
	    Symbols = __webpack_require__(70),
	    webdriver = __webpack_require__(71),
	    portprober = __webpack_require__(121),
	    remote = __webpack_require__(122);


	/**
	 * Name of the OperaDriver executable.
	 * @type {string}
	 * @const
	 */
	const OPERADRIVER_EXE =
	    process.platform === 'win32' ? 'operadriver.exe' : 'operadriver';


	/**
	 * Creates {@link remote.DriverService} instances that manages an
	 * [OperaDriver](https://github.com/operasoftware/operachromiumdriver)
	 * server in a child process.
	 */
	class ServiceBuilder extends remote.DriverService.Builder {
	  /**
	   * @param {string=} opt_exe Path to the server executable to use. If omitted,
	   *     the builder will attempt to locate the operadriver on the current
	   *     PATH.
	   * @throws {Error} If provided executable does not exist, or the operadriver
	   *     cannot be found on the PATH.
	   */
	  constructor(opt_exe) {
	    let exe = opt_exe || io.findInPath(OPERADRIVER_EXE, true);
	    if (!exe) {
	      throw Error(
	          'The OperaDriver could not be found on the current PATH. Please ' +
	          'download the latest version of the OperaDriver from ' +
	          'https://github.com/operasoftware/operachromiumdriver/releases and ' +
	          'ensure it can be found on your PATH.');
	    }

	    super(exe);
	    this.setLoopback(true);
	  }

	  /**
	   * Sets the path of the log file the driver should log to. If a log file is
	   * not specified, the driver will log to stderr.
	   * @param {string} path Path of the log file to use.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  loggingTo(path) {
	    return this.addArguments('--log-path=' + path);
	  }

	  /**
	   * Enables verbose logging.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  enableVerboseLogging() {
	    return this.addArguments('--verbose');
	  }

	  /**
	   * Silence sthe drivers output.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  silent() {
	    return this.addArguments('--silent');
	  }
	}



	/** @type {remote.DriverService} */
	var defaultService = null;


	/**
	 * Sets the default service to use for new OperaDriver instances.
	 * @param {!remote.DriverService} service The service to use.
	 * @throws {Error} If the default service is currently running.
	 */
	function setDefaultService(service) {
	  if (defaultService && defaultService.isRunning()) {
	    throw Error(
	        'The previously configured OperaDriver service is still running. ' +
	        'You must shut it down before you may adjust its configuration.');
	  }
	  defaultService = service;
	}


	/**
	 * Returns the default OperaDriver service. If such a service has not been
	 * configured, one will be constructed using the default configuration for
	 * a OperaDriver executable found on the system PATH.
	 * @return {!remote.DriverService} The default OperaDriver service.
	 */
	function getDefaultService() {
	  if (!defaultService) {
	    defaultService = new ServiceBuilder().build();
	  }
	  return defaultService;
	}


	/**
	 * @type {string}
	 * @const
	 */
	var OPTIONS_CAPABILITY_KEY = 'chromeOptions';


	/**
	 * Class for managing {@linkplain Driver OperaDriver} specific options.
	 */
	class Options {
	  constructor() {
	    /** @private {!Array.<string>} */
	    this.args_ = [];

	    /** @private {?string} */
	    this.binary_ = null;

	    /** @private {!Array.<(string|!Buffer)>} */
	    this.extensions_ = [];

	    /** @private {./lib/logging.Preferences} */
	    this.logPrefs_ = null;

	    /** @private {?capabilities.ProxyConfig} */
	    this.proxy_ = null;
	  }

	  /**
	   * Extracts the OperaDriver specific options from the given capabilities
	   * object.
	   * @param {!capabilities.Capabilities} caps The capabilities object.
	   * @return {!Options} The OperaDriver options.
	   */
	  static fromCapabilities(caps) {
	    var options;
	    var o = caps.get(OPTIONS_CAPABILITY_KEY);
	    if (o instanceof Options) {
	      options = o;
	    } else if (o) {
	      options = new Options()
	          .addArguments(o.args || [])
	          .addExtensions(o.extensions || [])
	          .setOperaBinaryPath(o.binary);
	    } else {
	      options = new Options;
	    }

	    if (caps.has(capabilities.Capability.PROXY)) {
	      options.setProxy(caps.get(capabilities.Capability.PROXY));
	    }

	    if (caps.has(capabilities.Capability.LOGGING_PREFS)) {
	      options.setLoggingPrefs(
	          caps.get(capabilities.Capability.LOGGING_PREFS));
	    }

	    return options;
	  }

	  /**
	   * Add additional command line arguments to use when launching the Opera
	   * browser.  Each argument may be specified with or without the "--" prefix
	   * (e.g. "--foo" and "foo"). Arguments with an associated value should be
	   * delimited by an "=": "foo=bar".
	   * @param {...(string|!Array.<string>)} var_args The arguments to add.
	   * @return {!Options} A self reference.
	   */
	  addArguments(var_args) {
	    this.args_ = this.args_.concat.apply(this.args_, arguments);
	    return this;
	  }

	  /**
	   * Add additional extensions to install when launching Opera. Each extension
	   * should be specified as the path to the packed CRX file, or a Buffer for an
	   * extension.
	   * @param {...(string|!Buffer|!Array.<(string|!Buffer)>)} var_args The
	   *     extensions to add.
	   * @return {!Options} A self reference.
	   */
	  addExtensions(var_args) {
	    this.extensions_ = this.extensions_.concat.apply(
	        this.extensions_, arguments);
	    return this;
	  }

	  /**
	   * Sets the path to the Opera binary to use. On Mac OS X, this path should
	   * reference the actual Opera executable, not just the application binary. The
	   * binary path be absolute or relative to the operadriver server executable, but
	   * it must exist on the machine that will launch Opera.
	   *
	   * @param {string} path The path to the Opera binary to use.
	   * @return {!Options} A self reference.
	   */
	  setOperaBinaryPath(path) {
	    this.binary_ = path;
	    return this;
	  }

	  /**
	   * Sets the logging preferences for the new session.
	   * @param {!./lib/logging.Preferences} prefs The logging preferences.
	   * @return {!Options} A self reference.
	   */
	  setLoggingPrefs(prefs) {
	    this.logPrefs_ = prefs;
	    return this;
	  }

	  /**
	   * Sets the proxy settings for the new session.
	   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.
	   * @return {!Options} A self reference.
	   */
	  setProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * Converts this options instance to a {@link capabilities.Capabilities}
	   *     object.
	   * @param {capabilities.Capabilities=} opt_capabilities The capabilities to
	   *     merge these options into, if any.
	   * @return {!capabilities.Capabilities} The capabilities.
	   */
	  toCapabilities(opt_capabilities) {
	    var caps = opt_capabilities || capabilities.Capabilities.opera();
	    caps.
	        set(capabilities.Capability.PROXY, this.proxy_).
	        set(capabilities.Capability.LOGGING_PREFS, this.logPrefs_).
	        set(OPTIONS_CAPABILITY_KEY, this);
	    return caps;
	  }

	  /**
	   * Converts this instance to its JSON wire protocol representation. Note this
	   * function is an implementation not intended for general use.
	   * @return {!Object} The JSON wire protocol representation of this instance.
	   */
	  [Symbols.serialize]() {
	    var json = {
	      args: this.args_,
	      extensions: this.extensions_.map(function(extension) {
	        if (Buffer.isBuffer(extension)) {
	          return extension.toString('base64');
	        }
	        return io.read(/** @type {string} */(extension))
	            .then(buffer => buffer.toString('base64'));
	      })
	    };
	    if (this.binary_) {
	      json.binary = this.binary_;
	    }
	    return json;
	  }
	}


	/**
	 * Creates a new WebDriver client for Opera.
	 */
	class Driver extends webdriver.WebDriver {
	  /**
	   * Creates a new session for Opera.
	   *
	   * @param {(capabilities.Capabilities|Options)=} opt_config The configuration
	   *     options.
	   * @param {remote.DriverService=} opt_service The session to use; will use
	   *     the {@link getDefaultService default service} by default.
	   * @param {promise.ControlFlow=} opt_flow The control flow to use,
	   *     or {@code null} to use the currently active flow.
	   * @return {!Driver} A new driver instance.
	   */
	  static createSession(opt_config, opt_service, opt_flow) {
	    var service = opt_service || getDefaultService();
	    var client = service.start().then(url => new http.HttpClient(url));
	    var executor = new http.Executor(client);

	    var caps =
	        opt_config instanceof Options ? opt_config.toCapabilities() :
	        (opt_config || capabilities.Capabilities.opera());

	    // On Linux, the OperaDriver does not look for Opera on the PATH, so we
	    // must explicitly find it. See: operachromiumdriver #9.
	    if (process.platform === 'linux') {
	      var options = Options.fromCapabilities(caps);
	      if (!options.binary_) {
	        let exe = io.findInPath('opera', true);
	        if (!exe) {
	          throw Error(
	              'The opera executable could not be found on the current PATH');
	        }
	        options.setOperaBinaryPath(exe);
	      }
	      caps = options.toCapabilities(caps);
	    }

	    return /** @type {!Driver} */(
	        webdriver.WebDriver.createSession(executor, caps, opt_flow, this));
	  }

	  /**
	   * This function is a no-op as file detectors are not supported by this
	   * implementation.
	   * @override
	   */
	  setFileDetector() {}
	}


	// PUBLIC API


	exports.Driver = Driver;
	exports.Options = Options;
	exports.ServiceBuilder = ServiceBuilder;
	exports.getDefaultService = getDefaultService;
	exports.setDefaultService = setDefaultService;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13), __webpack_require__(18).Buffer))

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a {@linkplain Driver WebDriver} client for the
	 * PhantomJS web browser. By default, it is expected that the PhantomJS
	 * executable can be located on your
	 * [PATH](https://en.wikipedia.org/wiki/PATH_(variable))
	 *
	 *  __Using a Custom PhantomJS Binary__
	 *
	 * If you have PhantomJS.exe placed somewhere other than the root of your
	 * working directory, you can build a custom Capability and attach the
	 * executable's location to the Capability
	 *
	 * For example, if you're using the
	 * [phantomjs-prebuilt](https://www.npmjs.com/package/phantomjs-prebuilt) module
	 * from npm:
	 *
	 *     //setup custom phantomJS capability
	 *     var phantomjs_exe = require('phantomjs-prebuilt').path;
	 *     var customPhantom = selenium.Capabilities.phantomjs();
	 *     customPhantom.set("phantomjs.binary.path", phantomjs_exe);
	 *     //build custom phantomJS driver
	 *     var driver = new selenium.Builder().
	 *            withCapabilities(customPhantom).
	 *            build();
	 *
	 */

	'use strict';

	const fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	const http = __webpack_require__(22),
	    io = __webpack_require__(75),
	    capabilities = __webpack_require__(69),
	    command = __webpack_require__(62),
	    logging = __webpack_require__(65),
	    promise = __webpack_require__(66),
	    webdriver = __webpack_require__(71),
	    portprober = __webpack_require__(121),
	    remote = __webpack_require__(122);


	/**
	 * Name of the PhantomJS executable.
	 * @type {string}
	 * @const
	 */
	const PHANTOMJS_EXE =
	    process.platform === 'win32' ? 'phantomjs.exe' : 'phantomjs';


	/**
	 * Capability that designates the location of the PhantomJS executable to use.
	 * @type {string}
	 * @const
	 */
	const BINARY_PATH_CAPABILITY = 'phantomjs.binary.path';


	/**
	 * Capability that designates the CLI arguments to pass to PhantomJS.
	 * @type {string}
	 * @const
	 */
	const CLI_ARGS_CAPABILITY = 'phantomjs.cli.args';


	/**
	 * Custom command names supported by PhantomJS.
	 * @enum {string}
	 */
	const Command = {
	  EXECUTE_PHANTOM_SCRIPT: 'executePhantomScript'
	};


	/**
	 * Finds the PhantomJS executable.
	 * @param {string=} opt_exe Path to the executable to use.
	 * @return {string} The located executable.
	 * @throws {Error} If the executable cannot be found on the PATH, or if the
	 *     provided executable path does not exist.
	 */
	function findExecutable(opt_exe) {
	  var exe = opt_exe || io.findInPath(PHANTOMJS_EXE, true);
	  if (!exe) {
	    throw Error(
	        'The PhantomJS executable could not be found on the current PATH. ' +
	        'Please download the latest version from ' +
	        'http://phantomjs.org/download.html and ensure it can be found on ' +
	        'your PATH. For more information, see ' +
	        'https://github.com/ariya/phantomjs/wiki');
	  }
	  if (!fs.existsSync(exe)) {
	    throw Error('File does not exist: ' + exe);
	  }
	  return exe;
	}


	/**
	 * Maps WebDriver logging level name to those recognised by PhantomJS.
	 * @const {!Map<string, string>}
	 */
	const WEBDRIVER_TO_PHANTOMJS_LEVEL = new Map([
	    [logging.Level.ALL.name, 'DEBUG'],
	    [logging.Level.DEBUG.name, 'DEBUG'],
	    [logging.Level.INFO.name, 'INFO'],
	    [logging.Level.WARNING.name, 'WARN'],
	    [logging.Level.SEVERE.name, 'ERROR']]);


	/**
	 * Creates a command executor with support for PhantomJS' custom commands.
	 * @param {!Promise<string>} url The server's URL.
	 * @return {!command.Executor} The new command executor.
	 */
	function createExecutor(url) {
	  let client = url.then(url => new http.HttpClient(url));
	  let executor = new http.Executor(client);

	  executor.defineCommand(
	      Command.EXECUTE_PHANTOM_SCRIPT,
	      'POST', '/session/:sessionId/phantom/execute');

	  return executor;
	}

	/**
	 * Creates a new WebDriver client for PhantomJS.
	 */
	class Driver extends webdriver.WebDriver {
	  /**
	   * Creates a new PhantomJS session.
	   *
	   * @param {capabilities.Capabilities=} opt_capabilities The desired
	   *     capabilities.
	   * @param {promise.ControlFlow=} opt_flow The control flow to use,
	   *     or {@code null} to use the currently active flow.
	   * @param {string=} opt_logFile Path to the log file for the phantomjs
	   *     executable's output. For convenience, this may be set at runtime with
	   *     the `SELENIUM_PHANTOMJS_LOG` environment variable.
	   * @return {!Driver} A new driver reference.
	   */
	  static createSession(opt_capabilities, opt_flow, opt_logFile) {
	    // TODO: add an Options class for consistency with the other driver types.

	    var caps = opt_capabilities || capabilities.Capabilities.phantomjs();
	    var exe = findExecutable(caps.get(BINARY_PATH_CAPABILITY));
	    var args = [];

	    var logPrefs = caps.get(capabilities.Capability.LOGGING_PREFS);
	    if (logPrefs instanceof logging.Preferences) {
	      logPrefs = logPrefs.toJSON();
	    }

	    if (logPrefs && logPrefs[logging.Type.DRIVER]) {
	      let level = WEBDRIVER_TO_PHANTOMJS_LEVEL.get(
	          logPrefs[logging.Type.DRIVER]);
	      if (level) {
	        args.push('--webdriver-loglevel=' + level);
	      }
	    }

	    opt_logFile = process.env['SELENIUM_PHANTOMJS_LOG'] || opt_logFile;
	    if (typeof opt_logFile === 'string') {
	      args.push('--webdriver-logfile=' + opt_logFile);
	    }

	    var proxy = caps.get(capabilities.Capability.PROXY);
	    if (proxy) {
	      switch (proxy.proxyType) {
	        case 'manual':
	          if (proxy.httpProxy) {
	            args.push(
	                '--proxy-type=http',
	                '--proxy=' + proxy.httpProxy);
	            console.log(args);
	          }
	          break;
	        case 'pac':
	          throw Error('PhantomJS does not support Proxy PAC files');
	        case 'system':
	          args.push('--proxy-type=system');
	          break;
	        case 'direct':
	          args.push('--proxy-type=none');
	          break;
	      }
	    }
	    args = args.concat(caps.get(CLI_ARGS_CAPABILITY) || []);

	    var port = portprober.findFreePort();
	    var service = new remote.DriverService(exe, {
	      port: port,
	      args: Promise.resolve(port).then(function(port) {
	        args.push('--webdriver=' + port);
	        return args;
	      })
	    });

	    var executor = createExecutor(service.start());
	    return /** @type {!Driver} */(webdriver.WebDriver.createSession(
	        executor, caps, opt_flow, this, () => service.kill()));
	  }

	  /**
	   * This function is a no-op as file detectors are not supported by this
	   * implementation.
	   * @override
	   */
	  setFileDetector() {}

	  /**
	   * Executes a PhantomJS fragment. This method is similar to
	   * {@link #executeScript}, except it exposes the
	   * <a href="http://phantomjs.org/api/">PhantomJS API</a> to the injected
	   * script.
	   *
	   * <p>The injected script will execute in the context of PhantomJS's
	   * {@code page} variable. If a page has not been loaded before calling this
	   * method, one will be created.</p>
	   *
	   * <p>Be sure to wrap callback definitions in a try/catch block, as failures
	   * may cause future WebDriver calls to fail.</p>
	   *
	   * <p>Certain callbacks are used by GhostDriver (the PhantomJS WebDriver
	   * implementation) and overriding these may cause the script to fail. It is
	   * recommended that you check for existing callbacks before defining your own.
	   * </p>
	   *
	   * As with {@link #executeScript}, the injected script may be defined as
	   * a string for an anonymous function body (e.g. "return 123;"), or as a
	   * function. If a function is provided, it will be decompiled to its original
	   * source. Note that injecting functions is provided as a convenience to
	   * simplify defining complex scripts. Care must be taken that the function
	   * only references variables that will be defined in the page's scope and
	   * that the function does not override {@code Function.prototype.toString}
	   * (overriding toString() will interfere with how the function is
	   * decompiled.
	   *
	   * @param {(string|!Function)} script The script to execute.
	   * @param {...*} var_args The arguments to pass to the script.
	   * @return {!promise.Thenable<T>} A promise that resolve to the
	   *     script's return value.
	   * @template T
	   */
	  executePhantomJS(script, var_args) {
	    if (typeof script === 'function') {
	      script = 'return (' + script + ').apply(this, arguments);';
	    }
	    var args = arguments.length > 1
	        ? Array.prototype.slice.call(arguments, 1) : [];
	    return this.schedule(
	        new command.Command(Command.EXECUTE_PHANTOM_SCRIPT)
	            .setParameter('script', script)
	            .setParameter('args', args),
	        'Driver.executePhantomJS()');
	  }
	}


	// PUBLIC API

	exports.Driver = Driver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a WebDriver client for Safari.
	 */

	'use strict';

	const http = __webpack_require__(22);
	const io = __webpack_require__(75);
	const {Capabilities, Capability} = __webpack_require__(69);
	const command = __webpack_require__(62);
	const error = __webpack_require__(64);
	const logging = __webpack_require__(65);
	const promise = __webpack_require__(66);
	const Symbols = __webpack_require__(70);
	const webdriver = __webpack_require__(71);
	const portprober = __webpack_require__(121);
	const remote = __webpack_require__(122);


	/**
	 * @return {string} .
	 * @throws {Error}
	 */
	function findSafariDriver() {
	  let exe = io.findInPath('safaridriver', true);
	  if (!exe) {
	    throw Error(
	      `The safaridriver executable could not be found on the current PATH.
	      Please ensure you are using Safari 10.0 or above.`);
	  }
	  return exe;
	}


	/**
	 * Creates {@link selenium-webdriver/remote.DriverService} instances that manage
	 * a [safaridriver] server in a child process.
	 *
	 * [safaridriver]: https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28
	 */
	class ServiceBuilder extends remote.DriverService.Builder {
	  /**
	   * @param {string=} opt_exe Path to the server executable to use. If omitted,
	   *     the builder will attempt to locate the safaridriver on the system PATH.
	   */
	  constructor(opt_exe) {
	    super(opt_exe || findSafariDriver());
	    this.setLoopback(true);  // Required.
	  }
	}


	const OPTIONS_CAPABILITY_KEY = 'safari.options';


	/**
	 * Configuration options specific to the {@link Driver SafariDriver}.
	 */
	class Options {
	  constructor() {
	    /** @private {Object<string, *>} */
	    this.options_ = null;

	    /** @private {./lib/logging.Preferences} */
	    this.logPrefs_ = null;

	    /** @private {?./lib/capabilities.ProxyConfig} */
	    this.proxy_ = null;
	  }

	  /**
	   * Extracts the SafariDriver specific options from the given capabilities
	   * object.
	   * @param {!Capabilities} capabilities The capabilities object.
	   * @return {!Options} The ChromeDriver options.
	   */
	  static fromCapabilities(capabilities) {
	    var options = new Options();

	    var o = capabilities.get(OPTIONS_CAPABILITY_KEY);
	    if (o instanceof Options) {
	      options = o;
	    } else if (o) {
	      options.setCleanSession(o.cleanSession);
	    }

	    if (capabilities.has(Capability.PROXY)) {
	      options.setProxy(capabilities.get(Capability.PROXY));
	    }

	    if (capabilities.has(Capability.LOGGING_PREFS)) {
	      options.setLoggingPrefs(capabilities.get(Capability.LOGGING_PREFS));
	    }

	    return options;
	  }

	  /**
	   * Sets whether to force Safari to start with a clean session. Enabling this
	   * option will cause all global browser data to be deleted.
	   * @param {boolean} clean Whether to make sure the session has no cookies,
	   *     cache entries, local storage, or databases.
	   * @return {!Options} A self reference.
	   */
	  setCleanSession(clean) {
	    if (!this.options_) {
	      this.options_ = {};
	    }
	    this.options_['cleanSession'] = clean;
	    return this;
	  }

	  /**
	   * Sets the logging preferences for the new session.
	   * @param {!./lib/logging.Preferences} prefs The logging preferences.
	   * @return {!Options} A self reference.
	   */
	  setLoggingPrefs(prefs) {
	    this.logPrefs_ = prefs;
	    return this;
	  }

	  /**
	   * Sets the proxy to use.
	   *
	   * @param {./lib/capabilities.ProxyConfig} proxy The proxy configuration to use.
	   * @return {!Options} A self reference.
	   */
	  setProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * Converts this options instance to a {@link Capabilities} object.
	   * @param {Capabilities=} opt_capabilities The capabilities to
	   *     merge these options into, if any.
	   * @return {!Capabilities} The capabilities.
	   */
	  toCapabilities(opt_capabilities) {
	    var caps = opt_capabilities || Capabilities.safari();
	    if (this.logPrefs_) {
	      caps.set(Capability.LOGGING_PREFS, this.logPrefs_);
	    }
	    if (this.proxy_) {
	      caps.set(Capability.PROXY, this.proxy_);
	    }
	    if (this.options_) {
	      caps.set(OPTIONS_CAPABILITY_KEY, this);
	    }
	    return caps;
	  }

	  /**
	   * Converts this instance to its JSON wire protocol representation. Note this
	   * function is an implementation detail not intended for general use.
	   * @return {!Object<string, *>} The JSON wire protocol representation of this
	   *     instance.
	   */
	  [Symbols.serialize]() {
	    return this.options_ || {};
	  }
	}


	/**
	 * A WebDriver client for Safari. This class should never be instantiated
	 * directly; instead, use the {@linkplain ./builder.Builder Builder}:
	 *
	 *     var driver = new Builder()
	 *         .forBrowser('safari')
	 *         .build();
	 *
	 */
	class Driver extends webdriver.WebDriver {
	  /**
	   * Creates a new Safari session.
	   *
	   * @param {(Options|Capabilities)=} opt_config The configuration
	   *     options for the new session.
	   * @param {promise.ControlFlow=} opt_flow The control flow to create
	   *     the driver under.
	   * @return {!Driver} A new driver instance.
	   */
	  static createSession(opt_config, opt_flow) {
	    let caps;
	    if (opt_config instanceof Options) {
	      caps = opt_config.toCapabilities();
	    } else {
	      caps = opt_config || Capabilities.safari()
	    }

	    let service = new ServiceBuilder().build();
	    let executor = new http.Executor(
	        service.start().then(url => new http.HttpClient(url)));

	    return /** @type {!Driver} */(webdriver.WebDriver.createSession(
	        executor, caps, opt_flow, this, () => service.kill()));
	  }
	}


	// Public API


	exports.Driver = Driver;
	exports.Options = Options;
	exports.ServiceBuilder = ServiceBuilder;


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Provides wrappers around the following global functions from
	 * [Mocha's BDD interface](https://github.com/mochajs/mocha):
	 *
	 * - after
	 * - afterEach
	 * - before
	 * - beforeEach
	 * - it
	 * - it.only
	 * - it.skip
	 * - xit
	 *
	 * Each of the wrapped functions support generator functions. If the generator
	 * {@linkplain ../lib/promise.consume yields a promise}, the test will wait
	 * for that promise to resolve before invoking the next iteration of the
	 * generator:
	 *
	 *     test.it('generators', function*() {
	 *       let x = yield Promise.resolve(1);
	 *       assert.equal(x, 1);
	 *     });
	 *
	 * The provided wrappers leverage the {@link webdriver.promise.ControlFlow}
	 * to simplify writing asynchronous tests:
	 *
	 *     var By = require('selenium-webdriver').By,
	 *         until = require('selenium-webdriver').until,
	 *         firefox = require('selenium-webdriver/firefox'),
	 *         test = require('selenium-webdriver/testing');
	 *
	 *     test.describe('Google Search', function() {
	 *       var driver;
	 *
	 *       test.before(function() {
	 *         driver = new firefox.Driver();
	 *       });
	 *
	 *       test.after(function() {
	 *         driver.quit();
	 *       });
	 *
	 *       test.it('should append query to title', function() {
	 *         driver.get('http://www.google.com/ncr');
	 *         driver.findElement(By.name('q')).sendKeys('webdriver');
	 *         driver.findElement(By.name('btnG')).click();
	 *         driver.wait(until.titleIs('webdriver - Google Search'), 1000);
	 *       });
	 *     });
	 *
	 * You may conditionally suppress a test function using the exported
	 * "ignore" function. If the provided predicate returns true, the attached
	 * test case will be skipped:
	 *
	 *     test.ignore(maybe()).it('is flaky', function() {
	 *       if (Math.random() < 0.5) throw Error();
	 *     });
	 *
	 *     function maybe() { return Math.random() < 0.5; }
	 */

	'use strict';

	const promise = __webpack_require__(16).promise;
	const flow = (function() {
	  const initial = process.env['SELENIUM_PROMISE_MANAGER'];
	  try {
	    process.env['SELENIUM_PROMISE_MANAGER'] = '1';
	    return promise.controlFlow();
	  } finally {
	    if (initial === undefined) {
	      delete process.env['SELENIUM_PROMISE_MANAGER'];
	    } else {
	      process.env['SELENIUM_PROMISE_MANAGER'] = initial;
	    }
	  }
	})();


	/**
	 * Wraps a function so that all passed arguments are ignored.
	 * @param {!Function} fn The function to wrap.
	 * @return {!Function} The wrapped function.
	 */
	function seal(fn) {
	  return function() {
	    fn();
	  };
	}


	/**
	 * Wraps a function on Mocha's BDD interface so it runs inside a
	 * webdriver.promise.ControlFlow and waits for the flow to complete before
	 * continuing.
	 * @param {!Function} globalFn The function to wrap.
	 * @return {!Function} The new function.
	 */
	function wrapped(globalFn) {
	  return function() {
	    if (arguments.length === 1) {
	      return globalFn(wrapArgument(arguments[0]));

	    } else if (arguments.length === 2) {
	      return globalFn(arguments[0], wrapArgument(arguments[1]));

	    } else {
	      throw Error('Invalid # arguments: ' + arguments.length);
	    }
	  };
	}


	function wrapArgument(value) {
	  if (typeof value === 'function') {
	    return makeAsyncTestFn(value);
	  }
	  return value;
	}


	/**
	 * Make a wrapper to invoke caller's test function, fn.  Run the test function
	 * within a ControlFlow.
	 *
	 * Should preserve the semantics of Mocha's Runnable.prototype.run (See
	 * https://github.com/mochajs/mocha/blob/master/lib/runnable.js#L192)
	 *
	 * @param {!Function} fn
	 * @return {!Function}
	 */
	function makeAsyncTestFn(fn) {
	  const isAsync = fn.length > 0;
	  const isGenerator = promise.isGenerator(fn);
	  if (isAsync && isGenerator) {
	    throw TypeError(
	        'generator-based tests must not take a callback; for async testing,'
	            + ' return a promise (or yield on a promise)');
	  }

	  var ret = /** @type {function(this: mocha.Context)}*/ (function(done) {
	    const runTest = (resolve, reject) => {
	      try {
	        if (isAsync) {
	          fn.call(this, err => err ? reject(err) : resolve());
	        } else if (isGenerator) {
	          resolve(promise.consume(fn, this));
	        } else {
	          resolve(fn.call(this));
	        }
	      } catch (ex) {
	        reject(ex);
	      }
	    };

	    if (!promise.USE_PROMISE_MANAGER) {
	      new Promise(runTest).then(seal(done), done);
	      return;
	    }

	    var runnable = this.runnable();
	    var mochaCallback = runnable.callback;
	    runnable.callback = function() {
	      flow.reset();
	      return mochaCallback.apply(this, arguments);
	    };

	    flow.execute(function controlFlowExecute() {
	      return new promise.Promise(function(fulfill, reject) {
	        return runTest(fulfill, reject);
	      }, flow);
	    }, runnable.fullTitle()).then(seal(done), done);
	  });

	  ret.toString = function() {
	    return fn.toString();
	  };

	  return ret;
	}


	/**
	 * Ignores the test chained to this function if the provided predicate returns
	 * true.
	 * @param {function(): boolean} predicateFn A predicate to call to determine
	 *     if the test should be suppressed. This function MUST be synchronous.
	 * @return {!Object} An object with wrapped versions of {@link #it()} and
	 *     {@link #describe()} that ignore tests as indicated by the predicate.
	 */
	function ignore(predicateFn) {
	  var describe = wrap(exports.xdescribe, exports.describe);
	  describe.only = wrap(exports.xdescribe, exports.describe.only);

	  var it = wrap(exports.xit, exports.it);
	  it.only = wrap(exports.xit, exports.it.only);

	  return {
	    describe: describe,
	    it: it
	  };

	  function wrap(onSkip, onRun) {
	    return function(title, fn) {
	      if (predicateFn()) {
	        onSkip(title, fn);
	      } else {
	        onRun(title, fn);
	      }
	    };
	  }
	}


	/**
	 * @param {string} name
	 * @return {!Function}
	 * @throws {TypeError}
	 */
	function getMochaGlobal(name) {
	  let fn = global[name];
	  let type = typeof fn;
	  if (type !== 'function') {
	    throw TypeError(
	        `Expected global.${name} to be a function, but is ${type}. `
	            + 'This can happen if you try using this module when running '
	            + 'with node directly instead of using the mocha executable');
	  }
	  return fn;
	}


	const WRAPPED = {
	  after: null,
	  afterEach: null,
	  before: null,
	  beforeEach: null,
	  it: null,
	  itOnly: null,
	  xit: null
	};


	function wrapIt() {
	  if (!WRAPPED.it) {
	    let it = getMochaGlobal('it');
	    WRAPPED.it = wrapped(it);
	    WRAPPED.itOnly = wrapped(it.only);
	  }
	}



	// PUBLIC API


	/**
	 * @return {!promise.ControlFlow} the control flow instance used by this module
	 *     to coordinate test actions.
	 */
	exports.controlFlow = function(){
	  return flow;
	};


	/**
	 * Registers a new test suite.
	 * @param {string} name The suite name.
	 * @param {function()=} opt_fn The suite function, or `undefined` to define
	 *     a pending test suite.
	 */
	exports.describe = function(name, opt_fn) {
	  let fn = getMochaGlobal('describe');
	  return opt_fn ? fn(name, opt_fn) : fn(name);
	};


	/**
	 * Defines a suppressed test suite.
	 * @param {string} name The suite name.
	 * @param {function()=} opt_fn The suite function, or `undefined` to define
	 *     a pending test suite.
	 */
	exports.describe.skip = function(name, opt_fn) {
	  let fn = getMochaGlobal('describe');
	  return opt_fn ? fn.skip(name, opt_fn) : fn.skip(name);
	};


	/**
	 * Defines a suppressed test suite.
	 * @param {string} name The suite name.
	 * @param {function()=} opt_fn The suite function, or `undefined` to define
	 *     a pending test suite.
	 */
	exports.xdescribe = function(name, opt_fn) {
	  let fn = getMochaGlobal('xdescribe');
	  return opt_fn ? fn(name, opt_fn) : fn(name);
	};


	/**
	 * Register a function to call after the current suite finishes.
	 * @param {function()} fn .
	 */
	exports.after = function(fn) {
	  if (!WRAPPED.after) {
	    WRAPPED.after = wrapped(getMochaGlobal('after'));
	  }
	  WRAPPED.after(fn);
	};


	/**
	 * Register a function to call after each test in a suite.
	 * @param {function()} fn .
	 */
	exports.afterEach = function(fn) {
	  if (!WRAPPED.afterEach) {
	    WRAPPED.afterEach = wrapped(getMochaGlobal('afterEach'));
	  }
	  WRAPPED.afterEach(fn);
	};


	/**
	 * Register a function to call before the current suite starts.
	 * @param {function()} fn .
	 */
	exports.before = function(fn) {
	  if (!WRAPPED.before) {
	    WRAPPED.before = wrapped(getMochaGlobal('before'));
	  }
	  WRAPPED.before(fn);
	};

	/**
	 * Register a function to call before each test in a suite.
	 * @param {function()} fn .
	 */
	exports.beforeEach = function(fn) {
	  if (!WRAPPED.beforeEach) {
	    WRAPPED.beforeEach = wrapped(getMochaGlobal('beforeEach'));
	  }
	  WRAPPED.beforeEach(fn);
	};

	/**
	 * Add a test to the current suite.
	 * @param {string} name The test name.
	 * @param {function()=} opt_fn The test function, or `undefined` to define
	 *     a pending test case.
	 */
	exports.it = function(name, opt_fn) {
	  wrapIt();
	  if (opt_fn) {
	    WRAPPED.it(name, opt_fn);
	  } else {
	    WRAPPED.it(name);
	  }
	};

	/**
	 * An alias for {@link #it()} that flags the test as the only one that should
	 * be run within the current suite.
	 * @param {string} name The test name.
	 * @param {function()=} opt_fn The test function, or `undefined` to define
	 *     a pending test case.
	 */
	exports.it.only = function(name, opt_fn) {
	  wrapIt();
	  if (opt_fn) {
	    WRAPPED.itOnly(name, opt_fn);
	  } else {
	    WRAPPED.itOnly(name);
	  }
	};


	/**
	 * Adds a test to the current suite while suppressing it so it is not run.
	 * @param {string} name The test name.
	 * @param {function()=} opt_fn The test function, or `undefined` to define
	 *     a pending test case.
	 */
	exports.xit = function(name, opt_fn) {
	  if (!WRAPPED.xit) {
	    WRAPPED.xit = wrapped(getMochaGlobal('xit'));
	  }
	  if (opt_fn) {
	    WRAPPED.xit(name, opt_fn);
	  } else {
	    WRAPPED.xit(name);
	  }
	};


	exports.it.skip = exports.xit;
	exports.ignore = ignore;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13), (function() { return this; }())))

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	
	const assert = __webpack_require__(11);
	const webdriver = __webpack_require__(16);
	const test = __webpack_require__(327);


	test.describe('10+ cards testing', function () {
	  let driver

	  test.beforeEach(() => {
	    this.timeout(10000);
	    driver = new webdriver.Builder()
	                          .forBrowser('chrome')
	                          .build();
	    driver.get('http://localhost:8080');
	  });

	  test.afterEach(() => {
	    driver.quit()
	  })

	  test.it('should append a TODO to the page', function () {

	    const title = driver.findElement({className: 'title'})
	    const body = driver.findElement({className: 'body'})
	    const saveBtn = driver.findElement({className: 'save'})

	    title.sendKeys('this is the title')
	    body.sendKeys('this is the body')
	    saveBtn.click()


	    title.sendKeys('this is the title')
	    body.sendKeys('this is the body')
	    saveBtn.click()


	    driver.findElements({className: 'card'}).then((card) => {
	      assert.equal(card.length, 2);
	    })

	  })

	  test.it('will not show more than 10 ideas on the page', function () {
	    //concept note: add a 'complete' class to the card on-click
	    const title = driver.findElement({className: "title" })
	    const task = driver.findElement({className: "body"})
	    const saveButton = driver.findElement({className: "save"})
	    title.sendKeys('test task ')
	    task.sendKeys('go eat food')
	    saveButton.click()
	    for (let i = 0; i < 12; i++) {
	      title.sendKeys(i)
	      task.sendKeys(i)
	      saveButton.click()
	    }

	    driver.findElements({className: 'card'}).then((cards) => {
	      assert.equal(cards.length, 10)
	    })
	})




	  test.it('restores hidden card on delete of visable card', function () {
	    const title = driver.findElement({className: "title" })
	    const task = driver.findElement({className: "body"})
	    const saveButton = driver.findElement({className: "save"})
	    title.sendKeys('test task ')
	    task.sendKeys('go eat food')
	    saveButton.click()
	    for (let i = 0; i < 12; i++) {
	      title.sendKeys(i)
	      task.sendKeys(i)
	      saveButton.click()
	    }

	    driver.findElement({className: 'close-card'}).click()

	    driver.findElements({className: 'card'}).then((cards) => {
	      assert.equal(cards.length, 10)
	    })
	  })
	})


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {process.nextTick(function() {
		delete __webpack_require__.c[module.id];
		if(typeof window !== "undefined" && window.mochaPhantomJS)
			mochaPhantomJS.run();
		else
			mocha.run();
	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }
/******/ ]);